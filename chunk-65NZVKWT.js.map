{"version":3,"sources":["../src/graphics/loader/loader.ts"],"sourcesContent":["import { createEventBus } from \"@utils/event_management/eventBus\";\nimport { LoadingEvents } from \"@utils/event_management/eventType\";\nimport { GlobalState } from \"@utils/state/globalState\";\nimport { LoadingContext } from \"@utils/state/globalStateData\";\nimport { LoadingManager, Scene, WebGLRenderer } from \"three\";\nimport { createHDRLoader } from \"./file_type_plugins/hdr_loader\";\nimport { createMeshLoader } from \"./file_type_plugins/mesh_loader\";\nimport { AssetMetaData, LoaderPlugin } from \"./loaderPlugins\";\n\nexport interface LoaderOptions {\n  meshesMetaData: AssetMetaData[];\n  hdrMetaData?: AssetMetaData;\n}\n\nexport interface LoaderContext {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loaderEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n  globalState: GlobalState;\n}\n\nexport interface Loader {\n  configure: () => void;\n  loadAll: () => Promise<{\n    success: string[];\n    error: string[];\n  }>;\n  dispose: () => void;\n}\n/**\n * @description creates a loader with the given settings\n * @param options options to change loader settings\n * @param context global context with references\n * @returns Loader\n */\nexport const createLoader = (\n  options: LoaderOptions,\n  context: LoaderContext\n): Loader => {\n  const { scene, renderer, loaderEventBus, globalState } = context;\n  const { meshesMetaData, hdrMetaData } = options;\n\n  const manager: LoadingManager = new LoadingManager();\n  const plugins: LoaderPlugin[] = [];\n\n  /**\n   * @description attaches the event bus for listening to loading changes\n   */\n  const _configureLoadingManager = () => {\n    manager.onStart = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:start\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      globalState.setState({\n        loading: {\n          active: true,\n          progress: 0,\n        } as LoadingContext,\n      });\n    };\n\n    manager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:progress\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      globalState.setState({\n        loading: {\n          active: true,\n          progress: itemsLoaded / itemsTotal,\n        } as LoadingContext,\n      });\n    };\n\n    manager.onLoad = () => {\n      loaderEventBus.emit({\n        type: \"load:complete\",\n      });\n    };\n\n    manager.onError = (url) => {\n      loaderEventBus.emit({\n        type: \"load:error\",\n        url: url,\n      });\n    };\n  };\n\n  /**\n   * @description create necessary loaders\n   */\n  const _configurePlugins = () => {\n    if (meshesMetaData.length > 0) {\n      plugins.push(\n        createMeshLoader({\n          assets: meshesMetaData,\n          scene: scene,\n          loadingManager: manager,\n          loadingEventBus: loaderEventBus,\n        })\n      );\n    }\n\n    if (hdrMetaData !== undefined && hdrMetaData !== null) {\n      plugins.push(\n        createHDRLoader({\n          asset: hdrMetaData,\n          scene: scene,\n          renderer: renderer,\n          loadingManager: manager,\n          loadingEventBus: loaderEventBus,\n        })\n      );\n    }\n  };\n\n  /**\n   * @description configuration\n   */\n  const _configure = () => {\n    _configureLoadingManager();\n    _configurePlugins();\n  };\n\n  /**\n   * @description load all types of assets\n   */\n  const load = async (): Promise<{ success: []; error: [] }> => {\n    const promises: Promise<void>[] = [];\n\n    plugins.forEach((plugin) => {\n      promises.push(plugin.load());\n    });\n\n    await Promise.allSettled(promises);\n\n    return {\n      success: [],\n      error: [],\n    };\n  };\n\n  const dispose = () => {\n    plugins.forEach((plugin) => {\n      plugin.dispose?.();\n    });\n  };\n\n  return {\n    configure: _configure,\n    loadAll: load,\n    dispose: dispose,\n  };\n};\n"],"mappings":";;;;;;;;AAIA,SAAS,sBAA4C;AA+B9C,IAAM,eAAe,CAC1B,SACA,YACW;AACX,QAAM,EAAE,OAAO,UAAU,gBAAgB,YAAY,IAAI;AACzD,QAAM,EAAE,gBAAgB,YAAY,IAAI;AAExC,QAAM,UAA0B,IAAI,eAAe;AACnD,QAAM,UAA0B,CAAC;AAKjC,QAAM,2BAA2B,MAAM;AACrC,YAAQ,UAAU,CAAC,KAAK,aAAa,eAAe;AAClD,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,QACN;AAAA,QACA,QAAQ;AAAA,QACR,OAAO;AAAA,MACT,CAAC;AACD,kBAAY,SAAS;AAAA,QACnB,SAAS;AAAA,UACP,QAAQ;AAAA,UACR,UAAU;AAAA,QACZ;AAAA,MACF,CAAC;AAAA,IACH;AAEA,YAAQ,aAAa,CAAC,KAAK,aAAa,eAAe;AACrD,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,QACN;AAAA,QACA,QAAQ;AAAA,QACR,OAAO;AAAA,MACT,CAAC;AACD,kBAAY,SAAS;AAAA,QACnB,SAAS;AAAA,UACP,QAAQ;AAAA,UACR,UAAU,cAAc;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH;AAEA,YAAQ,SAAS,MAAM;AACrB,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,MACR,CAAC;AAAA,IACH;AAEA,YAAQ,UAAU,CAAC,QAAQ;AACzB,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAKA,QAAM,oBAAoB,MAAM;AAC9B,QAAI,eAAe,SAAS,GAAG;AAC7B,cAAQ;AAAA,QACN,iBAAiB;AAAA,UACf,QAAQ;AAAA,UACR;AAAA,UACA,gBAAgB;AAAA,UAChB,iBAAiB;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,gBAAgB,UAAa,gBAAgB,MAAM;AACrD,cAAQ;AAAA,QACN,gBAAgB;AAAA,UACd,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA,gBAAgB;AAAA,UAChB,iBAAiB;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAKA,QAAM,aAAa,MAAM;AACvB,6BAAyB;AACzB,sBAAkB;AAAA,EACpB;AAKA,QAAM,OAAO,YAAiD;AAC5D,UAAM,WAA4B,CAAC;AAEnC,YAAQ,QAAQ,CAAC,WAAW;AAC1B,eAAS,KAAK,OAAO,KAAK,CAAC;AAAA,IAC7B,CAAC;AAED,UAAM,QAAQ,WAAW,QAAQ;AAEjC,WAAO;AAAA,MACL,SAAS,CAAC;AAAA,MACV,OAAO,CAAC;AAAA,IACV;AAAA,EACF;AAEA,QAAM,UAAU,MAAM;AACpB,YAAQ,QAAQ,CAAC,WAAW;AAC1B,aAAO,UAAU;AAAA,IACnB,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL,WAAW;AAAA,IACX,SAAS;AAAA,IACT;AAAA,EACF;AACF;","names":[]}