{"version":3,"sources":["../src/gameplay/projects/camera.ts"],"names":["createCameraManager","props","camera","scene","orbit","eventBusManager","getGlobalContext","points","Vector3","camPath","CatmullRomCurve3","t","isComplete","deltaTime","position","lookAt"],"mappings":"iFAoBaA,IAAAA,CAAAA,CAAuBC,GAAsC,CACxE,GAAM,CAAE,MAAAC,CAAAA,CAAAA,CAAQ,MAAAC,CAAO,CAAA,KAAA,CAAAC,CAAK,CAAIH,CAAAA,CAAAA,CAC1B,CAAC,eAAAI,CAAAA,CAAe,EAAEC,CAAiB,EAAA,CAEnCC,EAAiB,CACrB,IAAIC,QAAQ,CAAE,CAAA,CAAA,CAAE,EAAE,CAClB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,CAAC,CACjB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,CAAC,CACjB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,CAAC,CACjB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,CAAC,CACjB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,CAAC,CACjB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,EAAE,CAClB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,EAAE,CAClB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,IAAI,CACpB,CAAA,IAAIA,QAAQ,CAAE,CAAA,CAAA,CAAE,EAAE,CACpB,CAAA,CAEMC,EAAQ,IAAIC,gBAAAA,CAAiBH,CAAM,CACrCI,CAAAA,CAAAA,CAAE,EACFC,CAAmB,CAAA,KAAA,CAyCvB,OAAO,CACL,KAAA,CAxCU,IAAI,CACdD,CAAAA,CAAE,EACJ,CAuCE,CAAA,QAAA,CArCa,IAAI,CACjBP,CAAAA,CAAM,QAAQ,KACdF,CAAAA,CAAAA,CAAO,SAAS,GAAI,CAAA,CAAA,CAAE,IAAI,EAAE,CAAA,CAC5BA,EAAO,IAAK,CAAA,IAAA,CACZA,EAAO,GAAI,CAAA,IACb,EAiCE,MA/BYW,CAAAA,CAAAA,EAAmB,CAY/B,GATG,CAACD,GAAYD,CAAE,CAAA,CAAA,GAChBC,EAAW,IACXR,CAAAA,CAAAA,CAAM,QAAQ,IACdC,CAAAA,CAAAA,CAAgB,WAAW,IAAK,CAAA,CAC9B,KAAK,qBACL,CAAA,SAAA,CAAU,gBACZ,CAAC,CAAA,CAAA,CAGA,CAACO,CAAW,CAAA,CACbD,GAAGE,CAAU,CAAA,EAAA,CAEb,IAAMC,CAASL,CAAAA,CAAAA,CAAQ,WAAWE,CAAC,CAAA,CAC7BI,EAAON,CAAQ,CAAA,UAAA,CAAWE,EAAE,EAAG,CAAA,CACrCI,EAAO,CAAG,EAAA,EAAA,CAEVb,EAAO,QAAS,CAAA,IAAA,CAAKY,CAAQ,CAC7BZ,CAAAA,CAAAA,CAAO,OAAOa,CAAM,EACtB,CACF,CAUE,CAAA,UAAA,CARe,IAAI,EAAC,CASpB,QAPY,IAAI,EAQlB,CACF","file":"chunk-GMM2FN73.js","sourcesContent":["import { getGlobalContext } from \"@managers/globalContext\";\nimport {  CatmullRomCurve3, PerspectiveCamera, Scene, Vector3 } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n  scene: Scene;\n  orbit:OrbitControls\n}\n\nexport interface CameraManager {\n  mount:()=>void\n  activate:()=>void;\n  update:(deltaTime:number)=>void;\n  deactivate:()=>void;\n  unmount:()=>void\n}\n\n\n\nexport const createCameraManager = (props: CameraProps): CameraManager => {\n  const { camera, scene ,orbit} = props;\n  const {eventBusManager}=getGlobalContext();\n\n  const points:Vector3[]=[\n    new Vector3(0,2,10),\n    new Vector3(0,2,5),\n    new Vector3(0,2,3),\n    new Vector3(0,2,2),\n    new Vector3(0,2,1),\n    new Vector3(0,2,0),\n    new Vector3(0,2,-1),\n    new Vector3(0,1,-1),\n    new Vector3(0,1,-1.5),\n    new Vector3(0,1,-2),\n  ];\n\n  const camPath=new CatmullRomCurve3(points);\n  let t=0;\n  let isComplete:boolean=false;\n\n  const mount=()=>{\n    t=0;\n  }\n\n  const activate=()=>{\n    orbit.enabled=false;\n    camera.position.set(0,2.5,10);\n    camera.near=0.001;\n    camera.far=1000;\n  }\n\n  const update=(deltaTime:number)=>{\n    \n\n    if(!isComplete&&t>1) {\n      isComplete=true; \n      orbit.enabled=true;\n      eventBusManager.displayBus.emit({\n        type:\"project-screen:show\",\n        elementId:\"project-screen\"\n      })\n    }\n\n    if(!isComplete){\n      t+=deltaTime*0.1;\n\n      const position=camPath.getPointAt(t);\n      const lookAt=camPath.getPointAt(t+0.1);\n      lookAt.z-=0.1;\n     \n      camera.position.copy(position)\n      camera.lookAt(lookAt)\n    }\n  }\n\n  const deactivate=()=>{}\n\n  const unmount=()=>{}\n\n  return {\n    mount:mount,\n    activate:activate,\n    update:update,\n    deactivate:deactivate,\n    unmount:unmount\n  };\n};\n"]}