{"version":3,"sources":["../src/plugins/fsm/player/states.ts"],"names":["Idle","stateId","animationUnit","player","Walk","Run"],"mappings":"AAcA,IAAMA,CAAO,CAAA,CAAC,CAAE,OAAA,CAAAC,EAAS,aAAAC,CAAAA,CAAc,CAiB9B,IAAA,CACL,KAjBkCC,CAAAA,CAAAA,EAAc,CAChD,OAAA,CAAQ,IAAI,YAAY,CAAA,CACxBD,CAAc,CAAA,IAAA,CAAKD,CAAO,EAC5B,CAeE,CAAA,OAAA,CAboCE,GAAc,CAC7CA,CAAAA,CAAO,QAAS,EAAA,GAEjBA,CAAO,CAAA,cAAA,EAAkBA,CAAAA,CAAAA,CAAO,YAAY,KAAK,CAAA,CAChDA,CAAO,CAAA,WAAA,CAAY,MAAM,CAAA,EAChC,CASE,CAAA,IAAA,CAPiCA,GAAc,CAC/C,OAAA,CAAQ,GAAI,CAAA,WAAW,EACzB,CAMA,CAGIC,CAAAA,CAAAA,CAAAA,CAAO,CAAC,CAAE,aAAA,CAAAF,CAAe,CAAA,OAAA,CAAAD,CAAQ,CAAA,IAkB9B,CACL,KAAA,CAlBkCE,GAAc,CAChD,OAAA,CAAQ,GAAI,CAAA,YAAY,EACxBD,CAAc,CAAA,IAAA,CAAKD,CAAO,EAC5B,EAgBE,OAdoCE,CAAAA,CAAAA,EAAc,CAC7CA,CAAAA,CAAO,QAAS,EAAA,CAEVA,CAAO,CAAA,cAAA,IAChBA,CAAO,CAAA,WAAA,CAAY,KAAK,CAAA,CAFxBA,CAAO,CAAA,WAAA,CAAY,MAAM,EAI7B,EASE,IAPiCA,CAAAA,CAAAA,EAAc,CAC/C,OAAA,CAAQ,GAAI,CAAA,WAAW,EACzB,CAMA,GAGIE,CAAM,CAAA,CAAC,CAAE,aAAA,CAAAH,CAAe,CAAA,OAAA,CAAAD,CAAQ,CAAA,IAkB7B,CACL,KAlBkCE,CAAAA,CAAAA,EAAsB,CACxD,OAAA,CAAQ,GAAI,CAAA,WAAW,CACvBD,CAAAA,CAAAA,CAAc,KAAKD,CAAO,EAC5B,CAgBE,CAAA,OAAA,CAdoCE,CAAsB,EAAA,CACrDA,CAAO,CAAA,QAAA,GAEAA,CAAO,CAAA,cAAA,EACjBA,EAAAA,CAAAA,CAAO,WAAY,CAAA,MAAM,CAFzBA,CAAAA,CAAAA,CAAO,YAAY,MAAM,EAI7B,CASE,CAAA,IAAA,CAPiCA,GAAsB,CACvD,OAAA,CAAQ,GAAI,CAAA,UAAU,EACxB,CAMA,CAAA","file":"chunk-TVZ5BIMP.js","sourcesContent":["import { AnimationUnit } from \"engine/managers/animation/AnimationUnit\";\nimport { PlayerStateId } from \"types/fsm.types\";\nimport { GenericFSMState } from \"types/plugin.types\";\nimport { PlayerFSM } from \"./controller\";\n\ninterface PlayerStateProps {\n  /**Reference id for animation */\n  stateId: PlayerStateId;\n  /** animation unit resposnible for crossfade and such */\n  animationUnit: AnimationUnit<PlayerStateId>;\n}\n\ninterface PlayerFSMState extends GenericFSMState<PlayerFSM> {}\n\nconst Idle = ({ stateId, animationUnit }: PlayerStateProps): PlayerFSMState => {\n  const enter = <T extends PlayerFSM>(player: T) => {\n    console.log(\"enter idle\");\n    animationUnit.play(stateId);\n  };\n\n  const execute = <T extends PlayerFSM>(player: T) => {\n    if (!player.isMoving()) return;\n\n    if (player.isShiftPressed()) player.changeState(\"Run\");\n    else player.changeState(\"Walk\");\n  };\n\n  const exit = <T extends PlayerFSM>(player: T) => {\n    console.log(\"exit idle\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Walk = ({ animationUnit, stateId }: PlayerStateProps): PlayerFSMState => {\n  const enter = <T extends PlayerFSM>(player: T) => {\n    console.log(\"enter walk\");\n    animationUnit.play(stateId);\n  };\n\n  const execute = <T extends PlayerFSM>(player: T) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (player.isShiftPressed()) {\n      player.changeState(\"Run\");\n    }\n  };\n\n  const exit = <T extends PlayerFSM>(player: T) => {\n    console.log(\"exit walk\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Run = ({ animationUnit, stateId }: PlayerStateProps): PlayerFSMState => {\n  const enter = <T extends PlayerFSM>(player: PlayerFSM) => {\n    console.log(\"enter run\");\n    animationUnit.play(stateId);\n  };\n\n  const execute = <T extends PlayerFSM>(player: PlayerFSM) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (!player.isShiftPressed()) {\n      player.changeState(\"Walk\");\n    }\n  };\n\n  const exit = <T extends PlayerFSM>(player: PlayerFSM) => {\n    console.log(\"exit run\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nexport { Idle, Run, Walk };\n\nexport type { PlayerFSMState };\n"]}