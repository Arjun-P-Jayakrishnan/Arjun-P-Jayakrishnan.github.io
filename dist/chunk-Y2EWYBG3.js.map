{"version":3,"sources":["../gameplay/controllers/plugins/keyboard.ts","../gameplay/controllers/plugins/mouse.ts","../gameplay/controllers/controller.ts","../gameplay/modules/camera.ts","../gameplay/modules/ground.ts","../gameplay/modules/player.ts","../gameplay/gameplay.ts","../src/graphics/main.ts"],"names":["createKeyboardController","pressedKeys","normalizedKey","key","_handleKeyUp","e","_handleKeyDown","createMouseController","props","state","handleMouse","sideways","up_down","controllers","getControllers","CAMERA_CONSTANTS","Vector3","tempData","createCameraControls","camera","offset","targetPosition","lookTarget","radius","applyRotationDelta","yaw","pitch","playerPosition","rotation","createGround","ground","contextManager","getThreeJsContext","gridMat","createGridMaterial","PLAYER_CONSTANTS","createPlayer","eventBusManager","globalState","globalStorage","getGlobalContext","inputs","objects","animations","create","playerRoot","AnimationMixer","err","updateMouse","mouse","updateKeyboard","deltaTime","VELOCITY_DEADZONE","inputDirection","decay","updateControllers","updateAnimation","createGameplay","options","clock","Clock","references","Euler","mount","player","updateDeltaTime","createGameManager","flags","engineInstance","createThreeJsInstance","gameplay","GAMEPLAY_OPTIONS","gameContext","loaderInstance","_handleResize","width","height","_handleDebug","_mountWindowEventListeners","_getContext","createLoader","update","unmount","_onLoad"],"mappings":"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","file":"chunk-Y2EWYBG3.js","sourcesContent":["import { ControllerPlugin } from \"../plugins\";\n\n\nexport interface KeyboardController extends ControllerPlugin {\n  getPressedKeys: () => string[];\n  isKeyPressed: (key: string) => boolean;\n}\n\nexport const createKeyboardController = (): KeyboardController => {\n  const pressedKeys = new Set<string>();\n\n  const normalizedKey = (key: string) => key.toLowerCase();\n\n  const _handleKeyUp = (e: KeyboardEvent) => {\n    pressedKeys.delete(normalizedKey(e.key));\n  };\n\n  const _handleKeyDown = (e: KeyboardEvent) => {\n    pressedKeys.add(normalizedKey(e.key));\n  };\n\n  const mountEvents = () => {\n    window.addEventListener(\"keyup\", _handleKeyUp);\n    window.addEventListener(\"keydown\", _handleKeyDown);\n  };\n\n  const unmountEvents = () => {\n    window.removeEventListener(\"keyup\", _handleKeyUp);\n    window.removeEventListener(\"keydown\", _handleKeyDown);\n    pressedKeys.clear();\n  };\n\n  const getPressedKeys = (): string[] => {\n    return Array.from(pressedKeys);\n  };\n\n  const isKeyPressed = (key: string) => {\n    return pressedKeys.has(normalizedKey(key));\n  };\n\n  return {\n    mount: mountEvents,\n    unmount: unmountEvents,\n    getPressedKeys: getPressedKeys,\n    isKeyPressed: isKeyPressed,\n  };\n};\n","import { ControllerPlugin } from \"../plugins\";\n\n\nexport interface MouseControllerProps {\n  sensitivity: number;\n}\n\nexport interface MouseController extends ControllerPlugin {\n  getRotation: () => {\n    pitch: number;\n    yaw: number;\n  };\n}\n\ninterface State {\n  mouse: {\n    lastX: number;\n    lastY: number;\n  };\n\n  rotation: {\n    pitch: number;\n    yaw: number;\n  };\n}\n\nexport const createMouseController = (\n  props: MouseControllerProps\n): MouseController => {\n  let state: State = {\n    mouse: {\n      lastX: 0,\n      lastY: 0,\n    },\n    rotation: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n\n  const handleMouse = (e: MouseEvent) => {\n    state.rotation.pitch = e.clientY - state.mouse.lastY;\n    state.rotation.yaw = e.clientX - state.mouse.lastX;\n\n    state.mouse.lastX = e.clientX;\n    state.mouse.lastY = e.clientY;\n  };\n\n  const mountEvents = () => {\n    document.addEventListener(\"mousemove\", handleMouse);\n  };\n\n  const unmountEvents = () => {\n    document.removeEventListener(\"mousemove\", handleMouse);\n  };\n\n  const getRotation = () => {\n    const sideways = state.rotation.yaw;\n    const up_down = state.rotation.pitch;\n\n    state.rotation.pitch = 0;\n    state.rotation.yaw = 0;\n\n    return {\n      yaw: props.sensitivity * sideways,\n      pitch: props.sensitivity * up_down,\n    };\n  };\n\n  return {\n    mount: mountEvents,\n    unmount: unmountEvents,\n    getRotation: getRotation,\n  };\n};\n","import { Controllers } from \"./plugins\";\nimport { createKeyboardController } from \"./plugins/keyboard\";\nimport { createMouseController } from \"./plugins/mouse\";\n\nexport interface ControllerProps {\n  mouse: {\n    sensitivity: number;\n  };\n}\n\nexport interface ControllerManger {\n  mount: (props: ControllerProps) => void;\n  unmount: () => void;\n  getController: <K extends keyof Controllers>(key: K) => Controllers[K] | null;\n}\n\nlet controllers: Controllers | null = null;\n\nexport const getControllers = (): ControllerManger => {\n  /**\n   *\n   */\n  const mount = (props: ControllerProps) => {\n    if (!controllers) {\n      controllers = {\n        mouse: createMouseController(props.mouse),\n        keyboard: createKeyboardController(),\n      };\n\n      controllers.mouse.mount();\n      controllers.keyboard.mount();\n    }\n  };\n\n  /**\n   *\n   */\n  const unmount = () => {\n    if (!controllers) return;\n\n    controllers.mouse.unmount();\n    controllers.keyboard.unmount();\n  };\n\n  /**\n   *\n   * @param key which plugin are you looking for\n   * @returns the controller if it exists\n   */\n  const getController = <K extends keyof Controllers>(\n    key: K\n  ): Controllers[K] | null => {\n    return controllers ? controllers[key] : null;\n  };\n\n  return {\n    mount: mount,\n    getController: getController,\n    unmount: unmount,\n  };\n};\n","import { Euler, PerspectiveCamera, Vector3 } from \"three\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n}\n\nexport interface CameraControls {\n  update: (\n    playerPosition: Vector3,\n    rotation: { yaw: number; pitch: number }\n  ) => {\n    rotation: Euler;\n  };\n}\n\ninterface State {\n  yaw: number;\n  pitch: number;\n}\n\nconst CAMERA_CONSTANTS = {\n  THIRD_PERSON: {\n    OFFSET: new Vector3(0, 5, -10),\n    DISTANCE: 10,\n    HEIGHT_OFFSET: 3,\n    PITCH: {\n      MIN: 0,\n      MAX: Math.PI / 3,\n    },\n    SMOOTHING: 0.1,\n  },\n  FIRST_PERSON: {\n    OFFSET: new Vector3(0, 0, 0),\n  },\n};\n\nlet tempData: {\n  position: Vector3;\n  offset: Vector3;\n  lookTarget: Vector3;\n} = {\n  position: new Vector3(0, 0, 0),\n  offset: new Vector3(0, 0, 0),\n  lookTarget: new Vector3(0, 0, 0),\n};\n\nexport const createCameraControls = (props: CameraProps): CameraControls => {\n  const { camera } = props;\n  let isThirdPerson: boolean = true;\n  let state: State = {\n    pitch: 0,\n    yaw: 0,\n  };\n\n  const offset = tempData.offset;\n  const targetPosition = tempData.position;\n  const lookTarget = tempData.lookTarget;\n  const radius: number = CAMERA_CONSTANTS.THIRD_PERSON.DISTANCE ?? 5;\n\n  /**\n   *\n   * @param yaw\n   * @param pitch\n   */\n  const applyRotationDelta = (yaw: number, pitch: number) => {\n    state.yaw += yaw;\n    state.pitch += pitch;\n\n    state.pitch = Math.max(\n      CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MIN,\n      Math.min(state.pitch, CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MAX)\n    );\n  };\n\n  const update = (\n    playerPosition: Vector3,\n    rotation: { yaw: number; pitch: number }\n  ) => {\n    if (isThirdPerson) {\n      const { yaw, pitch } = rotation;\n\n      applyRotationDelta(yaw, pitch);\n\n      //Transform position of camera\n      offset.x = radius * Math.sin(state.yaw) * Math.cos(state.pitch);\n      offset.y =\n        radius * Math.sin(state.pitch) +\n        CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      offset.z = radius * Math.cos(state.yaw) * Math.cos(state.pitch);\n\n      //Apply target position and reach there\n      targetPosition.copy(playerPosition).add(offset);\n      camera.position.lerp(\n        tempData.position,\n        CAMERA_CONSTANTS.THIRD_PERSON.SMOOTHING\n      );\n\n      //Focus\n      lookTarget.copy(playerPosition);\n      lookTarget.y += CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      camera.lookAt(lookTarget);\n\n      return {\n        rotation: camera.rotation,\n      };\n    } else {\n      /**TODO: FPV */\n\n      return {\n        rotation: new Euler(0, 0, 0, \"XYZ\"),\n      };\n    }\n  };\n\n  return {\n    update: update,\n  };\n};\n","import { getThreeJsContext } from \"graphics/internal/context\";\nimport { createGridMaterial, GridMaterial } from \"graphics/materials/grid/grid-material\";\nimport { Mesh } from \"three\";\n\nexport interface GroundProps {\n  ids: {\n    groundRoot: string;\n  };\n}\n\nexport interface Ground {\n  mount: () => void;\n  update: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = (props: GroundProps): Ground => {\n  let ground: Mesh | null = null;\n  let contextManager = getThreeJsContext();\n\n  let gridMat: GridMaterial | null = null;\n\n  const mount = () => {\n    ground = contextManager\n      .getProperty(\"scene\")\n      .getObjectByName(props.ids.groundRoot) as Mesh;\n\n    if (!ground) {\n      console.error(\n        `Cant get ground mesh from the id : ${props.ids.groundRoot}`\n      );\n      return;\n    }\n\n    gridMat = createGridMaterial({\n      camera: contextManager.getProperty(\"camera\"),\n      fadeNear: 0.1,\n      fadeFar: 1,\n    });\n\n    ground.material = gridMat.mat;\n  };\n\n  const update = () => {\n    gridMat?.update(contextManager.getProperty(\"camera\").position)\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update:update,\n    unmount: unmount,\n  };\n};\n","import { getGlobalContext } from \"@utils/globalContext\";\nimport { getThreeJsContext } from \"graphics/internal/context\";\nimport { AnimationMixer, Euler, Object3D, Scene, Vector3 } from \"three\";\nimport { getControllers } from \"../controllers/controller\";\nimport { KeyboardController } from \"../controllers/plugins/keyboard\";\nimport { MouseController } from \"../controllers/plugins/mouse\";\n\nexport interface PlayerProps {\n  ids: {\n    rootMesh: string;\n  };\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  create: () => void;\n  update: (\n    deltaTime: number,\n    rotation: {\n      yaw: number;\n      pitch: number;\n    },\n    camera: {\n      rotation: Euler;\n    }\n  ) => {\n    position: Vector3;\n    rotation: Euler;\n  };\n  destroy: () => void;\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n  let inputs: {\n    mouse: MouseController | null;\n    keyboard: KeyboardController | null;\n  } = {\n    mouse: null,\n    keyboard: null,\n  };\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const create = () => {\n    try {\n      let playerRoot = contextManager\n        .getProperty(\"scene\")\n        .getObjectByName(props.ids.rootMesh);\n\n      // const playerRoot=scene.getObjectByName(props.ids.rootMesh) as Object3D;\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${props.ids.rootMesh}`\n        );\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n\n      inputs = {\n        mouse: getControllers().getController(\"mouse\"),\n        keyboard: getControllers().getController(\"keyboard\"),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (\n    mouse: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    state.rotationApplied = mouse;\n    objects.playerRoot.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (deltaTime: number) => {\n    if (!inputs.keyboard) return;\n    const FRICTION = 5.0;\n    const VELOCITY_DEADZONE = 0.001;\n\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (inputs.keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n    if (inputs.keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n    if (inputs.keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n    if (inputs.keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n    if (inputDirection.length() > 0) {\n      //normalize direction\n      inputDirection.applyQuaternion(objects.playerRoot.quaternion);\n      inputDirection.normalize();\n\n      //accelerate towards the direction\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n      //ensure the velocity doesn't go over the threshold\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n      const decay = Math.exp(-FRICTION * deltaTime);\n      state.velocity.multiplyScalar(decay);\n\n      if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n        state.velocity.set(0, 0, 0);\n      }\n    }\n\n    objects.playerRoot.position.add(state.velocity);\n  };\n\n  const updateControllers = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    updateMouse(rotation, camera);\n    updateKeyboard(deltaTime);\n  };\n\n  const updateAnimation = (deltaTime: number) => {\n    animations.mixer!.update(deltaTime);\n  };\n\n  const update = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    if (animations.mixer) {\n      updateAnimation(deltaTime);\n    }\n\n    updateControllers(deltaTime, rotation, camera);\n\n    return {\n      position: objects.playerRoot.position,\n      rotation: objects.playerRoot.rotation,\n    };\n  };\n\n  const destroy = () => {\n    try {\n      objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    create: create,\n    update: update,\n    destroy: destroy,\n  };\n};\n","import { getGlobalContext } from \"@utils/globalContext\";\nimport {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"graphics/internal/context\";\nimport { Clock, Euler, Vector3 } from \"three\";\nimport { ControllerManger, getControllers } from \"./controllers/controller\";\nimport { CameraControls, createCameraControls } from \"./modules/camera\";\nimport { createGround, Ground, GroundProps } from \"./modules/ground\";\nimport { createPlayer, Player, PlayerProps } from \"./modules/player\";\n\nexport interface GameplayOptions {\n  player: PlayerProps;\n  ground: GroundProps;\n}\n\nexport interface Gameplay {\n  mount: () => void;\n  update: () => void;\n  unmount: () => void;\n}\n\ninterface References {\n  player: Player;\n  camera: CameraControls;\n  ground: Ground;\n  controllers: ControllerManger;\n}\n\ninterface State {\n  deltaTime: number;\n  mouseRotation: {\n    yaw: number;\n    pitch: number;\n  };\n  camera: {\n    rotation: Euler;\n  };\n}\n\ninterface TempData {\n  deltaTime: number;\n  playerData: {\n    position: Vector3;\n    rotation: Euler;\n  } | null;\n}\n\nexport const createGameplay = (options: GameplayOptions): Gameplay => {\n  //\n  const { globalState, eventBusManager, globalStorage } = getGlobalContext();\n\n  const clock: Clock = new Clock();\n  let contextManager: ThreeJsContextManager;\n  let references: References;\n\n  //Re usable state (no re-allocation)\n  let state: State = {\n    deltaTime: 0,\n    mouseRotation: {\n      yaw: 0,\n      pitch: 0,\n    },\n    camera: {\n      rotation: new Euler(0, 0, 0, \"XYZ\"),\n    },\n  };\n\n  let tempData: TempData = {\n    deltaTime: 0,\n    playerData: null,\n  };\n\n  const mount = (): void => {\n    contextManager = getThreeJsContext();\n\n    const controllers: ControllerManger = getControllers();\n    controllers.mount({\n      mouse: {\n        sensitivity: 0.01,\n      },\n    });\n\n    const player = createPlayer({\n      ids: options.player.ids,\n    });\n    player.create();\n\n    const camera = createCameraControls({\n      camera: contextManager.getProperty(\"camera\"),\n    });\n\n    const ground = createGround(options.ground);\n    ground.mount();\n\n    references = { player, camera, ground, controllers };\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime)) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n    state.mouseRotation = references.controllers\n      .getController(\"mouse\")\n      ?.getRotation()!;\n    tempData.playerData = references.player.update(\n      state.deltaTime,\n      state.mouseRotation,\n      state.camera\n    );\n\n    state.camera = references.camera.update(\n      tempData.playerData.position,\n      state.mouseRotation\n    );\n\n    references.ground.update();\n  };\n\n  const unmount = () => {\n    references.player.destroy();\n    references.controllers.unmount();\n    references.ground.unmount();\n    contextManager.unmount();\n\n    ///De reference\n    references = null!;\n    contextManager = null!;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n","import { getGlobalContext } from \"@utils/globalContext\";\nimport { GAMEPLAY_OPTIONS } from \"config/assets\";\nimport { createGameplay, Gameplay } from \"../../gameplay/gameplay\";\nimport { getThreeJsContext, ThreeJsContext } from \"./internal/context\";\nimport { createThreeJsInstance } from \"./internal/internal\";\nimport { createLoader, Loader, LoaderOptions } from \"./loader/loader\";\n\nexport interface GameManagerProps {\n  loaderOptions: LoaderOptions;\n}\n\nexport interface GameEngineManager {\n  mount: () => void;\n  unmount: () => void;\n  update: () => void;\n  load: () => Promise<void>;\n}\n\nexport const createGameManager = (\n  props: GameManagerProps\n): GameEngineManager => {\n  const { globalState, eventBusManager } = getGlobalContext();\n  let flags = {\n    isMounted: false,\n  };\n\n  const engineInstance = createThreeJsInstance({\n    camera: {},\n    domMountTag: \"game-engine\",\n  });\n\n  const gameplay: Gameplay = createGameplay(GAMEPLAY_OPTIONS);\n\n  let gameContext: ThreeJsContext | null = null;\n  let loaderInstance: Loader | null = null;\n\n  /**\n   * @description handle resize of the canvas\n   */\n  const _handleResize = () => {\n    if (!gameContext) return;\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    gameContext.camera.aspect = width / height;\n    gameContext.camera.updateProjectionMatrix();\n\n    gameContext.renderer.setSize(width, height);\n  };\n\n  const _handleDebug = (e: KeyboardEvent) => {\n    if (!gameContext) return;\n\n    if (e.key.toLowerCase() === \"u\" && e.shiftKey) {\n      e.preventDefault();\n      eventBusManager.debugBus.emit({\n        type: \"debug:inspector\",\n        scene: gameContext.scene,\n      });\n    }\n  };\n\n  /**\n   * @description creates event listeners for various tasks\n   */\n  const _mountWindowEventListeners = () => {\n    /**\n     * Primary initialization to ensure correct aspect ratios\n     */\n    _handleResize();\n\n    window.addEventListener(\"resize\", _handleResize);\n    window.addEventListener(\"keydown\", _handleDebug);\n  };\n\n  const _getContext = () => {\n    gameContext = {\n      scene: getThreeJsContext().getProperty(\"scene\"),\n      camera: getThreeJsContext().getProperty(\"camera\"),\n      renderer: getThreeJsContext().getProperty(\"renderer\"),\n      orbit: getThreeJsContext().getProperty(\"orbit\"),\n    };\n\n    loaderInstance = createLoader(props.loaderOptions, {\n      globalState: globalState,\n      loaderEventBus: eventBusManager.loadingBus,\n      renderer: gameContext.renderer,\n      scene: gameContext.scene,\n    });\n  };\n\n  const mount = () => {\n    if (flags.isMounted) return;\n\n    engineInstance.mount();\n\n    _getContext();\n    /**\n     * Attach Event Listeners\n     */\n    _mountWindowEventListeners();\n\n    /**\n     * load all meshes ,objects and animations as per the given props\n     */\n    loaderInstance!.configure();\n\n    flags.isMounted = true;\n  };\n\n  const update = () => {\n    engineInstance.render();\n  };\n\n  /**\n   * @description unmount\n   */\n  const unmount = () => {\n    if (!flags.isMounted) return;\n    /**\n     * Release all event listeners to prevent memory leaks\n     */\n    window.removeEventListener(\"resize\", _handleResize);\n    window.removeEventListener(\"keydown\", _handleDebug);\n\n    if (gameplay) {\n      gameplay.unmount();\n    }\n\n    engineInstance.dispose();\n\n    if (loaderInstance) {\n      loaderInstance.dispose();\n      loaderInstance = null;\n    }\n\n    gameContext = null;\n\n    flags.isMounted = false;\n  };\n\n  const _onLoad = () => {\n    /**\n     * Initialize the gameplay mechanics and then pass update logic to renderer\n     */\n    gameplay.mount();\n\n    /**\n     * Register gameplay loop\n     */\n    engineInstance.register(gameplay.update);\n  };\n\n  const load = async () => {\n    try {\n      if (!flags.isMounted) throw new Error(`Try to load before mounting`);\n\n      await loaderInstance!.loadAll();\n\n      _onLoad();\n    } catch (err) {\n      console.error(`Error while loading :${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    unmount: unmount,\n    update: update,\n    load: load,\n  };\n};\n"]}