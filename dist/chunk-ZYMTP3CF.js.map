{"version":3,"sources":["../src/graphics/main.ts"],"names":["createGameManager","props","globalState","eventBusManager","getGlobalContext","flags","engineInstance","createThreeJsInstance","gameplay","createGameplay","GAMEPLAY_OPTIONS","gameContext","loaderInstance","_handleResize","width","height","_handleDebug","e","_mountWindowEventListeners","_getContext","getThreeJsContext","createLoader","mount","update","unmount","_onLoad","err"],"mappings":"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","file":"chunk-ZYMTP3CF.js","sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\n\nimport { GAMEPLAY_OPTIONS } from \"config/assets\";\nimport { createGameplay, Gameplay } from \"./gameplay/gameplay\";\nimport { getThreeJsContext, ThreeJsContext } from \"./internal/context\";\nimport { createThreeJsInstance } from \"./internal/internal\";\nimport { createLoader, Loader, LoaderOptions } from \"./loader/loader\";\n\nexport interface GameManagerProps {\n  loaderOptions: LoaderOptions;\n}\n\nexport interface GameEngineManager {\n  mount: () => void;\n  unmount: () => void;\n  update: () => void;\n  load: () => Promise<void>;\n}\n\nexport const createGameManager = (\n  props: GameManagerProps\n): GameEngineManager => {\n  const { globalState, eventBusManager } = getGlobalContext();\n  let flags = {\n    isMounted: false,\n  };\n\n  const engineInstance = createThreeJsInstance({\n    camera: {},\n    domMountTag: \"game-engine\",\n  });\n\n  const gameplay: Gameplay = createGameplay(GAMEPLAY_OPTIONS);\n\n  let gameContext: ThreeJsContext | null = null;\n  let loaderInstance: Loader | null = null;\n\n  /**\n   * @description handle resize of the canvas\n   */\n  const _handleResize = () => {\n    if (!gameContext) return;\n\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    gameContext.camera.aspect = width / height;\n    gameContext.camera.updateProjectionMatrix();\n\n    gameContext.renderer.setSize(width, height);\n  };\n\n  const _handleDebug = (e: KeyboardEvent) => {\n    if (!gameContext) return;\n\n    if (e.key.toLowerCase() === \"u\" && e.shiftKey) {\n      e.preventDefault();\n      eventBusManager.debugBus.emit({\n        type: \"debug:inspector\",\n        scene: gameContext.scene,\n      });\n    }\n  };\n\n  /**\n   * @description creates event listeners for various tasks\n   */\n  const _mountWindowEventListeners = () => {\n    /**\n     * Primary initialization to ensure correct aspect ratios\n     */\n    _handleResize();\n\n    window.addEventListener(\"resize\", _handleResize);\n    window.addEventListener(\"keydown\", _handleDebug);\n  };\n\n  const _getContext = () => {\n    gameContext = {\n      scene: getThreeJsContext().getProperty(\"scene\"),\n      camera: getThreeJsContext().getProperty(\"camera\"),\n      renderer: getThreeJsContext().getProperty(\"renderer\"),\n      orbit: getThreeJsContext().getProperty(\"orbit\"),\n    };\n\n    loaderInstance = createLoader(props.loaderOptions, {\n      globalState: globalState,\n      loaderEventBus: eventBusManager.loadingBus,\n      renderer: gameContext.renderer,\n      scene: gameContext.scene,\n    });\n  };\n\n  const mount = () => {\n    if (flags.isMounted) return;\n\n    engineInstance.mount();\n\n    _getContext();\n    /**\n     * Attach Event Listeners\n     */\n    _mountWindowEventListeners();\n\n    /**\n     * load all meshes ,objects and animations as per the given props\n     */\n    loaderInstance!.configure();\n\n    flags.isMounted = true;\n  };\n\n  const update = () => {\n    engineInstance.render();\n  };\n\n  /**\n   * @description unmount\n   */\n  const unmount = () => {\n    if (!flags.isMounted) return;\n    /**\n     * Release all event listeners to prevent memory leaks\n     */\n    window.removeEventListener(\"resize\", _handleResize);\n    window.removeEventListener(\"keydown\", _handleDebug);\n\n    if (gameplay) {\n      gameplay.unmount();\n    }\n\n    engineInstance.dispose();\n\n    if (loaderInstance) {\n      loaderInstance.dispose();\n      loaderInstance = null;\n    }\n\n    gameContext = null;\n\n    flags.isMounted = false;\n  };\n\n  const _onLoad = () => {\n    /**\n     * Initialize the gameplay mechanics and then pass update logic to renderer\n     */\n    gameplay.mount();\n\n    /**\n     * Register gameplay loop\n     */\n    engineInstance.register(gameplay.update);\n  };\n\n  const load = async () => {\n    try {\n      if (!flags.isMounted) throw new Error(`Try to load before mounting`);\n\n      await loaderInstance!.loadAll();\n\n      _onLoad();\n    } catch (err) {\n      console.error(`Error while loading :${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    unmount: unmount,\n    update: update,\n    load: load,\n  };\n};\n"]}