{"version":3,"sources":["../src/gameplay/navigation/camera.ts"],"names":["CAMERA_CONSTANTS","Vector3","tempData","createCameraManager","props","camera","state","offset","targetPosition","lookTarget","radius","applyRotationDelta","yaw","pitch","playerPosition","rotation"],"mappings":"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","file":"chunk-JD33M5ZD.js","sourcesContent":["import { Euler, PerspectiveCamera, Vector3 } from \"three\";\n\nexport interface CameraProps {\n  /**Main Camera */\n  camera: PerspectiveCamera;\n}\n\nexport interface CameraManager {\n  /** Update Camera to always look to the player */\n  update: ( playerPosition: Vector3, rotation: { yaw: number; pitch: number }) => { rotation: Euler };\n\n  mount:()=>void\n  activate:()=>void\n  deactivate:()=>void\n  unmount:()=>void\n}\n\ninterface InternalState {\n  yaw: number;\n  pitch: number;\n}\n\nconst CAMERA_CONSTANTS = {\n  THIRD_PERSON: {\n    OFFSET: new Vector3(0, 5, -10),\n    DISTANCE: 10,\n    HEIGHT_OFFSET: 3,\n    PITCH: {\n      MIN: 0,\n      MAX: Math.PI / 3,\n    },\n    SMOOTHING: 0.1,\n  },\n  FIRST_PERSON: {\n    OFFSET: new Vector3(0, 0, 0),\n  },\n} as const;\n\nlet tempData: {\n  position: Vector3;\n  offset: Vector3;\n  lookTarget: Vector3;\n} = {\n  position: new Vector3(0, 0, 0),\n  offset: new Vector3(0, 0, 0),\n  lookTarget: new Vector3(0, 0, 0),\n};\n\nexport const createCameraManager = (props: CameraProps): CameraManager => {\n  const { camera } = props;\n  let isThirdPerson: boolean = true;\n  let state: InternalState = { pitch: 0, yaw: 0,};\n\n  const offset = tempData.offset;\n  const targetPosition = tempData.position;\n  const lookTarget = tempData.lookTarget;\n  const radius: number = CAMERA_CONSTANTS.THIRD_PERSON.DISTANCE ?? 5;\n  \n  /**\n   *\n   * @param yaw\n   * @param pitch\n   */\n  const applyRotationDelta = (yaw: number, pitch: number) => {\n    state.yaw += yaw;\n    state.pitch += pitch;\n\n    state.pitch = Math.max(\n      CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MIN,\n      Math.min(state.pitch, CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MAX)\n    );\n  };\n\n  const update = (\n    playerPosition: Vector3,\n    rotation: { yaw: number; pitch: number }\n  ) => {\n    if (isThirdPerson) {\n      const { yaw, pitch } = rotation;\n\n      applyRotationDelta(yaw, pitch);\n\n      //Transform position of camera - Coordinates math\n      offset.x = radius * Math.sin(state.yaw) * Math.cos(state.pitch);\n      offset.y = radius * Math.sin(state.pitch) + CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      offset.z = radius * Math.cos(state.yaw) * Math.cos(state.pitch);\n\n      //Apply target position and reach there\n      targetPosition.copy(playerPosition).add(offset);\n      camera.position.lerp( targetPosition , CAMERA_CONSTANTS.THIRD_PERSON.SMOOTHING);\n\n      //Focus\n      lookTarget.copy(playerPosition);\n      lookTarget.y += CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      camera.lookAt(lookTarget);\n\n      return {\n        rotation: camera.rotation,\n      };\n    } else {\n      /**TODO: FPV */\n\n      return {\n        rotation: new Euler(0, 0, 0, \"XYZ\"),\n      };\n    }\n  };\n\n  const mount=()=>{\n\n  }\n\n  const activate=()=>{\n    camera.position.set(1,2,3);\n  }\n\n  const deactivate=()=>{}\n\n  const unmount=()=>{}\n\n  return {\n    update: update,\n    mount:mount,\n    activate:activate,\n    deactivate:deactivate,\n    unmount:unmount\n  };\n};\n"]}