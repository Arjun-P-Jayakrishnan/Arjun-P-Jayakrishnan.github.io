{"version":3,"sources":["../src/core/game_engine/game_context.ts"],"names":["internalContext","getThreeJsContext","ctx","key"],"mappings":"AAWA,IAAIA,EAA6C,IAcpCC,CAAAA,CAAAA,CAAoB,KAoBxB,CACL,KAAA,CApBaC,GAAwB,CACrC,GAAIF,CACA,CAAA,MAAM,IAAI,KAAM,CAAA,qDAAqD,EAGzEA,CAAkBE,CAAAA,EACpB,EAeE,OAbc,CAAA,IAAM,CACpBF,CAAAA,CAAkB,KACpB,CAYE,CAAA,GAAA,CAV2CG,GAAW,CACtD,GAAI,CAACH,CACH,CAAA,MAAM,IAAI,KAAM,CAAA,CAAA,eAAA,EAAkBG,CAAG,CAA6B,2BAAA,CAAA,CAAA,CAEpE,OAAOH,CAAgBG,CAAAA,CAAG,CAC5B,CAMA,CAAA","file":"chunk-QNDPI4IB.js","sourcesContent":["import { Nullable } from \"core/lifecyle\";\nimport { PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport interface ThreeJsContext {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  camera: PerspectiveCamera;\n  orbit:OrbitControls\n}\n\nlet internalContext:  Nullable<ThreeJsContext> = null;\n\nexport interface ThreeJsContextManager {\n  /** Injects three js context */\n  mount: (context: ThreeJsContext) => void;\n\n  /** reset context to allow re-initailization */\n  unmount: () => void;\n\n  /**Safely access a property from context */\n  get: <K extends keyof ThreeJsContext>(key: K) => ThreeJsContext[K];\n}\n\n/** Interface to react with three js shared context */\nexport const getThreeJsContext = (): ThreeJsContextManager => {\n  const mount = (ctx: ThreeJsContext) => {\n    if (internalContext) {\n        throw new Error('[ThreeJsContext] Cannot mount again. Unmount first.');\n    }\n    \n    internalContext = ctx;\n  };\n\n  const unmount = () => {\n    internalContext = null;\n  };\n\n  const get = <K extends keyof ThreeJsContext>(key: K) => {\n    if (!internalContext) {\n      throw new Error(`Cannot access \"${key}\" before context is mounted`);\n    }\n    return internalContext[key];\n  };\n\n  return {\n    mount: mount,\n    unmount: unmount,\n    get: get,\n  };\n};\n"]}