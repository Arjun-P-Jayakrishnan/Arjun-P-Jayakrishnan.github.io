{"version":3,"sources":["../src/engine/managers/animation/AnimationManager.ts"],"names":["createAnimationManager","map","_mountPlayer","storage","inputs","playerAnimations","PLAYER_ASSET","player","mixer","AnimationMixer","playerAnimationUnit","createAnimationUnit","playerFSM","createPlayerFSMController","id","deltaTime"],"mappings":"6JAiBaA,IAAAA,CAAAA,CAAyB,IAAwB,CAC5D,IAAMC,CAAoB,CAAA,CACxB,OAAQ,IACV,CAAA,CAEMC,CAAe,CAAA,CACnBC,IACAC,CACG,GAAA,CAGH,IAAMC,CAAAA,CACJF,IAAQ,UAAW,CAAA,OAAO,CAAE,CAAA,QAAA,CAASG,EAAa,EAAE,CAAA,EAAG,UAAc,EAAA,GACjEC,CAASJ,CAAAA,GAAAA,CACZ,UAAW,CAAA,OAAO,EAClB,QAASG,CAAAA,CAAAA,CAAa,EAAE,CAAA,EAAG,OAG9B,GAAIC,CAAAA,EAAUF,CAAiB,CAAA,MAAA,CAAS,EAAG,CACzC,IAAMG,CAAQ,CAAA,IAAIC,eAAeF,CAAM,CAAA,CAEjCG,CAAsBC,CAAAA,GAAAA,CAAmC,CAC7D,OAAS,CAAA,CACP,IAAMH,CAAAA,CAAAA,CAAM,WAAWH,CAAiB,CAAA,CAAC,CAAC,CAAA,CAC1C,KAAMG,CAAM,CAAA,UAAA,CAAWH,CAAiB,CAAA,CAAC,CAAC,CAC1C,CAAA,GAAA,CAAKG,CAAM,CAAA,UAAA,CAAWH,EAAiB,CAAC,CAAC,CAC3C,CAAA,CACA,kBAAmB,GACrB,CAAC,CACKO,CAAAA,CAAAA,CAAYC,IAA0B,CAC1C,MAAA,CAAAT,CACA,CAAA,aAAA,CAAeM,CACjB,CAAC,CAAA,CAEDA,CAAoB,CAAA,OAAA,CAAQF,CAAK,CACjCI,CAAAA,CAAAA,CAAU,KAAM,EAAA,CAEhBX,EAAI,MAAS,CAAA,CACX,aAAeS,CAAAA,CAAAA,CACf,IAAKE,CACP,EACF,CACF,CAAA,CAuBA,OAAO,CACL,KAAA,CAtBY,CACZE,CAAAA,CACAX,EACAC,CACG,GAAA,CACH,OAAQU,CAAAA,EACN,KAAK,QAAA,CACHZ,CAAaC,CAAAA,CAAAA,CAASC,CAAM,CAC5B,CAAA,MACF,QACE,MAAM,IAAI,KAAM,CAAA,CAAA,0CAAA,EAA6CU,CAAE,CAAA,CAAE,CACrE,CACF,CAAA,CAWE,MATcC,CAAAA,CAAAA,EAAsB,CAChCd,CAAI,CAAA,MAAA,GACNA,CAAI,CAAA,MAAA,CAAO,cAAc,MAAOc,CAAAA,CAAS,CACzCd,CAAAA,CAAAA,CAAI,OAAO,GAAI,CAAA,MAAA,CAAOc,EAAY,EAAG,CAAA,EAEzC,CAKA,CACF","file":"chunk-AKPYQLUG.js","sourcesContent":["import { PLAYER_ASSET } from \"config/asset_manifest\";\nimport { createPlayerFSMController } from \"plugins/fsm/player/controller\";\nimport { AnimationMixer } from \"three\";\nimport { AnimationMap, PlayerStateId } from \"types/fsm.types\";\nimport { InputManager } from \"../InputManager\";\nimport { GlobalStorageManager } from \"../storage/storageTypes\";\nimport { createAnimationUnit } from \"./AnimationUnit\";\n\nexport interface AnimationManager {\n  mount: (\n    playerId: keyof AnimationMap,\n    storage: GlobalStorageManager,\n    inputs: InputManager\n  ) => void;\n  update: (deltaTime: number) => void;\n}\n\nexport const createAnimationManager = (): AnimationManager => {\n  const map: AnimationMap = {\n    Player: null,\n  };\n\n  const _mountPlayer = (\n    storage: GlobalStorageManager,\n    inputs: InputManager\n  ) => {\n    /**Retrive Data from strorage */\n\n    const playerAnimations =\n      storage.getStorage(\"model\").retrieve(PLAYER_ASSET.id)?.animations ?? [];\n    const player = storage\n      .getStorage(\"model\")\n      .retrieve(PLAYER_ASSET.id)?.groups;\n\n    /**If both object and animations are there complete */\n    if (player && playerAnimations.length > 0) {\n      const mixer = new AnimationMixer(player);\n\n      const playerAnimationUnit = createAnimationUnit<PlayerStateId>({\n        actions: {\n          Idle: mixer.clipAction(playerAnimations[0]),\n          Walk: mixer.clipAction(playerAnimations[3]),\n          Run: mixer.clipAction(playerAnimations[1]),\n        },\n        crossfadeDuration: 0.03,\n      });\n      const playerFSM = createPlayerFSMController({\n        inputs,\n        animationUnit: playerAnimationUnit,\n      });\n\n      playerAnimationUnit.onMount(mixer);\n      playerFSM.mount();\n\n      map.Player = {\n        animationUnit: playerAnimationUnit,\n        fsm: playerFSM,\n      };\n    }\n  };\n\n  const mount = (\n    id: keyof AnimationMap,\n    storage: GlobalStorageManager,\n    inputs: InputManager\n  ) => {\n    switch (id) {\n      case \"Player\":\n        _mountPlayer(storage, inputs);\n        break;\n      default:\n        throw new Error(`Error : Cant create an animation unit for ${id}`);\n    }\n  };\n\n  const update = (deltaTime: number) => {\n    if (map.Player) {\n      map.Player.animationUnit.update(deltaTime);\n      map.Player.fsm.update(deltaTime * 0.1);\n    }\n  };\n\n  return {\n    mount,\n    update,\n  };\n};\n"]}