{"version":3,"sources":["../src/gameplay/projects/ground.ts"],"names":["createGround","props","ground","globalStorage","getGlobalContext","groups","excludeShadow","child","processPipelineDebugger"],"mappings":"+EAiBaA,IAAAA,CAAAA,CAAgBC,GAA+B,CAC1D,IAAIC,EAAyB,IACvB,CAAA,CAAE,aAAAC,CAAAA,CAAc,CAAIC,CAAAA,CAAAA,GAmC1B,OAAO,CACL,KAlCY,CAAA,IAAM,CAClB,IAAMC,EAASF,CACZ,CAAA,UAAA,CAAWF,CAAM,CAAA,SAAS,CAC1B,CAAA,QAAA,CAASA,EAAM,SAAS,CAAA,EAAG,MAG9B,CAAA,GAFAC,CAASG,CAAAA,CAAAA,EAAQ,gBAAgBJ,CAAM,CAAA,QAAQ,CAE3C,CAAA,CAACC,CAAQ,CAAA,CACX,QAAQ,KAAM,CAAA,CAAA,mCAAA,EAAsCD,CAAM,CAAA,QAAQ,CAAE,CAAA,CAAA,CACpE,MACF,CACAC,CAAAA,CAAO,QAAYA,CAAAA,CAAAA,CAAO,QAAsB,CAAA,KAAA,GAChDA,CAAO,CAAA,aAAA,CAAgB,KAEtBA,CAAO,CAAA,QAAA,CAAsB,YAAc,IAC3CA,CAAAA,CAAAA,CAAO,QAAkC,CAAA,OAAA,CAAU,CACnDA,CAAAA,CAAAA,CAAO,SAAkC,WAAc,CAAA,IAAA,CACxD,IAAMI,CAAAA,CAAgB,CAAC,KAAA,CAAO,QAAQ,CAEtCD,CAAAA,CAAAA,EAAQ,QAAUE,CAAAA,CAAAA,EAAU,CACrBD,CAAAA,CAAc,SAASC,CAAM,CAAA,IAAI,CACpCA,GAAAA,CAAAA,CAAM,UAAa,CAAA,IAAA,EAEvB,CAAC,CAEDC,CAAAA,GAAAA,CAAwB,OAAQ,CAAA,cAAc,EAChD,CAAA,CAUE,SARe,IAAM,EASrB,CAAA,UAAA,CAPiB,IAAM,GAQvB,OANc,CAAA,IAAM,EAOtB,CACF","file":"chunk-D74VNJ5K.js","sourcesContent":["import { getGlobalContext } from \"@managers/globalContext\";\nimport { Nullable } from \"@utils/types/lifecycle\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { Material, Mesh, MeshStandardMaterial, PlaneGeometry } from \"three\";\n\nexport interface GroundProps {\n  groundId: string;\n  storageId: string;\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = (props: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n  const { globalStorage } = getGlobalContext();\n\n  const mount = () => {\n    const groups = globalStorage\n      .getStorage(props.storageId)\n      .retrieve(props.storageId)?.groups;\n    ground = groups?.getObjectByName(props.groundId) as Mesh;\n\n    if (!ground) {\n      console.error(`Cant get ground mesh from the id : ${props.groundId}`);\n      return;\n    }\n    ground.material = (ground.material as Material).clone();\n    ground.receiveShadow = true;\n\n    (ground.material as Material).needsUpdate = true;\n    (ground.material as MeshStandardMaterial).opacity = 1;\n    (ground.material as MeshStandardMaterial).transparent = true;\n    const excludeShadow = [\"sky\", \"ground\"];\n\n    groups?.traverse((child) => {\n      if (!excludeShadow.includes(child.name)) {\n        child.castShadow = true;\n      }\n    });\n\n    processPipelineDebugger.onMount(\"about-ground\");\n  };\n\n  const activate = () => {};\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n"]}