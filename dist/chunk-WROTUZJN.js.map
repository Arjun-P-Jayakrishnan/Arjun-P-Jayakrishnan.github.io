{"version":3,"sources":["../src/gameplay/navigation/room.ts"],"names":["createNavigationRoom","props","globalStorage","getGlobalContext","contextManager","getThreeJsContext","components","createCameraManager","createPlayer","createGround","getControllers","room","isMounted","processPipelineDebugger","deltaTime","Euler"],"mappings":"yTAmCO,IAAMA,EAAwBC,CAAqC,EAAA,CAElE,IAAA,CAAE,aAAAC,CAAAA,CAAc,EAAIC,CAAiB,EAAA,CACvCC,CAAwCC,CAAAA,CAAAA,EAGxCC,CAAAA,CAAAA,CAAiC,CACnC,MAAQC,CAAAA,GAAAA,CAAoB,CAAE,MAAA,CAAQH,CAAe,CAAA,GAAA,CAAI,QAAQ,CAAE,CAAC,CACpE,CAAA,MAAA,CAAQI,GAAa,CAAA,CAAE,WAAYP,CAAM,CAAA,MAAA,CAAO,UAAW,CAAC,CAC5D,CAAA,MAAA,CAAQQ,IAAaR,CAAM,CAAA,MAAM,CACjC,CAAA,WAAA,CAAaS,GAAe,EAC9B,EAOIC,CAAoC,CAAA,IAAA,CACpCC,IAAqB,MAkEzB,OAAO,CACL,KAAA,CA/CY,IAAM,CACdA,KAAa,CAACN,CAAAA,GAElBO,GAAwB,CAAA,OAAA,CAAQ,iBAAiB,CAAA,CAEjDT,EAAiBC,CAAkB,EAAA,CAGnCM,CACET,CAAAA,CAAAA,CAAc,UAAWD,CAAAA,CAAAA,CAAM,SAAS,CAAE,CAAA,QAAA,CAASA,CAAM,CAAA,SAAS,CAClE,EAAA,IAAA,CAEFK,EAAW,WAAY,CAAA,KAAA,CAAM,CAAE,KAAA,CAAO,CAAE,WAAA,CAAa,GAAK,CAAE,CAAC,CAC7DA,CAAAA,CAAAA,CAAW,MAAO,CAAA,KAAA,GAClBA,CAAW,CAAA,MAAA,CAAO,KAAM,EAAA,CACxBA,CAAW,CAAA,MAAA,CAAO,OAElBM,CAAAA,GAAAA,CAAY,IACd,EAAA,CAAA,CA8BE,MA5BcE,CAAAA,CAAAA,EAAsB,CAChC,CAACF,GAAAA,EAAa,CAACN,CACnBF,GAAAA,CAAAA,CAAe,IAAI,OAAO,CAAA,CAAE,MAAO,EAAA,CACnCE,CAAW,CAAA,MAAA,CAAO,OAChBQ,CACA,CAAA,CAAE,KAAO,CAAA,CAAA,CAAG,GAAK,CAAA,CAAE,EACnB,CAAE,QAAA,CAAU,IAAIC,KAAQ,CAC1B,CAAA,EAGF,EAmBE,OAjBc,CAAA,IAAM,CAChB,CAACH,GAAa,EAAA,CAACN,IAEnBO,GAAwB,CAAA,SAAA,CAAU,iBAAiB,CAAA,CAEnDP,CAAW,CAAA,MAAA,CAAO,SAClBA,CAAAA,CAAAA,CAAW,WAAY,CAAA,OAAA,EACvBA,CAAAA,CAAAA,CAAW,OAAO,OAAQ,EAAA,CAC1BF,CAAe,CAAA,OAAA,EAEfE,CAAAA,CAAAA,CAAa,KACbK,CAAO,CAAA,IAAA,EACT,CAME,CAAA,SAAA,CApEe,IAAM,CACjB,CAACA,CAAQ,EAAA,CAACL,CACdK,GAAAA,CAAAA,CAAK,MAAO,CAAA,OAAA,CAAU,KAEtBL,CAAW,CAAA,MAAA,CAAO,QAAS,EAAA,CAC3BA,CAAW,CAAA,MAAA,CAAO,UAClBA,CAAAA,CAAAA,CAAW,MAAO,CAAA,QAAA,EACpB,EAAA,CAAA,CA8DE,YA5DiB,IAAM,CACnB,CAACK,CAAAA,EAAQ,CAACL,CAAAA,GACdK,EAAK,MAAO,CAAA,OAAA,CAAU,KAEtBL,CAAAA,CAAAA,CAAW,MAAO,CAAA,UAAA,GAClBA,CAAW,CAAA,MAAA,CAAO,UAAW,EAAA,CAC7BA,CAAW,CAAA,MAAA,CAAO,YACpB,EAAA,CAAA,CAsDE,QAAU,CAAA,KACZ,CACF","file":"chunk-WROTUZJN.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { createGround, Ground, GroundProps } from \"./ground\";\nimport { createPlayer, Player, PlayerProps } from \"./player\";\nimport {\n  ControllerManger,\n  getControllers,\n} from \"graphics/mechanics/controllers/controller\";\nimport { ObjectStorageUnit } from \"@managers/storage/storageTypes\";\nimport {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"core/game_engine/game_context\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { Nullable } from \"@utils/types/lifecycle\";\nimport { Room } from \"@utils/types/room\";\nimport { Euler } from \"three\";\n\nexport interface NavigationRoomProps {\n  storageId: string;\n  player: PlayerProps;\n  ground: GroundProps;\n}\n\ninterface Entities {\n  player: Player;\n  ground: Ground;\n  camera: CameraManager;\n  controllers: ControllerManger;\n}\n\ninterface InternalState {}\n\ninterface TempData {}\n\nexport const createNavigationRoom = (props: NavigationRoomProps): Room => {\n  //External dependencies\n  const { globalStorage } = getGlobalContext();\n  let contextManager: ThreeJsContextManager = getThreeJsContext();\n\n  //Internal\n  let components: Nullable<Entities> = {\n    camera: createCameraManager({ camera: contextManager.get(\"camera\") }),\n    player: createPlayer({ rootMeshId: props.player.rootMeshId }),\n    ground: createGround(props.ground),\n    controllers: getControllers(),\n  };\n\n  //TODO:no idea on what to add yet\n  let state: Nullable<InternalState> = null;\n  //TODO: no idea what temporary data to add yet\n  let tempData: Nullable<TempData> = null;\n\n  let room: Nullable<ObjectStorageUnit> = null;\n  let isMounted: boolean = false;\n\n  const activate = () => {\n    if (!room || !components) return;\n    room.groups.visible = true;\n\n    components.camera.activate();\n    components.ground.activate();\n    components.player.activate();\n  };\n\n  const deactivate = () => {\n    if (!room || !components) return;\n    room.groups.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.player.deactivate();\n  };\n\n  const mount = () => {\n    if (isMounted || !components) return;\n\n    processPipelineDebugger.onMount(\"Navigation Room\");\n\n    contextManager = getThreeJsContext();\n\n    //get base root i.e group so that it can be used to toggle visibility\n    room =\n      globalStorage.getStorage(props.storageId).retrieve(props.storageId) ??\n      null;\n\n    components.controllers.mount({ mouse: { sensitivity: 0.01 } });\n    components.player.mount();\n    components.ground.mount();\n    components.camera.mount();\n\n    isMounted = true;\n  };\n\n  const update = (deltaTime: number) => {\n    if (!isMounted || !components) return;\n    contextManager.get(\"orbit\").update();\n    components.player.update(\n      deltaTime,\n      { pitch: 0, yaw: 0 },\n      { rotation: new Euler() }\n    );\n\n    //entities.ground.update();\n  };\n\n  const unmount = () => {\n    if (!isMounted || !components) return;\n\n    processPipelineDebugger.onUnmount(\"Navigation Room\");\n\n    components.player.unmount();\n    components.controllers.unmount();\n    components.ground.unmount();\n    contextManager.unmount();\n\n    components = null;\n    room = null;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n    setActive: activate,\n    setDeactive: deactivate,\n    isLoaded: false,\n  };\n};\n"]}