{"version":3,"sources":["../src/gameplay/about/ground.ts"],"names":["createGround","props","ground","getThreeJsContext","globalStorage","getGlobalContext","processPipelineDebugger"],"mappings":"mHAoBO,IAAMA,EAAgBC,CAA+B,EAAA,KACtDC,CAAyB,CAAA,IAAA,CACRC,CAAkB,EAAA,KACnC,CAAC,aAAA,CAAAC,CAAa,CAAGC,CAAAA,CAAAA,GA+BrB,OAAO,CACL,MA9BY,IAAM,CAOlB,GANAH,CAAAA,CAASE,EACR,UAAWH,CAAAA,CAAAA,CAAM,SAAS,CAC1B,CAAA,QAAA,CAASA,EAAM,SAAS,CAAA,EACzB,OACC,eAAgBA,CAAAA,CAAAA,CAAM,QAAQ,CAE3B,CAAA,CAACC,EAAQ,CACX,OAAA,CAAQ,MACN,CAAsCD,mCAAAA,EAAAA,CAAAA,CAAM,QAAQ,CAAA,CACtD,EACA,MACF,CACAC,EAAO,QAAUA,CAAAA,CAAAA,CAAO,SAAsB,KAAM,EAAA,CACpDA,CAAO,CAAA,aAAA,CAAc,KAEpBA,CAAO,CAAA,QAAA,CAAsB,YAAY,IACzCA,CAAAA,CAAAA,CAAO,SAAkC,OAAQ,CAAA,GAAA,CACjDA,CAAO,CAAA,QAAA,CAAkC,YAAY,IAEtDI,CAAAA,GAAAA,CAAwB,QAAQ,cAAc,EAChD,EAUE,QARa,CAAA,IAAI,EASjB,CAAA,UAAA,CAPe,IAAI,EAAC,CAQpB,QANc,IAAM,EAOtB,CACF","file":"chunk-OWW322C4.js","sourcesContent":["\nimport { getGlobalContext } from \"@managers/globalContext\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { Nullable } from \"core/lifecyle\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { createGridMaterial, GridMaterial } from \"graphics/materials/grid/grid-material\";\nimport { Material, Mesh, MeshStandardMaterial, PlaneGeometry } from \"three\";\n\nexport interface GroundProps {\n  groundId: string;\n  storageId:string;\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte:()=>void;\n  deactivate:()=>void;\n  unmount: () => void;\n}\n\nexport const createGround = (props: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n  let contextManager = getThreeJsContext();\n  let {globalStorage} =getGlobalContext();\n\n  const mount = () => {\n    ground = globalStorage\n    .getStorage(props.storageId)\n    .retrieve(props.storageId)?.\n    groups\n    .getObjectByName(props.groundId) as Mesh;\n\n    if (!ground) {\n      console.error(\n        `Cant get ground mesh from the id : ${props.groundId}`\n      );\n      return;\n    } \n    ground.material=(ground.material as Material).clone();\n    ground.receiveShadow=true;\n    \n    (ground.material as Material).needsUpdate=true;\n    (ground.material as MeshStandardMaterial).opacity=0.15;\n    (ground.material as MeshStandardMaterial).transparent=true;\n    \n    processPipelineDebugger.onMount('about-ground')\n  };\n\n  const activate=()=>{}\n\n  const deactivate=()=>{}\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte:activate,\n    deactivate:deactivate,\n    unmount: unmount,\n  };\n};\n"]}