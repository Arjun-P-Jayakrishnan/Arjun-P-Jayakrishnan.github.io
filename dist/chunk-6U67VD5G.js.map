{"version":3,"sources":["../src/engine/core/Engine.ts"],"names":["createEngine","serviceRegistry","getServiceRegistry","logger","lifecycleScheduler","storage","input","domManager","renderManager","onInit","createDomManager","createRenderManager","onLoad","queueStep","onMount","onUpdate","onUnmount","onDispose","toggleButton","portfolio2D","portfolio3D"],"mappings":"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","file":"chunk-6U67VD5G.js","sourcesContent":["import { queueStep } from \"@utils/dsl\";\nimport { createDomManager, DOMManager } from \"engine/managers/DOMManger\";\nimport {\n  createRenderManager,\n  RenderManager,\n} from \"engine/managers/RenderManager\";\nimport { ServiceRegistry } from \"types/service.types\";\nimport { getServiceRegistry } from \"./ServiceRegistry\";\n\ninterface Engine {\n  run: () => void;\n}\n/**\n * @description Orchestration Layer that acts as a link to native\n * browser events for performing updates\n * @returns {Engine}\n */\nconst createEngine = (): Engine => {\n  const serviceRegistry: ServiceRegistry = getServiceRegistry();\n  const [logger, lifecycleScheduler, storage, input] = [\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"LifecycleScheduler\"),\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"InputManager\"),\n  ];\n\n  let domManager: DOMManager;\n  let renderManager: RenderManager;\n\n  const onInit = () => {\n    console.log(\"Engine initialized\");\n    domManager = createDomManager();\n    renderManager = createRenderManager();\n\n    lifecycleScheduler.schedule(storage.inflate);\n    lifecycleScheduler.schedule(input.onInit);\n    lifecycleScheduler.schedule(domManager.onInit);\n    lifecycleScheduler.schedule(renderManager.onInit);\n  };\n\n  const onLoad = () => {\n    lifecycleScheduler.schedule(domManager.onLoad);\n    lifecycleScheduler.schedule(renderManager.onLoad);\n    lifecycleScheduler.schedule(queueStep(logger.onLoad, { origin: \"Engine\" }));\n  };\n\n  const onMount = () => {\n    logger.onMount({ origin: \"Engine\" });\n\n    lifecycleScheduler.schedule(domManager.onMount);\n    lifecycleScheduler.schedule(renderManager.onMount);\n  };\n\n  const onUpdate = () => {\n    domManager.onUpdate();\n    lifecycleScheduler.schedule(renderManager.onUpdate);\n  };\n\n  const onUnmount = () => {\n    logger.onUnmount({ origin: \"Engine\" });\n    lifecycleScheduler.schedule(domManager.onUnmount);\n    lifecycleScheduler.schedule(renderManager.onUnmount);\n    lifecycleScheduler.schedule(input.onUnmount);\n  };\n\n  const onDispose = () => {\n    logger.onDestroy({ origin: \"Engine\" });\n    lifecycleScheduler.schedule(domManager.onDestroy);\n    lifecycleScheduler.schedule(renderManager.onDestroy);\n  };\n\n  const run = () => {\n    //onLoad essentials before mounting\n    onInit();\n\n    //after dom loaded mount\n    document.addEventListener(\"DOMContentLoaded\", () => {\n      onLoad();\n    });\n\n    //after resources are achieved\n    window.addEventListener(\"load\", () => {});\n\n    const toggleButton = document.getElementById(\n      \"toggle3D\"\n    ) as HTMLButtonElement;\n\n    const portfolio2D = document.getElementById(\"portfolio-2d\");\n    const portfolio3D = document.getElementById(\"portfolio-3d\");\n\n    if (toggleButton && portfolio2D && portfolio3D) {\n      toggleButton.addEventListener(\n        \"click\",\n        () => {\n          portfolio2D.style.display = \"none\";\n          portfolio3D.style.display = \"block\";\n\n          onMount();\n          onUpdate();\n        },\n        { once: true }\n      );\n    }\n\n    //unmount and dispose\n    window.addEventListener(\"beforeunload\", () => {\n      onUnmount();\n    });\n\n    //Deprecated\n    // window.addEventListener(\"unload\", () => {\n    //   onDispose();\n    // });\n\n    lifecycleScheduler.run();\n  };\n\n  return {\n    run: run,\n  };\n};\n\nexport { createEngine };\nexport type { Engine };\n"]}