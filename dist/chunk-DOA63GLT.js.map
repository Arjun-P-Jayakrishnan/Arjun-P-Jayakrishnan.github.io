{"version":3,"sources":["../src/graphics/loader/file_type_plugins/mesh_loader.ts"],"sourcesContent":["import { createEventBus } from \"@utils/event_management/eventBus\";\nimport type { LoadingEvents } from \"@utils/event_management/eventType\";\nimport { getGlobalContext } from \"@utils/globalContext\";\nimport { Scene } from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport type { LoadingManager } from \"three/src/loaders/LoadingManager.js\";\nimport type { AssetMetaData, LoaderPlugin } from \"../loaderPlugins\";\n\nexport interface MeshLoaderProps {\n  assets: AssetMetaData[];\n  scene: Scene;\n  loadingManager: LoadingManager;\n  loadingEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n}\n\nexport const createMeshLoader = (props: MeshLoaderProps): LoaderPlugin => {\n  const { assets, scene, loadingManager, loadingEventBus } = props;\n  const { globalStorage } = getGlobalContext();\n\n  const gltfLoader: GLTFLoader = new GLTFLoader(loadingManager);\n  const dracoLoader = new DRACOLoader();\n  dracoLoader.setDecoderPath(\"/public/draco/\");\n  gltfLoader.setDRACOLoader(dracoLoader);\n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: AssetMetaData) => {\n    try {\n      const model = await gltfLoader.loadAsync(metaData.path);\n\n      scene.add(model.scene);\n      model.scene.position.set(0, 0, 0);\n      metaData.onSuccess?.();\n\n      globalStorage\n        .getStorage(\"animations\")\n        .store(metaData.name + \":animations\", model.animations);\n      globalStorage\n        .getStorage(\"groups\")\n        .store(metaData.name + \":groups\", model.scene);\n      console.log(\"loading mesh\", metaData.name);\n    } catch (err) {\n      metaData.onError?.(err as Error);\n      loadingEventBus.emit({ type: \"load:error\", url: metaData.path });\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const load = async () => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  const dispose = () => {};\n\n  return {\n    load: load,\n    dispose: dispose,\n  };\n};\n"],"mappings":"wCAIA,OAAS,eAAAA,MAAmB,4CAC5B,OAAS,cAAAC,MAAkB,2CAWpB,IAAMC,EAAoBC,GAAyC,CACxE,GAAM,CAAE,OAAAC,EAAQ,MAAAC,EAAO,eAAAC,EAAgB,gBAAAC,CAAgB,EAAIJ,EACrD,CAAE,cAAAK,CAAc,EAAIC,EAAiB,EAErCC,EAAyB,IAAIT,EAAWK,CAAc,EACtDK,EAAc,IAAIX,EACxBW,EAAY,eAAe,gBAAgB,EAC3CD,EAAW,eAAeC,CAAW,EAMrC,IAAMC,EAAY,MAAOC,GAA4B,CACnD,GAAI,CACF,IAAMC,EAAQ,MAAMJ,EAAW,UAAUG,EAAS,IAAI,EAEtDR,EAAM,IAAIS,EAAM,KAAK,EACrBA,EAAM,MAAM,SAAS,IAAI,EAAG,EAAG,CAAC,EAChCD,EAAS,YAAY,EAErBL,EACG,WAAW,YAAY,EACvB,MAAMK,EAAS,KAAO,cAAeC,EAAM,UAAU,EACxDN,EACG,WAAW,QAAQ,EACnB,MAAMK,EAAS,KAAO,UAAWC,EAAM,KAAK,EAC/C,QAAQ,IAAI,eAAgBD,EAAS,IAAI,CAC3C,OAASE,EAAK,CACZ,MAAAF,EAAS,UAAUE,CAAY,EAC/BR,EAAgB,KAAK,CAAE,KAAM,aAAc,IAAKM,EAAS,IAAK,CAAC,EAC/D,QAAQ,MAAME,CAAG,EACXA,CACR,CACF,EAaA,MAAO,CACL,KAZW,SAAY,CACvB,IAAMC,EAA4B,CAAC,EACnCZ,EAAO,QAASa,GAAU,CACxBD,EAAS,KAAKJ,EAAUK,CAAK,CAAC,CAChC,CAAC,EAED,MAAM,QAAQ,WAAWD,CAAQ,CACnC,EAME,QAJc,IAAM,CAAC,CAKvB,CACF","names":["DRACOLoader","GLTFLoader","createMeshLoader","props","assets","scene","loadingManager","loadingEventBus","globalStorage","getGlobalContext","gltfLoader","dracoLoader","_loadMesh","metaData","model","err","promises","asset"]}