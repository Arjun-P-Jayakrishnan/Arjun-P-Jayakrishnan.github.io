import {LoadingManager,PMREMGenerator}from'three';import {FBXLoader}from'three/examples/jsm/loaders/FBXLoader.js';import {DRACOLoader}from'three/examples/jsm/loaders/DRACOLoader.js';import {GLTFLoader}from'three/examples/jsm/loaders/GLTFLoader.js';import {RGBELoader}from'three/examples/jsm/loaders/RGBELoader.js';var M=({loadingManager:c,scene:p,storageManager:n})=>{let d=new FBXLoader(c),i=async l=>{try{let r=await d.loadAsync(l.path);n.getStorage("model").store(l.id,{animations:r.animations,groups:r}),p.add(r);}catch(r){throw new Error(`Error while loading fbx file : ${r}`)}};return {load:async l=>{let r=[];l.forEach(e=>{r.push(i(e));}),await Promise.allSettled(r);}}};var b=({scene:c,loadingManager:p,storageManager:n})=>{let d=new GLTFLoader(p),i=new DRACOLoader;i.setDecoderPath("/public/draco/"),d.setDRACOLoader(i);let t=async r=>{try{let e=await d.loadAsync(r.path);n.getStorage("model").store(r.id,{animations:e.animations,groups:e.scene}),c.add(e.scene);}catch(e){throw new Error(`Errr occuerd while loading a glb file : ${e}`)}};return {load:async r=>{let e=[];r.forEach(g=>{e.push(t(g));}),await Promise.allSettled(e);}}};var h=({loadingManager:c,renderer:p,scene:n})=>{let d=new PMREMGenerator(p),i=new RGBELoader(c),t=async e=>new Promise((g,a)=>{console.log("path",e.path),i.load(e.path,(m,u)=>{let f=d.fromEquirectangular(m).texture;m.dispose(),n.environment=f,a();},void 0,m=>{g();});}),l=async e=>{let g=[];e.forEach(async a=>{g.push(t(a));}),await Promise.allSettled(g);};return {load:l}};var J=({scene:c,renderer:p,loaderEventBus:n,stateManager:d,storageManager:i})=>{let t=new LoadingManager,l=false,[r,e,g]=[b({scene:c,loadingManager:t,storageManager:i}),M({scene:c,loadingManager:t,storageManager:i}),h({scene:c,loadingManager:t,renderer:p})],a={glb:[],fbx:[],hdr:[]},m=()=>{t.onStart=(o,s,L)=>{n.emit({type:"load:start",url:o,loaded:s,total:L}),d.loading.setState({loading:{active:true,progress:0}});},t.onProgress=(o,s,L)=>{n.emit({type:"load:progress",url:o,loaded:s,total:L}),d.loading.setState({loading:{active:true,progress:s/L}});},t.onLoad=()=>{n.emit({type:"load:complete"});},t.onError=o=>{n.emit({type:"load:error",url:o});},l=true;},u=o=>{switch(o.type){case "glb":a.glb.push(o);break;case "fbx":a.fbx.push(o);break;case "hdr":a.hdr.push(o);break;}},f=o=>{o.forEach(s=>{u(s);});};return {configure:()=>{m();},load:async o=>{if(!l)throw new Error("Error: Trying to load from loader before configuring it");let s=[];return f(o),s.push(r.load(a.glb)),s.push(e.load(a.fbx)),s.push(g.load(a.hdr)),await Promise.allSettled(s),a.fbx=[],a.glb=[],a.hdr=[],{success:[],error:[]}},dispose:()=>{}}};export{J as createLoader};//# sourceMappingURL=LoadingManager.js.map
//# sourceMappingURL=LoadingManager.js.map