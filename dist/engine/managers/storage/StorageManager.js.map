{"version":3,"sources":["../../../../src/plugins/backend/InMemoryBackend.ts","../../../../src/engine/managers/storage/genericStorageUnit.ts","../../../../src/engine/managers/storage/StorageManager.ts"],"names":["createInMemoryBackend","map","key","payload","selectBackend","createStorageUnit","backend","id","createGlobalStorageManager","storage","keys","createStorageForType","unit"],"mappings":"AAEO,IAAMA,CAAAA,CAAwB,IAA4B,CAC/D,IAAMC,EAAM,IAAI,GAAA,CAsBhB,OAAO,CACL,GAAA,CArB+BC,GACxBD,CAAI,CAAA,GAAA,CAAIC,CAAG,CAqBlB,CAAA,GAAA,CAlBW,CAAoBA,CAAQC,CAAAA,CAAAA,GAAwB,CAC/DF,CAAI,CAAA,GAAA,CAAIC,EAAKC,CAAO,EACtB,EAiBE,KAfa,CAAA,IAAY,CACzBF,CAAI,CAAA,KAAA,GACN,CAcE,CAAA,MAAA,CAZkCC,GAAiB,CACnDD,CAAAA,CAAI,OAAOC,CAAG,EAChB,EAWE,IATY,CAAA,IACLD,EAAI,IAAK,EASlB,CACF,CC5BA,CAAA,IAAMG,EAAoBF,CACRF,EAAAA,CAAAA,GAOLK,CAAoB,CAAA,IAAgC,CAE/D,IAAMC,CAAAA,CAAUF,EAA2B,CAAA,CA8B3C,OAAO,CACL,KAAA,CA7BY,CAAoBG,CAAOJ,CAAAA,CAAAA,GAAwB,CAC/DG,CAAQ,CAAA,GAAA,CAAIC,EAAIJ,CAAO,EACzB,EA4BE,QA1BmCI,CAAAA,CAAAA,EAC5BD,EAAQ,GAAIC,CAAAA,CAAE,EA0BrB,KAXY,CAAA,IAAY,CACxBD,CAAQ,CAAA,KAAA,GACV,CAUE,CAAA,MAAA,CAxBoCC,GAAgB,CACpDD,CAAAA,CAAQ,OAAOC,CAAE,EACnB,EAuBE,GArB8BA,CAAAA,CAAAA,EACzB,CAAAD,CAAQ,CAAA,GAAA,CAAIC,CAAE,CAqBnB,CAAA,IAAA,CAVW,IACJD,CAAQ,CAAA,IAAA,CAAK,MAUtB,CACF,CAAA,KC3CaE,CAA6B,CAAA,IAA4B,CACpE,IAAIC,CAAAA,CAEC,EAECC,CAAAA,CAAAA,CAAqB,CAAC,OAAS,CAAA,MAAM,EAErCC,CAAwBT,CAAAA,CAAAA,EAAoB,CAChD,OAAQA,CAAAA,EACN,KAAK,OAAA,CACHO,EAAQP,CAAG,CAAA,CAAIG,GACf,CAAA,MACF,KAAK,MACHI,CAAAA,CAAAA,CAAQP,CAAG,CAAIG,CAAAA,CAAAA,GACf,KACJ,CACF,EAwBA,OAAO,CACL,QAvBc,IAAM,CACpBK,EAAK,OAA+BR,CAAAA,CAAAA,EAAW,CAC7CS,CAAqBT,CAAAA,CAAG,EAC1B,CAAC,EACH,EAoBE,KAlBY,CAAA,IAAM,CAClB,MAAO,CAAA,MAAA,CAAOO,CAAO,CAAE,CAAA,OAAA,CAASG,GAAS,CACvCA,CAAAA,CAAK,QACP,CAAC,EACH,CAeE,CAAA,UAAA,CAZAV,IAEKO,CAAQP,CAAAA,CAAG,GACdS,CAAqBT,CAAAA,CAAG,EAGnBO,CAAQP,CAAAA,CAAG,EAOpB,CACF","file":"StorageManager.js","sourcesContent":["import { StorageBackend } from \"types/plugin.types\";\n\nexport const createInMemoryBackend = <T>(): StorageBackend<T> => {\n  const map = new Map<keyof T, T[keyof T]>();\n\n  const _get = <K extends keyof T>(key: K): T[K] | undefined => {\n    return map.get(key) as T[K] | undefined;\n  };\n\n  const _set = <K extends keyof T>(key: K, payload: T[K]): void => {\n    map.set(key, payload);\n  };\n\n  const _clear = (): void => {\n    map.clear();\n  };\n\n  const _delete = <K extends keyof T>(key: K): void => {\n    map.delete(key);\n  };\n\n  const _keys = (): IterableIterator<keyof T> => {\n    return map.keys();\n  };\n\n  return {\n    get: _get,\n    set: _set,\n    clear: _clear,\n    delete: _delete,\n    keys: _keys,\n  };\n};\n","import { StorageBackend } from \"types/plugin.types\";\nimport { createInMemoryBackend } from \"../../../plugins/backend/InMemoryBackend\";\nimport { BackendTypes, GenericStorageUnit } from \"./storageTypes\";\n\nconst selectBackend = <T>(key: BackendTypes): StorageBackend<T> => {\n  const backend = createInMemoryBackend<T>();\n\n  return backend;\n};\n\n//T is the storage structure of object\n//player {animations:Type,model:type etc}\nexport const createStorageUnit = <T>(): GenericStorageUnit<T> => {\n  /** string mapped  */\n  const backend = selectBackend<T>(\"InMemory\");\n\n  const store = <K extends keyof T>(id: K, payload: T[K]): void => {\n    backend.set(id, payload);\n  };\n\n  const retrieve = <K extends keyof T>(id: K): T[K] | undefined => {\n    return backend.get(id) as T[K] | undefined;\n  };\n\n  const deleteKey = <K extends keyof T>(id: K): void => {\n    backend.delete(id);\n  };\n\n  const has = <K extends keyof T>(id: K): boolean => {\n    if (!backend.get(id)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const clear = (): void => {\n    backend.clear();\n  };\n\n  const size = (): number => {\n    return backend.keys.length;\n  };\n\n  return {\n    store: store,\n    retrieve: retrieve,\n    clear: clear,\n    delete: deleteKey,\n    has: has,\n    size: size,\n  };\n};\n","import {\n  JSONStorageUnit,\n  ObjectStorageUnit,\n  StorageKey,\n  StorageMap,\n} from \"types/managers.types\";\nimport { createStorageUnit } from \"./genericStorageUnit\";\nimport { GenericStorageUnit, GlobalStorageManager } from \"./storageTypes\";\n\nexport const createGlobalStorageManager = (): GlobalStorageManager => {\n  let storage: Partial<{\n    [K in StorageKey]: GenericStorageUnit<StorageMap[K]>;\n  }> = {};\n\n  const keys: StorageKey[] = [\"model\", \"json\"];\n\n  const createStorageForType = (key: StorageKey) => {\n    switch (key) {\n      case \"model\":\n        storage[key] = createStorageUnit<Record<string, ObjectStorageUnit>>();\n        break;\n      case \"json\":\n        storage[key] = createStorageUnit<Record<string, JSONStorageUnit>>();\n        break;\n    }\n  };\n\n  const inflate = () => {\n    keys.forEach(<K extends StorageKey>(key: K) => {\n      createStorageForType(key);\n    });\n  };\n\n  const clear = () => {\n    Object.values(storage).forEach((unit) => {\n      unit.clear();\n    });\n  };\n\n  const getStorage = <K extends StorageKey>(\n    key: K\n  ): GenericStorageUnit<StorageMap[K]> => {\n    if (!storage[key]) {\n      createStorageForType(key);\n    }\n\n    return storage[key]!;\n  };\n\n  return {\n    inflate: inflate,\n    clear: clear,\n    getStorage: getStorage,\n  };\n};\n"]}