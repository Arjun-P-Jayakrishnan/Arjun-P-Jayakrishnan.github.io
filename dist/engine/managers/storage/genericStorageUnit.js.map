{"version":3,"sources":["../../../../src/plugins/backend/InMemoryBackend.ts","../../../../src/engine/managers/storage/genericStorageUnit.ts"],"names":["createInMemoryBackend","map","key","payload","selectBackend","createStorageUnit","backend","id"],"mappings":"AAEO,IAAMA,CAAAA,CAAwB,IAA4B,CAC/D,IAAMC,EAAM,IAAI,GAAA,CAsBhB,OAAO,CACL,GArB+BC,CAAAA,CAAAA,EACxBD,EAAI,GAAIC,CAAAA,CAAG,CAqBlB,CAAA,GAAA,CAlBW,CAAoBA,CAAAA,CAAQC,IAAwB,CAC/DF,CAAAA,CAAI,GAAIC,CAAAA,CAAAA,CAAKC,CAAO,EACtB,EAiBE,KAfa,CAAA,IAAY,CACzBF,CAAAA,CAAI,KAAM,GACZ,EAcE,MAZkCC,CAAAA,CAAAA,EAAiB,CACnDD,CAAAA,CAAI,MAAOC,CAAAA,CAAG,EAChB,CAWE,CAAA,IAAA,CATY,IACLD,CAAAA,CAAI,IAAK,EASlB,CACF,CC5BA,CAAA,IAAMG,CAAoBF,CAAAA,CAAAA,EACRF,CAAyB,EAAA,CAO9BK,EAAoB,IAAgC,CAE/D,IAAMC,CAAAA,CAAUF,CAAiB,CAAU,EA8B3C,OAAO,CACL,KA7BY,CAAA,CAAoBG,CAAOJ,CAAAA,CAAAA,GAAwB,CAC/DG,CAAQ,CAAA,GAAA,CAAIC,CAAIJ,CAAAA,CAAO,EACzB,CAAA,CA4BE,SA1BmCI,CAC5BD,EAAAA,CAAAA,CAAQ,GAAIC,CAAAA,CAAE,CA0BrB,CAAA,KAAA,CAXY,IAAY,CACxBD,CAAAA,CAAQ,KAAM,GAChB,CAUE,CAAA,MAAA,CAxBoCC,GAAgB,CACpDD,CAAAA,CAAQ,MAAOC,CAAAA,CAAE,EACnB,CAAA,CAuBE,IArB8BA,CACzB,EAAA,CAAAD,CAAQ,CAAA,GAAA,CAAIC,CAAE,CAAA,CAqBnB,KAVW,IACJD,CAAAA,CAAQ,IAAK,CAAA,MAUtB,CACF","file":"genericStorageUnit.js","sourcesContent":["import { StorageBackend } from \"types/plugin.types\";\n\nexport const createInMemoryBackend = <T>(): StorageBackend<T> => {\n  const map = new Map<keyof T, T[keyof T]>();\n\n  const _get = <K extends keyof T>(key: K): T[K] | undefined => {\n    return map.get(key) as T[K] | undefined;\n  };\n\n  const _set = <K extends keyof T>(key: K, payload: T[K]): void => {\n    map.set(key, payload);\n  };\n\n  const _clear = (): void => {\n    map.clear();\n  };\n\n  const _delete = <K extends keyof T>(key: K): void => {\n    map.delete(key);\n  };\n\n  const _keys = (): IterableIterator<keyof T> => {\n    return map.keys();\n  };\n\n  return {\n    get: _get,\n    set: _set,\n    clear: _clear,\n    delete: _delete,\n    keys: _keys,\n  };\n};\n","import { StorageBackend } from \"types/plugin.types\";\nimport { createInMemoryBackend } from \"../../../plugins/backend/InMemoryBackend\";\nimport { BackendTypes, GenericStorageUnit } from \"./storageTypes\";\n\nconst selectBackend = <T>(key: BackendTypes): StorageBackend<T> => {\n  const backend = createInMemoryBackend<T>();\n\n  return backend;\n};\n\n//T is the storage structure of object\n//player {animations:Type,model:type etc}\nexport const createStorageUnit = <T>(): GenericStorageUnit<T> => {\n  /** string mapped  */\n  const backend = selectBackend<T>(\"InMemory\");\n\n  const store = <K extends keyof T>(id: K, payload: T[K]): void => {\n    backend.set(id, payload);\n  };\n\n  const retrieve = <K extends keyof T>(id: K): T[K] | undefined => {\n    return backend.get(id) as T[K] | undefined;\n  };\n\n  const deleteKey = <K extends keyof T>(id: K): void => {\n    backend.delete(id);\n  };\n\n  const has = <K extends keyof T>(id: K): boolean => {\n    if (!backend.get(id)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const clear = (): void => {\n    backend.clear();\n  };\n\n  const size = (): number => {\n    return backend.keys.length;\n  };\n\n  return {\n    store: store,\n    retrieve: retrieve,\n    clear: clear,\n    delete: deleteKey,\n    has: has,\n    size: size,\n  };\n};\n"]}