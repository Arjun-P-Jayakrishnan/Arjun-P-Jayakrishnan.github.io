{"version":3,"sources":["../../../src/plugins/input/keyboard.ts","../../../src/config/constants.ts","../../../src/plugins/input/mouse.ts","../../../src/engine/managers/InputManager.ts"],"names":["createKeyboardController","pressedKeys","normalizedKey","key","_handleKeyUp","_handleKeyDown","MOUSE_CONFIG","createMouseController","sensitivityPitch","state","handleMouse","e","sideways","up_down","sensitivityYaw","inputs","createInputManager"],"mappings":"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","file":"InputManager.js","sourcesContent":["import { InputPlugin } from \"types/plugin.types\";\n\nexport interface KeyboardInput extends InputPlugin {\n  getPressedKeys: () => string[];\n  isKeyPressed: (key: string) => boolean;\n}\n\nexport const createKeyboardController = (): KeyboardInput => {\n  const pressedKeys = new Set<string>();\n\n  const normalizedKey = (key: string) => key.toLowerCase();\n\n  const _handleKeyUp = (e: KeyboardEvent) => {\n    pressedKeys.delete(normalizedKey(e.key));\n  };\n\n  const _handleKeyDown = (e: KeyboardEvent) => {\n    pressedKeys.add(normalizedKey(e.key));\n  };\n\n  const mountEvents = () => {\n    window.addEventListener(\"keyup\", _handleKeyUp);\n    window.addEventListener(\"keydown\", _handleKeyDown);\n  };\n\n  const unmountEvents = () => {\n    window.removeEventListener(\"keyup\", _handleKeyUp);\n    window.removeEventListener(\"keydown\", _handleKeyDown);\n    pressedKeys.clear();\n  };\n\n  const getPressedKeys = (): string[] => {\n    return Array.from(pressedKeys);\n  };\n\n  const isKeyPressed = (key: string) => {\n    return pressedKeys.has(normalizedKey(key));\n  };\n\n  return {\n    onMount: mountEvents,\n    onUnmount: unmountEvents,\n    getPressedKeys: getPressedKeys,\n    isKeyPressed: isKeyPressed,\n  };\n};\n","const MAX_TASKS_PER_FRAME = 5;\nconst MAX_FRAME_BUCKET_TIME = 20; //ms\n\nconst DEFAULT_CAMERA_OPTIONS = {\n  fov: 75,\n  aspectRatio: window.innerWidth / window.innerHeight,\n  near: 0.1,\n  far: 1000,\n} as const;\n\nconst CANVAS_ID = \"game-engine\";\n\nconst MOUSE_CONFIG = {\n  SENSITIVITY: { sensitivityYaw: 0.003, sensitivityPitch: 0.001 },\n};\n\nexport {\n  CANVAS_ID,\n  DEFAULT_CAMERA_OPTIONS,\n  MAX_FRAME_BUCKET_TIME,\n  MAX_TASKS_PER_FRAME,\n  MOUSE_CONFIG,\n};\n","import { MOUSE_CONFIG } from \"config/constants\";\nimport { InputPlugin } from \"types/plugin.types\";\n\ninterface MouseInput extends InputPlugin {\n  /**Gets the delta Rotation */\n  getRotation: () => { pitch: number; yaw: number };\n}\n\ninterface State {\n  mouse: {\n    lastX: number;\n    lastY: number;\n  };\n\n  rotation: {\n    pitch: number;\n    yaw: number;\n  };\n}\n\nexport const createMouseController = (): MouseInput => {\n  const { sensitivityYaw, sensitivityPitch } = MOUSE_CONFIG.SENSITIVITY;\n\n  let state: State = {\n    mouse: {\n      lastX: 0,\n      lastY: 0,\n    },\n    rotation: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n\n  const handleMouse = (e: MouseEvent) => {\n    state.rotation.pitch += e.movementY;\n    state.rotation.yaw += e.movementX;\n  };\n\n  const mountEvents = () => {\n    document.addEventListener(\"mousemove\", handleMouse);\n  };\n\n  const unmountEvents = () => {\n    document.removeEventListener(\"mousemove\", handleMouse);\n  };\n\n  const getRotation = () => {\n    const sideways = state.rotation.yaw;\n    const up_down = state.rotation.pitch;\n\n    state.rotation.pitch = 0;\n    state.rotation.yaw = 0;\n\n    return {\n      yaw: -sensitivityYaw * sideways,\n      pitch: sensitivityPitch * up_down,\n    };\n  };\n\n  return {\n    onMount: mountEvents,\n    onUnmount: unmountEvents,\n    getRotation: getRotation,\n  };\n};\n\nexport type { MouseInput };\n","import {\n  createKeyboardController,\n  KeyboardInput,\n} from \"plugins/input/keyboard\";\nimport { createMouseController, MouseInput } from \"../../plugins/input/mouse\";\n\ninterface Inputs {\n  mouse: MouseInput;\n  keyboard: KeyboardInput;\n}\n\nexport interface InputManager {\n  onInit: () => void;\n  onUnmount: () => void;\n  getController: <K extends keyof Inputs>(key: K) => Inputs[K] | null;\n}\n\nlet inputs: Inputs | null = null;\n\nexport const createInputManager = (): InputManager => {\n  /**\n   *\n   */\n  const mount = () => {\n    if (!inputs) {\n      inputs = {\n        mouse: createMouseController(),\n        keyboard: createKeyboardController(),\n      };\n\n      inputs.mouse.onMount();\n      inputs.keyboard.onMount();\n    }\n  };\n\n  /**\n   *\n   */\n  const unmount = () => {\n    if (!inputs) return;\n\n    inputs.mouse.onUnmount();\n    inputs.keyboard.onUnmount();\n  };\n\n  /**\n   *\n   * @param key which plugin are you looking for\n   * @returns the controller if it exists\n   */\n  const getController = <K extends keyof Inputs>(key: K): Inputs[K] | null => {\n    return inputs ? inputs[key] : null;\n  };\n\n  return {\n    onInit: mount,\n    getController: getController,\n    onUnmount: unmount,\n  };\n};\n"]}