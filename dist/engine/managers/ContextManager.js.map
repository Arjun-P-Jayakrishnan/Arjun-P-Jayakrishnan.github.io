{"version":3,"sources":["../../../src/engine/managers/ContextManager.ts"],"names":["createThreeJsContextManager","internalContext","key","context"],"mappings":"AA2BO,IAAMA,CAA8B,CAAA,IAA6B,CACtE,IAAIC,EAAkC,CACpC,MAAA,CAAQ,MACR,CAAA,KAAA,CAAO,MACP,CAAA,QAAA,CAAU,MACV,CAAA,KAAA,CAAO,MACT,CA8BA,CAAA,OAAO,CACL,GAAA,CA7B2CC,CAA8B,EAAA,CACzE,GAAI,CAACD,EAAgBC,CAAG,CAAA,CACtB,MAAM,IAAI,MAAM,oDAAoD,CAAA,CAEtE,OAAOD,CAAAA,CAAgBC,CAAG,CAC5B,CAAA,CAyBE,GAvBU,CAAA,CACVA,CACAC,CAAAA,CAAAA,GACS,CACT,GAAIF,EAAgBC,CAAG,CAAA,GAAM,MAC3B,CAAA,MAAM,IAAI,KAAA,CACR,yDACF,CAAA,CAEFD,EAAgBC,CAAG,CAAA,CAAIC,EACzB,CAAA,CAcE,KAZY,CAAA,IAAM,CAClBF,CAAAA,CAAkB,CAChB,MAAQ,CAAA,MAAA,CACR,KAAO,CAAA,MAAA,CACP,SAAU,MACV,CAAA,KAAA,CAAO,MACT,EACF,CAMA,CACF","file":"ContextManager.js","sourcesContent":["import { PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport interface ThreeJsContext {\n  scene: Scene | undefined;\n  renderer: WebGLRenderer | undefined;\n  camera: PerspectiveCamera | undefined;\n  orbit: OrbitControls | undefined;\n}\n\nexport interface ThreeJsContextManager {\n  /** Injects three js context */\n  set: <K extends keyof ThreeJsContext>(\n    key: K,\n    context: ThreeJsContext[K]\n  ) => void;\n\n  /**Safely access a property from context */\n  get: <K extends keyof ThreeJsContext>(\n    key: K\n  ) => ThreeJsContext[K] | undefined;\n\n  /** reset context to allow re-initailization */\n  clear: () => void;\n}\n\n/** Interface to react with three js shared context */\nexport const createThreeJsContextManager = (): ThreeJsContextManager => {\n  let internalContext: ThreeJsContext = {\n    camera: undefined,\n    orbit: undefined,\n    renderer: undefined,\n    scene: undefined,\n  };\n\n  const get = <K extends keyof ThreeJsContext>(key: K): ThreeJsContext[K] => {\n    if (!internalContext[key])\n      throw new Error(`Error : Accessing context when its not initialized`);\n\n    return internalContext[key];\n  };\n\n  const set = <K extends keyof ThreeJsContext>(\n    key: K,\n    context: ThreeJsContext[K]\n  ): void => {\n    if (internalContext[key] !== undefined)\n      throw new Error(\n        `Error : Trying to overwrite already initialized context`\n      );\n\n    internalContext[key] = context;\n  };\n\n  const clear = () => {\n    internalContext = {\n      camera: undefined,\n      orbit: undefined,\n      renderer: undefined,\n      scene: undefined,\n    };\n  };\n\n  return {\n    get: get,\n    set: set,\n    clear: clear,\n  };\n};\n"]}