{"version":3,"sources":["../src/plugins/loader/glb_loader.ts"],"names":["createGLBLoader","scene","loadingManager","storageManager","gltfLoader","GLTFLoader","dracoLoader","DRACOLoader","_loadMesh","metaData","model","err","assets","promises","asset"],"mappings":"sIAaO,IAAMA,CAAkB,CAAA,CAAC,CAC9B,KAAA,CAAAC,EACA,cAAAC,CAAAA,CAAAA,CACA,cAAAC,CAAAA,CACF,CAAoC,GAAA,CAClC,IAAMC,CAAAA,CAAyB,IAAIC,UAAAA,CAAWH,CAAc,CAAA,CACtDI,CAAc,CAAA,IAAIC,YACxBD,CAAY,CAAA,cAAA,CAAe,gBAAgB,CAAA,CAC3CF,CAAW,CAAA,cAAA,CAAeE,CAAW,CAMrC,CAAA,IAAME,CAAY,CAAA,MAAOC,CAAmC,EAAA,CAC1D,GAAI,CACF,IAAMC,CAAQ,CAAA,MAAMN,CAAW,CAAA,SAAA,CAAUK,CAAS,CAAA,IAAI,CACtDN,CAAAA,CAAAA,CAAe,UAAW,CAAA,OAAO,CAAE,CAAA,KAAA,CAAMM,EAAS,EAAI,CAAA,CACpD,UAAYC,CAAAA,CAAAA,CAAM,UAClB,CAAA,MAAA,CAAQA,EAAM,KAChB,CAAC,CACDT,CAAAA,CAAAA,CAAM,GAAIS,CAAAA,CAAAA,CAAM,KAAK,EACvB,CAAA,MAASC,CAAK,CAAA,CACZ,MAAM,IAAI,KAAM,CAAA,CAAA,wCAAA,EAA2CA,CAAG,CAAA,CAAE,CAClE,CACF,CAWA,CAAA,OAAO,CACL,IAVW,CAAA,MAAOC,CAAmC,EAAA,CACrD,IAAMC,CAAAA,CAA4B,EAClCD,CAAAA,CAAAA,CAAO,OAASE,CAAAA,CAAAA,EAAU,CACxBD,CAAAA,CAAS,KAAKL,CAAUM,CAAAA,CAAK,CAAC,EAChC,CAAC,CAAA,CAED,MAAM,OAAA,CAAQ,UAAWD,CAAAA,CAAQ,EACnC,CAIA,CACF","file":"chunk-56WY7GLK.js","sourcesContent":["import { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { LoadingManager, Scene } from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { ModelAssetDescriptor } from \"types/loader.types\";\nimport { LoaderPlugin } from \"types/plugin.types\";\n\nexport interface GLBLoaderProps {\n  scene: Scene;\n  loadingManager: LoadingManager;\n  storageManager: GlobalStorageManager;\n}\n\nexport const createGLBLoader = ({\n  scene,\n  loadingManager,\n  storageManager,\n}: GLBLoaderProps): LoaderPlugin => {\n  const gltfLoader: GLTFLoader = new GLTFLoader(loadingManager);\n  const dracoLoader = new DRACOLoader();\n  dracoLoader.setDecoderPath(\"/public/draco/\");\n  gltfLoader.setDRACOLoader(dracoLoader);\n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: ModelAssetDescriptor) => {\n    try {\n      const model = await gltfLoader.loadAsync(metaData.path);\n      storageManager.getStorage(\"model\").store(metaData.id, {\n        animations: model.animations,\n        groups: model.scene,\n      });\n      scene.add(model.scene);\n    } catch (err) {\n      throw new Error(`Errr occuerd while loading a glb file : ${err}`);\n    }\n  };\n\n  const load = async (assets: ModelAssetDescriptor[]) => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  return {\n    load: load,\n  };\n};\n"]}