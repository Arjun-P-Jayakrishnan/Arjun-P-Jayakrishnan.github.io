{"version":3,"sources":["../src/graphics/loader/file_type_plugins/mesh_loader.ts"],"names":["createMeshLoader","props","assets","scene","loadingManager","loadingEventBus","globalStorage","getGlobalContext","gltfLoader","GLTFLoader","dracoLoader","DRACOLoader","_loadMesh","metaData","model","err","promises","asset"],"mappings":"0KAgBO,IAAMA,CAAoBC,CAAAA,CAAAA,EAAyC,CACxE,GAAM,CAAE,MAAAC,CAAAA,CAAAA,CAAQ,MAAAC,CAAO,CAAA,cAAA,CAAAC,CAAgB,CAAA,eAAA,CAAAC,CAAgB,CAAIJ,CAAAA,CAAAA,CACrD,CAAE,aAAA,CAAAK,CAAc,CAAIC,CAAAA,CAAAA,EAEpBC,CAAAA,CAAAA,CAAyB,IAAIC,UAAWL,CAAAA,CAAc,EACtDM,CAAc,CAAA,IAAIC,YACxBD,CAAY,CAAA,cAAA,CAAe,gBAAgB,CAAA,CAC3CF,EAAW,cAAeE,CAAAA,CAAW,CAMrC,CAAA,IAAME,EAAY,MAAOC,CAAAA,EAA4B,CACnD,GAAI,CACF,IAAMC,CAAAA,CAAQ,MAAMN,CAAAA,CAAW,UAAUK,CAAS,CAAA,IAAI,CAEtDV,CAAAA,CAAAA,CAAM,IAAIW,CAAM,CAAA,KAAK,CACrBA,CAAAA,CAAAA,CAAM,MAAM,QAAS,CAAA,GAAA,CAAI,CAAG,CAAA,CAAA,CAAG,CAAC,CAChCD,CAAAA,CAAAA,CAAS,aAETP,CAAAA,CAAAA,CACG,WAAW,YAAY,CAAA,CACvB,KAAMO,CAAAA,CAAAA,CAAS,KAAO,aAAeC,CAAAA,CAAAA,CAAM,UAAU,CAAA,CACxDR,EACG,UAAW,CAAA,QAAQ,CACnB,CAAA,KAAA,CAAMO,EAAS,IAAO,CAAA,SAAA,CAAWC,CAAM,CAAA,KAAK,EAC/C,OAAQ,CAAA,GAAA,CAAI,cAAgBD,CAAAA,CAAAA,CAAS,IAAI,EAC3C,CAAA,MAASE,CAAK,CAAA,CACZ,MAAAF,CAAS,CAAA,OAAA,GAAUE,CAAY,CAAA,CAC/BV,EAAgB,IAAK,CAAA,CAAE,KAAM,YAAc,CAAA,GAAA,CAAKQ,EAAS,IAAK,CAAC,CAC/D,CAAA,OAAA,CAAQ,MAAME,CAAG,CAAA,CACXA,CACR,CACF,EAaA,OAAO,CACL,IAZW,CAAA,SAAY,CACvB,IAAMC,CAAAA,CAA4B,EAAC,CACnCd,EAAO,OAASe,CAAAA,CAAAA,EAAU,CACxBD,CAAAA,CAAS,KAAKJ,CAAUK,CAAAA,CAAK,CAAC,EAChC,CAAC,CAED,CAAA,MAAM,OAAQ,CAAA,UAAA,CAAWD,CAAQ,EACnC,CAAA,CAME,QAJc,IAAM,EAKtB,CACF","file":"chunk-JKKQ7BUF.js","sourcesContent":["import { createEventBus } from \"@utils/event_management/eventBus\";\nimport type { LoadingEvents } from \"@utils/event_management/eventType\";\nimport { getGlobalContext } from \"@utils/globalContext\";\nimport { Scene } from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport type { LoadingManager } from \"three/src/loaders/LoadingManager.js\";\nimport type { AssetMetaData, LoaderPlugin } from \"../loaderPlugins\";\n\nexport interface MeshLoaderProps {\n  assets: AssetMetaData[];\n  scene: Scene;\n  loadingManager: LoadingManager;\n  loadingEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n}\n\nexport const createMeshLoader = (props: MeshLoaderProps): LoaderPlugin => {\n  const { assets, scene, loadingManager, loadingEventBus } = props;\n  const { globalStorage } = getGlobalContext();\n\n  const gltfLoader: GLTFLoader = new GLTFLoader(loadingManager);\n  const dracoLoader = new DRACOLoader();\n  dracoLoader.setDecoderPath(\"/public/draco/\");\n  gltfLoader.setDRACOLoader(dracoLoader);\n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: AssetMetaData) => {\n    try {\n      const model = await gltfLoader.loadAsync(metaData.path);\n\n      scene.add(model.scene);\n      model.scene.position.set(0, 0, 0);\n      metaData.onSuccess?.();\n\n      globalStorage\n        .getStorage(\"animations\")\n        .store(metaData.name + \":animations\", model.animations);\n      globalStorage\n        .getStorage(\"groups\")\n        .store(metaData.name + \":groups\", model.scene);\n      console.log(\"loading mesh\", metaData.name);\n    } catch (err) {\n      metaData.onError?.(err as Error);\n      loadingEventBus.emit({ type: \"load:error\", url: metaData.path });\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const load = async () => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  const dispose = () => {};\n\n  return {\n    load: load,\n    dispose: dispose,\n  };\n};\n"]}