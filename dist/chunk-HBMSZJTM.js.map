{"version":3,"sources":["../src/gameplay/navigation/player.ts"],"names":["createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","contextManager","getThreeJsContext","Vector3","tempData","inputs","mount","deltaTime","rotation","camera","Euler"],"mappings":"0GA6DaA,IAAAA,CAAAA,CAAgBC,CAA+B,EAAA,CACpD,IAAA,CAAE,gBAAAC,CAAiB,CAAA,WAAA,CAAAC,CAAa,CAAA,aAAA,CAAAC,CAAc,CAAA,CAAIC,GAClDC,CAAiBC,CAAkB,EAAA,EAEhB,CACvB,UAAW,IAAIC,OAAAA,CAAQ,EAAG,CAAG,CAAA,EAAE,EAC/B,QAAU,CAAA,IAAIA,OAAQ,CAAA,CAAA,CAAG,CAAG,CAAA,CAAC,CAK/B,EACIC,EAAqB,CACvB,cAAA,CAAgB,IAAID,OAAAA,CAAQ,EAAG,CAAG,CAAA,CAAC,CACrC,EACIE,KAWEC,CAAQ,CAAA,IAAM,EA8BpB,CAiGA,OAAO,CACL,KAAA,CAAOA,EACP,QAhBa,CAAA,IAAI,EAEnB,CAeE,UAbe,CAAA,IAAI,EAcnB,CAAA,MAAA,CAxCa,CACbC,CAAAA,CACAC,CACAC,CAAAA,CAAAA,IAaQ,CACN,QAAU,CAAA,IAAIN,OACd,CAAA,QAAA,CAAU,IAAIO,KAChB,GAsBA,OAbc,CAAA,IAAM,EActB,CACF","file":"chunk-HBMSZJTM.js","sourcesContent":["\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { getControllers } from \"graphics/mechanics/controllers/controller\";\nimport { KeyboardController } from \"graphics/mechanics/controllers/plugins/keyboard\";\nimport { MouseController } from \"graphics/mechanics/controllers/plugins/mouse\";\nimport { getGlobalContext } from \"managers/globalContext\";\nimport { AnimationMixer, Euler, Object3D, Scene, Vector3 } from \"three\";\n\n\nexport interface PlayerProps {\n  rootMeshId: string;\n}\n\n\n\nexport interface Player {\n  mount: () => void;\n  update: (\n    deltaTime: number,\n    rotation: {\n      yaw: number;\n      pitch: number;\n    },\n    camera: {\n      rotation: Euler;\n    }\n  ) => {\n    position: Vector3;\n    rotation: Euler;\n  };\n  activate:()=>void;\n  deactivate:()=>void\n  unmount: () => void;\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n  let inputs: {\n    mouse: MouseController | null;\n    keyboard: KeyboardController | null;\n  } = {\n    mouse: null,\n    keyboard: null,\n  };\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const mount = () => {\n    // try {\n    //   let playerRoot = contextManager\n    //     .get(\"scene\")\n    //     .getObjectByName(props.rootMeshId);\n\n    //   // const playerRoot=scene.getObjectByName(props.ids.rootMesh) as Object3D;\n\n    //   if (!playerRoot) {\n    //     throw new Error(\n    //       `player doesn't exist for the id ${props.rootMeshId}`\n    //     );\n    //   }\n\n    //   //Local References\n    //   objects = {\n    //     playerRoot: playerRoot,\n    //   };\n\n    //   animations = {\n    //     mixer: new AnimationMixer(playerRoot),\n    //   };\n\n    //   inputs = {\n    //     mouse: getControllers().getController(\"mouse\"),\n    //     keyboard: getControllers().getController(\"keyboard\"),\n    //   };\n    // } catch (err) {\n    //   console.error(`Player mesh cant be obtained :${err}`);\n    // }\n  };\n\n  const updateMouse = (\n    mouse: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    // state.rotationApplied = mouse;\n    // objects.playerRoot.rotation.y += state.rotationApplied.yaw;\n  };\n\n  // const updateKeyboard = (deltaTime: number) => {\n  //   if (!inputs.keyboard) return;\n  //   const FRICTION = 5.0;\n  //   const VELOCITY_DEADZONE = 0.001;\n\n  //   const { inputDirection } = tempData;\n  //   inputDirection.set(0, 0, 0);\n\n  //   if (inputs.keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n  //   if (inputs.keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n  //   if (inputs.keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n  //   if (inputs.keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n  //   if (inputDirection.length() > 0) {\n  //     //normalize direction\n  //     inputDirection.applyQuaternion(objects.playerRoot.quaternion);\n  //     inputDirection.normalize();\n\n  //     //accelerate towards the direction\n  //     state.velocity.add(\n  //       inputDirection.multiplyScalar(\n  //         PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n  //       )\n  //     );\n  //     //ensure the velocity doesn't go over the threshold\n  //     state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n  //   } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n  //     const decay = Math.exp(-FRICTION * deltaTime);\n  //     state.velocity.multiplyScalar(decay);\n\n  //     if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n  //       state.velocity.set(0, 0, 0);\n  //     }\n  //   }\n\n  //   objects.playerRoot.position.add(state.velocity);\n  // };\n\n  // const updateControllers = (\n  //   deltaTime: number,\n  //   rotation: { yaw: number; pitch: number },\n  //   camera: { rotation: Euler }\n  // ) => {\n  //   updateMouse(rotation, camera);\n  //   updateKeyboard(deltaTime);\n  // };\n\n  // const updateAnimation = (deltaTime: number) => {\n  //   animations.mixer!.update(deltaTime);\n  // };\n\n  const update = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    // if (animations.mixer) {\n    //   updateAnimation(deltaTime);\n    // }\n\n    // updateControllers(deltaTime, rotation, camera);\n\n    // return {\n    //   position: objects.playerRoot.position,\n    //   rotation: objects.playerRoot.rotation,\n    // };\n\n     return {\n      position: new Vector3(),\n      rotation: new Euler(),\n    };\n  };\n\n  const activate=()=>{\n   // objects.playerRoot.rotation.set(0,0,0,'XYZ')\n  }\n\n  const deactivate=()=>{}\n\n  const unmount = () => {\n    try {\n      //objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate:activate,\n    deactivate:deactivate,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}