{"version":3,"sources":["../src/graphics/main.ts"],"sourcesContent":["import { EventBusManager } from \"@utils/event_management/eventBusFactory\";\r\nimport { GlobalState } from \"@utils/state/globalState\";\r\nimport { Gameplay } from \"./instance/gameplay\";\r\nimport { createThreeJsInstance } from \"./internal/internal\";\r\nimport { createLoader } from \"./loader/loader\";\r\n\r\ninterface GameEngineInstanceProps {\r\n  globalState: GlobalState;\r\n  eventBusManager: EventBusManager;\r\n}\r\n\r\nexport interface GameEngineInstance {\r\n  mount: (gameplay: Gameplay) => Promise<void>;\r\n  unmount: () => void;\r\n  update: () => void;\r\n}\r\n\r\nconst FILE_CONSTANTS = {\r\n  PATH_TO_MODELS: \"../../assets/Models/\",\r\n  PATH_TO_HDR: \"../../assets/HDR/\",\r\n};\r\n\r\nexport const createGameEngineInstance = (\r\n  props: GameEngineInstanceProps\r\n): GameEngineInstance => {\r\n  const engineInstance = createThreeJsInstance({\r\n    camera: {},\r\n    domMountTag: \"game-engine\",\r\n  });\r\n\r\n  const loaderInstance = createLoader(\r\n    {\r\n      meshesMetaData: [\r\n        // {\r\n        //   path: FILE_CONSTANTS.PATH_TO_MODELS + \"carved_wooden_elephant_1k.glb\",\r\n        // },\r\n        // {\r\n        //   path: FILE_CONSTANTS.PATH_TO_MODELS + \"environment.glb\",\r\n        // },\r\n        {\r\n          path: FILE_CONSTANTS.PATH_TO_MODELS + \"room.glb\",\r\n        },\r\n      ],\r\n      hdrMetaData: {\r\n        path: FILE_CONSTANTS.PATH_TO_HDR + \"environment.hdr\",\r\n      },\r\n    },\r\n    {\r\n      globalState: props.globalState,\r\n      loaderEventBus: props.eventBusManager.loadingBus,\r\n      renderer: engineInstance.renderer,\r\n      scene: engineInstance.scene,\r\n    }\r\n  );\r\n\r\n  const mountWindowEventListeners = () => {\r\n    window.addEventListener(\"keydown\", (e) => {\r\n      if (e.key.toLowerCase() === \"u\" && e.shiftKey) {\r\n        e.preventDefault();\r\n        props.eventBusManager.debugBus.emit({\r\n          type: \"debug:inspector\",\r\n          scene: engineInstance.scene,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const mount = async (gameplay: Gameplay) => {\r\n    gameplay.mount({\r\n      renderer: engineInstance.renderer,\r\n      scene: engineInstance.scene,\r\n      camera: engineInstance.camera,\r\n      controls: engineInstance.controls,\r\n    });\r\n    engineInstance.register(gameplay.update);\r\n    mountWindowEventListeners();\r\n    loaderInstance.configure();\r\n    await loaderInstance.loadAll();\r\n  };\r\n\r\n  const unmount = () => {};\r\n\r\n  const update = () => {\r\n    engineInstance.render();\r\n  };\r\n\r\n  return {\r\n    mount: mount,\r\n    unmount: unmount,\r\n    update: update,\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;AAiBA,IAAM,iBAAiB;AAAA,EACrB,gBAAgB;AAAA,EAChB,aAAa;AACf;AAEO,IAAM,2BAA2B,CACtC,UACuB;AACvB,QAAM,iBAAiB,sBAAsB;AAAA,IAC3C,QAAQ,CAAC;AAAA,IACT,aAAa;AAAA,EACf,CAAC;AAED,QAAM,iBAAiB;AAAA,IACrB;AAAA,MACE,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOd;AAAA,UACE,MAAM,eAAe,iBAAiB;AAAA,QACxC;AAAA,MACF;AAAA,MACA,aAAa;AAAA,QACX,MAAM,eAAe,cAAc;AAAA,MACrC;AAAA,IACF;AAAA,IACA;AAAA,MACE,aAAa,MAAM;AAAA,MACnB,gBAAgB,MAAM,gBAAgB;AAAA,MACtC,UAAU,eAAe;AAAA,MACzB,OAAO,eAAe;AAAA,IACxB;AAAA,EACF;AAEA,QAAM,4BAA4B,MAAM;AACtC,WAAO,iBAAiB,WAAW,CAAC,MAAM;AACxC,UAAI,EAAE,IAAI,YAAY,MAAM,OAAO,EAAE,UAAU;AAC7C,UAAE,eAAe;AACjB,cAAM,gBAAgB,SAAS,KAAK;AAAA,UAClC,MAAM;AAAA,UACN,OAAO,eAAe;AAAA,QACxB,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,QAAQ,OAAO,aAAuB;AAC1C,aAAS,MAAM;AAAA,MACb,UAAU,eAAe;AAAA,MACzB,OAAO,eAAe;AAAA,MACtB,QAAQ,eAAe;AAAA,MACvB,UAAU,eAAe;AAAA,IAC3B,CAAC;AACD,mBAAe,SAAS,SAAS,MAAM;AACvC,8BAA0B;AAC1B,mBAAe,UAAU;AACzB,UAAM,eAAe,QAAQ;AAAA,EAC/B;AAEA,QAAM,UAAU,MAAM;AAAA,EAAC;AAEvB,QAAM,SAAS,MAAM;AACnB,mBAAe,OAAO;AAAA,EACxB;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}