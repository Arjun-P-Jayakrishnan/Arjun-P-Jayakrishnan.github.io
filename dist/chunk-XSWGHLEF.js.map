{"version":3,"sources":["../src/utils/state/globalState.ts"],"sourcesContent":["import { createObservable, Observable } from \"./observable\";\n\ntype ObservableMap = Record<string, Observable<any>>;\n\n/**\n * Here we map key to state\n *\n * [key in T i.e string] : U (type extracted from observable)\n *\n * key : U or never\n */\ntype ExtractState<T extends ObservableMap> = {\n  [K in keyof T]: T[K] extends Observable<infer U> ? U : never;\n};\n\nexport interface GlobalState {\n  /**\n   *@description populates the state with Initial values\n   */\n  inflate: () => void;\n  /**\n   * @description gets the current state\n   * @returns the state with fields for the given map\n   */\n  getState: <T extends ObservableMap>() => ExtractState<T>;\n  /**\n   * @description updates to the new state\n   * @param newState only the part of the state say eg loading state\n   */\n  setState: <T extends ObservableMap>(newState: Partial<ExtractState<T>>) => void;\n  /**\n   * @description gets the observable\n   * @param key string\n   * @returns observable\n   */\n  getObservable: <K extends keyof ObservableMap>(\n    key: K\n  ) => Observable<ObservableMap[K]>;\n  /**\n   *\n   * @param key the state to which subscription is taken\n   * @param fn the callback function\n   * @returns un subscribe function\n   */\n  subscribe: <K extends keyof ObservableMap>(\n    key: K,\n    fn: (value: ObservableMap[K]) => void\n  ) => () => void;\n  /**\n   * @description clears up any left over observables\n   */\n  dispose: () => void;\n}\n\nexport const createGlobalState = <T extends ObservableMap>(\n  map: Record<string, any>\n): GlobalState => {\n  const stateMap: T = {} as T;\n  /**\n   *@description inflates the state-map with values\n   */\n  const inflate = () => {\n    //createObservable({initial:map[key]})\n\n    for (const key in map) {\n      const observable = createObservable({ initial: map[key] });\n      stateMap[key as keyof T] = observable as T[typeof key];\n    }\n  };\n\n  /**\n   * @description gets the state from observables\n   * @returns current state\n   */\n  const getState = <T extends ObservableMap>(): ExtractState<T> => {\n    const state = {} as ExtractState<T>;\n\n    for (const key in stateMap) {\n      state[key] = stateMap[key].getValue();\n    }\n\n    return state;\n  };\n\n  /**\n   * @description sets the new state\n   * @param newState the state which has to be updated\n   */\n  const setState = <T extends ObservableMap>(newState: Partial<ExtractState<T>>) => {\n    for (const key in newState) {\n      if (stateMap[key]) {\n        stateMap[key].setValue(newState[key]);\n      }\n    }\n  };\n\n  /**\n   * @description gets the observable\n   * @param key string\n   * @returns observable for the key\n   */\n  const getObservable = <K extends keyof ObservableMap>(\n    key: K\n  ): Observable<ObservableMap[K]> => {\n    return stateMap[key];\n  };\n\n  /***\n   * @description subscribe to underlying observable\n   */\n  const subscribe = <K extends keyof ObservableMap>(\n    key: K,\n    fn: (value: T[K]) => void\n  ) => {\n    return stateMap[key].subscribeToChanges(fn);\n  };\n\n  /**\n   * dispose off any unwanted observables if any is left behind\n   */\n  const dispose = () => {\n    for (const key in stateMap) {\n      stateMap[key].dispose();\n    }\n  };\n\n  return Object.freeze({\n    inflate: inflate,\n    getState: getState,\n    setState: setState,\n    getObservable: getObservable,\n    subscribe: subscribe,\n    dispose: dispose,\n  });\n};\n"],"mappings":"wCAsDO,IAAMA,EACXC,GACgB,CAChB,IAAMC,EAAc,CAAC,EAqErB,OAAO,OAAO,OAAO,CACnB,QAlEc,IAAM,CAGpB,QAAWC,KAAOF,EAAK,CACrB,IAAMG,EAAaC,EAAiB,CAAE,QAASJ,EAAIE,CAAG,CAAE,CAAC,EACzDD,EAASC,CAAc,EAAIC,CAC7B,CACF,EA4DE,SAtDe,IAAgD,CAC/D,IAAME,EAAQ,CAAC,EAEf,QAAWH,KAAOD,EAChBI,EAAMH,CAAG,EAAID,EAASC,CAAG,EAAE,SAAS,EAGtC,OAAOG,CACT,EA+CE,SAzCyCC,GAAuC,CAChF,QAAWJ,KAAOI,EACZL,EAASC,CAAG,GACdD,EAASC,CAAG,EAAE,SAASI,EAASJ,CAAG,CAAC,CAG1C,EAoCE,cA5BAA,GAEOD,EAASC,CAAG,EA2BnB,UArBgB,CAChBA,EACAK,IAEON,EAASC,CAAG,EAAE,mBAAmBK,CAAE,EAkB1C,QAZc,IAAM,CACpB,QAAWL,KAAOD,EAChBA,EAASC,CAAG,EAAE,QAAQ,CAE1B,CASA,CAAC,CACH","names":["createGlobalState","map","stateMap","key","observable","createObservable","state","newState","fn"]}