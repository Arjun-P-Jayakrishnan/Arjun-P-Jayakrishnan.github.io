{"version":3,"sources":["../src/utils/state/globalState.ts"],"names":["createGlobalState","map","stateMap","key","observable","createObservable","state","newState","fn"],"mappings":"oCAsDaA,IAAAA,CAAAA,CACXC,GACgB,CAChB,IAAMC,IAAc,EAAC,CAqErB,OAAO,MAAA,CAAO,MAAO,CAAA,CACnB,QAlEc,IAAM,CAGpB,QAAWC,CAAOF,IAAAA,CAAAA,CAAK,CACrB,IAAMG,CAAAA,CAAaC,CAAiB,CAAA,CAAE,OAASJ,CAAAA,CAAAA,CAAIE,CAAG,CAAE,CAAC,EACzDD,GAASC,CAAAA,CAAc,EAAIC,EAC7B,CACF,CA4DE,CAAA,QAAA,CAtDe,IAAgD,CAC/D,IAAME,CAAQ,CAAA,GAEd,IAAWH,IAAAA,CAAAA,IAAOD,IAChBI,CAAMH,CAAAA,CAAG,CAAID,CAAAA,GAAAA,CAASC,CAAG,CAAA,CAAE,UAG7B,CAAA,OAAOG,CACT,CA+CE,CAAA,QAAA,CAzCyCC,GAAuC,CAChF,IAAA,IAAWJ,CAAOI,IAAAA,CAAAA,CACZL,GAASC,CAAAA,CAAG,GACdD,GAASC,CAAAA,CAAG,EAAE,QAASI,CAAAA,CAAAA,CAASJ,CAAG,CAAC,EAG1C,CAoCE,CAAA,aAAA,CA5BAA,CAEOD,EAAAA,GAAAA,CAASC,CAAG,CA2BnB,CAAA,SAAA,CArBgB,CAChBA,CACAK,CAAAA,CAAAA,GAEON,IAASC,CAAG,CAAA,CAAE,kBAAmBK,CAAAA,CAAE,CAkB1C,CAAA,OAAA,CAZc,IAAM,CACpB,IAAA,IAAWL,CAAOD,IAAAA,GAAAA,CAChBA,GAASC,CAAAA,CAAG,EAAE,OAAQ,GAE1B,CASA,CAAC,CACH","file":"chunk-XSWGHLEF.js","sourcesContent":["import { createObservable, Observable } from \"./observable\";\n\ntype ObservableMap = Record<string, Observable<any>>;\n\n/**\n * Here we map key to state\n *\n * [key in T i.e string] : U (type extracted from observable)\n *\n * key : U or never\n */\ntype ExtractState<T extends ObservableMap> = {\n  [K in keyof T]: T[K] extends Observable<infer U> ? U : never;\n};\n\nexport interface GlobalState {\n  /**\n   *@description populates the state with Initial values\n   */\n  inflate: () => void;\n  /**\n   * @description gets the current state\n   * @returns the state with fields for the given map\n   */\n  getState: <T extends ObservableMap>() => ExtractState<T>;\n  /**\n   * @description updates to the new state\n   * @param newState only the part of the state say eg loading state\n   */\n  setState: <T extends ObservableMap>(newState: Partial<ExtractState<T>>) => void;\n  /**\n   * @description gets the observable\n   * @param key string\n   * @returns observable\n   */\n  getObservable: <K extends keyof ObservableMap>(\n    key: K\n  ) => Observable<ObservableMap[K]>;\n  /**\n   *\n   * @param key the state to which subscription is taken\n   * @param fn the callback function\n   * @returns un subscribe function\n   */\n  subscribe: <K extends keyof ObservableMap>(\n    key: K,\n    fn: (value: ObservableMap[K]) => void\n  ) => () => void;\n  /**\n   * @description clears up any left over observables\n   */\n  dispose: () => void;\n}\n\nexport const createGlobalState = <T extends ObservableMap>(\n  map: Record<string, any>\n): GlobalState => {\n  const stateMap: T = {} as T;\n  /**\n   *@description inflates the state-map with values\n   */\n  const inflate = () => {\n    //createObservable({initial:map[key]})\n\n    for (const key in map) {\n      const observable = createObservable({ initial: map[key] });\n      stateMap[key as keyof T] = observable as T[typeof key];\n    }\n  };\n\n  /**\n   * @description gets the state from observables\n   * @returns current state\n   */\n  const getState = <T extends ObservableMap>(): ExtractState<T> => {\n    const state = {} as ExtractState<T>;\n\n    for (const key in stateMap) {\n      state[key] = stateMap[key].getValue();\n    }\n\n    return state;\n  };\n\n  /**\n   * @description sets the new state\n   * @param newState the state which has to be updated\n   */\n  const setState = <T extends ObservableMap>(newState: Partial<ExtractState<T>>) => {\n    for (const key in newState) {\n      if (stateMap[key]) {\n        stateMap[key].setValue(newState[key]);\n      }\n    }\n  };\n\n  /**\n   * @description gets the observable\n   * @param key string\n   * @returns observable for the key\n   */\n  const getObservable = <K extends keyof ObservableMap>(\n    key: K\n  ): Observable<ObservableMap[K]> => {\n    return stateMap[key];\n  };\n\n  /***\n   * @description subscribe to underlying observable\n   */\n  const subscribe = <K extends keyof ObservableMap>(\n    key: K,\n    fn: (value: T[K]) => void\n  ) => {\n    return stateMap[key].subscribeToChanges(fn);\n  };\n\n  /**\n   * dispose off any unwanted observables if any is left behind\n   */\n  const dispose = () => {\n    for (const key in stateMap) {\n      stateMap[key].dispose();\n    }\n  };\n\n  return Object.freeze({\n    inflate: inflate,\n    getState: getState,\n    setState: setState,\n    getObservable: getObservable,\n    subscribe: subscribe,\n    dispose: dispose,\n  });\n};\n"]}