{"version":3,"sources":["../src/graphics/internal/internal.ts"],"names":["createThreeJsInstance","props","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","controls","OrbitControls","animationLoop","contextManager","getThreeJsContext","_mountRenderer","tag","container","_configureControls","addAxesHelper","axes_helper","AxesHelper","_mountThreeJsContext","mount","register","loop","render","disposeCallbacks","fn"],"mappings":"kLAkDaA,IAAAA,CAAAA,CACXC,CAC2B,EAAA,CAG3B,IAAIC,GAAAA,CAAe,IAAIC,KAEnBC,CAAAA,CAAAA,CAA4B,IAAIC,iBAAAA,CAClCJ,CAAM,CAAA,MAAA,CAAO,IACbA,CAAM,CAAA,MAAA,CAAO,MACbA,CAAAA,CAAAA,CAAM,MAAO,CAAA,IAAA,CACbA,EAAM,MAAO,CAAA,GACf,CAEIK,CAAAA,CAAAA,CAA0B,IAAIC,aAAAA,CAAc,CAAE,SAAW,CAAA,IAAK,CAAC,CAAA,CAE/DC,CAA0B,CAAA,IAAIC,cAAcL,CAAQE,CAAAA,CAAAA,CAAS,UAAU,CAAA,CAEvEI,CAEEC,CAAAA,CAAAA,CAAiBC,GAMjBC,CAAAA,CAAAA,CAAkBC,CAAgB,EAAA,CACtC,IAAMC,CAAAA,CAAY,SAAS,cAAeD,CAAAA,CAAG,CAE7CR,CAAAA,CAAAA,CAAS,OAAQ,CAAA,MAAA,CAAO,WAAY,MAAO,CAAA,WAAW,CACtDA,CAAAA,CAAAA,CAAS,aAAc,CAAA,MAAA,CAAO,gBAAgB,CAE1CS,CAAAA,CAAAA,CACFA,CAAU,CAAA,WAAA,CAAYT,CAAS,CAAA,UAAU,EAEzC,OAAQ,CAAA,IAAA,CAAK,CAA8CQ,2CAAAA,EAAAA,CAAG,CAAE,CAAA,EAEpE,EAKME,CAAqB,CAAA,IAAM,CAC/BR,CAAAA,CAAS,aAAgB,CAAA,IAAA,CACzBA,EAAS,aAAgB,CAAA,GAAA,CACzBA,CAAS,CAAA,kBAAA,CAAqB,KAC9BA,CAAAA,CAAAA,CAAS,cAAgB,IAAK,CAAA,EAAA,CAAK,EACrC,CAAA,CAEMS,CAAgB,CAAA,IAAM,CAC1B,IAAMC,CAAAA,CAAc,IAAIC,UAAAA,CACxBjB,GAAM,CAAA,GAAA,CAAIgB,CAAW,EACvB,CAAA,CAEME,CAAuB,CAAA,IAAM,CACjCT,CAAAA,CAAe,MAAM,CACnB,KAAA,CAAOT,GACP,CAAA,MAAA,CAAQE,CACR,CAAA,QAAA,CAAUE,EACV,KAAOE,CAAAA,CACT,CAAC,EACH,CAEMa,CAAAA,CAAAA,CAAQ,IAAM,CAClBR,CAAAA,CAAeZ,CAAM,CAAA,WAAW,CAChCe,CAAAA,CAAAA,GAEAZ,CAAO,CAAA,QAAA,CAAS,GAAI,CAAA,CAAA,CAAG,CAAG,CAAA,EAAG,EAC7BF,GAAM,CAAA,GAAA,CAAIE,CAAM,CAAA,CAEhBa,CAAc,EAAA,CAEdG,IACF,CAAA,CAEME,CAAYC,CAAAA,CAAAA,EAAqB,CACrCb,CAAAA,CAAgBa,EAClB,CAKMC,CAAAA,CAAAA,CAAS,IAAM,CAEnB,qBAAsBA,CAAAA,CAAM,EAE5BhB,CAAS,CAAA,MAAA,EAELE,CAAAA,CAAAA,EACFA,CAAc,EAAA,CAIhBJ,EAAS,MAAOJ,CAAAA,GAAAA,CAAOE,CAAM,EAC/B,CAaA,CAAA,OAAO,OAAO,MAAO,CAAA,CACnB,KAAOF,CAAAA,GAAAA,CACP,MAAQE,CAAAA,CAAAA,CACR,SAAUI,CACV,CAAA,QAAA,CAAUF,CAEV,CAAA,KAAA,CAAOe,CACP,CAAA,QAAA,CAAUC,EACV,MAAQE,CAAAA,CAAAA,CACR,OAhBeC,CAAAA,CAAAA,EAAwC,CACvDA,CAAAA,CAAiB,QAASC,CAAOA,EAAAA,CAAAA,EAAI,CAAA,CAErCpB,CAAS,CAAA,OAAA,EACTE,CAAAA,CAAAA,CAAS,OAAQ,GACnB,CAYA,CAAC,CACH","file":"chunk-S7M4EPWK.js","sourcesContent":["import { AxesHelper, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { getThreeJsContext } from \"./context\";\n\nexport interface ThreeJSRenderProps {\n  /**\n   * Properties for camera\n   */\n  camera: {\n    fov?: number;\n    aspect?: number;\n    near?: number;\n    far?: number;\n  };\n  /**\n   * Tag to which renderer has to be attached\n   */\n  domMountTag: string;\n}\n\nexport interface ThreeJsRenderReference {\n  scene: Scene;\n  camera: PerspectiveCamera;\n  renderer: WebGLRenderer;\n  controls: OrbitControls;\n\n  /**\n   * @description Mount\n   */\n  mount: () => void;\n  /**\n   * @description\n   * @param loop the callback for updating\n   */\n  register: (loop: () => void) => void;\n  /**\n   * @description Loop\n   */\n  render: () => void;\n  /**\n   * @description UnMount\n   */\n  dispose: (disposeCallbacks: Array<() => void>) => void;\n}\n\n/**\n * @description Creates a threejs environment in which further additions can be made\n * @param props properties that define the setup of game engine\n * @returns Render Lifecycle methods\n */\nexport const createThreeJsInstance = (\n  props: ThreeJSRenderProps\n): ThreeJsRenderReference => {\n  //Local references\n\n  let scene: Scene = new Scene();\n\n  let camera: PerspectiveCamera = new PerspectiveCamera(\n    props.camera.fov,\n    props.camera.aspect,\n    props.camera.near,\n    props.camera.far\n  );\n\n  let renderer: WebGLRenderer = new WebGLRenderer({ antialias: true });\n\n  let controls: OrbitControls = new OrbitControls(camera, renderer.domElement);\n\n  let animationLoop: () => void | undefined;\n\n  const contextManager = getThreeJsContext();\n\n  /**\n   * @description add the renderer so that it can display the 3d\n   * @param tag the dom tag to which the renderer is to be attached\n   */\n  const _mountRenderer = (tag: string) => {\n    const container = document.getElementById(tag);\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    if (container) {\n      container.appendChild(renderer.domElement);\n    } else {\n      console.warn(`Could not find element with selector tag : ${tag}`);\n    }\n  };\n\n  /**\n   * @description setup initial properties of orbital controls\n   */\n  const _configureControls = () => {\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.screenSpacePanning = false;\n    controls.maxPolarAngle = Math.PI / 2;\n  };\n\n  const addAxesHelper = () => {\n    const axes_helper = new AxesHelper();\n    scene.add(axes_helper);\n  };\n\n  const _mountThreeJsContext = () => {\n    contextManager.mount({\n      scene: scene,\n      camera: camera,\n      renderer: renderer,\n      orbit: controls,\n    });\n  };\n\n  const mount = () => {\n    _mountRenderer(props.domMountTag);\n    _configureControls();\n\n    camera.position.set(0, 0, 0.5);\n    scene.add(camera);\n\n    addAxesHelper();\n\n    _mountThreeJsContext();\n  };\n\n  const register = (loop: () => void) => {\n    animationLoop = loop;\n  };\n\n  /**\n   * @description Life cycle method similar to update\n   */\n  const render = () => {\n    //Recursive callback function\n    requestAnimationFrame(render);\n\n    controls.update();\n\n    if (animationLoop) {\n      animationLoop();\n    }\n\n    //Render scene from cameras perspective\n    renderer.render(scene, camera);\n  };\n\n  /**\n   * @description Life cycle method similar to UnMount\n   * @param disposeCallbacks array of dispose callbacks to be executed\n   */\n  const dispose = (disposeCallbacks: Array<() => void>) => {\n    disposeCallbacks.forEach((fn) => fn());\n\n    renderer.dispose();\n    controls.dispose();\n  };\n\n  return Object.freeze({\n    scene: scene,\n    camera: camera,\n    controls: controls,\n    renderer: renderer,\n\n    mount: mount,\n    register: register,\n    render: render,\n    dispose: dispose,\n  });\n};\n"]}