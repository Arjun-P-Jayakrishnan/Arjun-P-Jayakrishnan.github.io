{"version":3,"sources":["../src/graphics/internal/internal.ts"],"sourcesContent":["import { AxesHelper, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { getThreeJsContext } from \"./context\";\n\nexport interface ThreeJSRenderProps {\n  /**\n   * Properties for camera\n   */\n  camera: {\n    fov?: number;\n    aspect?: number;\n    near?: number;\n    far?: number;\n  };\n  /**\n   * Tag to which renderer has to be attached\n   */\n  domMountTag: string;\n}\n\nexport interface ThreeJsRenderReference {\n  scene: Scene;\n  camera: PerspectiveCamera;\n  renderer: WebGLRenderer;\n  controls: OrbitControls;\n\n  /**\n   * @description Mount\n   */\n  mount: () => void;\n  /**\n   * @description\n   * @param loop the callback for updating\n   */\n  register: (loop: () => void) => void;\n  /**\n   * @description Loop\n   */\n  render: () => void;\n  /**\n   * @description UnMount\n   */\n  dispose: (disposeCallbacks: Array<() => void>) => void;\n}\n\n/**\n * @description Creates a threejs environment in which further additions can be made\n * @param props properties that define the setup of game engine\n * @returns Render Lifecycle methods\n */\nexport const createThreeJsInstance = (\n  props: ThreeJSRenderProps\n): ThreeJsRenderReference => {\n  //Local references\n\n  let scene: Scene = new Scene();\n\n  let camera: PerspectiveCamera = new PerspectiveCamera(\n    props.camera.fov,\n    props.camera.aspect,\n    props.camera.near,\n    props.camera.far\n  );\n\n  let renderer: WebGLRenderer = new WebGLRenderer({ antialias: true });\n\n  let controls: OrbitControls = new OrbitControls(camera, renderer.domElement);\n\n  let animationLoop: () => void | undefined;\n\n  const contextManager = getThreeJsContext();\n\n  /**\n   * @description add the renderer so that it can display the 3d\n   * @param tag the dom tag to which the renderer is to be attached\n   */\n  const _mountRenderer = (tag: string) => {\n    const container = document.getElementById(tag);\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    if (container) {\n      container.appendChild(renderer.domElement);\n    } else {\n      console.warn(`Could not find element with selector tag : ${tag}`);\n    }\n  };\n\n  /**\n   * @description setup initial properties of orbital controls\n   */\n  const _configureControls = () => {\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.25;\n    controls.screenSpacePanning = false;\n    controls.maxPolarAngle = Math.PI / 2;\n  };\n\n  const addAxesHelper = () => {\n    const axes_helper = new AxesHelper();\n    scene.add(axes_helper);\n  };\n\n  const _mountThreeJsContext = () => {\n    contextManager.mount({\n      scene: scene,\n      camera: camera,\n      renderer: renderer,\n      orbit: controls,\n    });\n  };\n\n  const mount = () => {\n    _mountRenderer(props.domMountTag);\n    _configureControls();\n\n    camera.position.set(0, 0, 0.5);\n    scene.add(camera);\n\n    addAxesHelper();\n\n    _mountThreeJsContext();\n  };\n\n  const register = (loop: () => void) => {\n    animationLoop = loop;\n  };\n\n  /**\n   * @description Life cycle method similar to update\n   */\n  const render = () => {\n    //Recursive callback function\n    requestAnimationFrame(render);\n\n    controls.update();\n\n    if (animationLoop) {\n      animationLoop();\n    }\n\n    //Render scene from cameras perspective\n    renderer.render(scene, camera);\n  };\n\n  /**\n   * @description Life cycle method similar to UnMount\n   * @param disposeCallbacks array of dispose callbacks to be executed\n   */\n  const dispose = (disposeCallbacks: Array<() => void>) => {\n    disposeCallbacks.forEach((fn) => fn());\n\n    renderer.dispose();\n    controls.dispose();\n  };\n\n  return Object.freeze({\n    scene: scene,\n    camera: camera,\n    controls: controls,\n    renderer: renderer,\n\n    mount: mount,\n    register: register,\n    render: render,\n    dispose: dispose,\n  });\n};\n"],"mappings":"wCAAA,OAAS,cAAAA,EAAY,qBAAAC,EAAmB,SAAAC,EAAO,iBAAAC,MAAqB,QACpE,OAAS,iBAAAC,MAAqB,+CAiDvB,IAAMC,EACXC,GAC2B,CAG3B,IAAIC,EAAe,IAAIC,EAEnBC,EAA4B,IAAIC,EAClCJ,EAAM,OAAO,IACbA,EAAM,OAAO,OACbA,EAAM,OAAO,KACbA,EAAM,OAAO,GACf,EAEIK,EAA0B,IAAIC,EAAc,CAAE,UAAW,EAAK,CAAC,EAE/DC,EAA0B,IAAIC,EAAcL,EAAQE,EAAS,UAAU,EAEvEI,EAEEC,EAAiBC,EAAkB,EAMnCC,EAAkBC,GAAgB,CACtC,IAAMC,EAAY,SAAS,eAAeD,CAAG,EAE7CR,EAAS,QAAQ,OAAO,WAAY,OAAO,WAAW,EACtDA,EAAS,cAAc,OAAO,gBAAgB,EAE1CS,EACFA,EAAU,YAAYT,EAAS,UAAU,EAEzC,QAAQ,KAAK,8CAA8CQ,CAAG,EAAE,CAEpE,EAKME,EAAqB,IAAM,CAC/BR,EAAS,cAAgB,GACzBA,EAAS,cAAgB,IACzBA,EAAS,mBAAqB,GAC9BA,EAAS,cAAgB,KAAK,GAAK,CACrC,EAEMS,EAAgB,IAAM,CAC1B,IAAMC,EAAc,IAAIC,EACxBjB,EAAM,IAAIgB,CAAW,CACvB,EAEME,EAAuB,IAAM,CACjCT,EAAe,MAAM,CACnB,MAAOT,EACP,OAAQE,EACR,SAAUE,EACV,MAAOE,CACT,CAAC,CACH,EAEMa,EAAQ,IAAM,CAClBR,EAAeZ,EAAM,WAAW,EAChCe,EAAmB,EAEnBZ,EAAO,SAAS,IAAI,EAAG,EAAG,EAAG,EAC7BF,EAAM,IAAIE,CAAM,EAEhBa,EAAc,EAEdG,EAAqB,CACvB,EAEME,EAAYC,GAAqB,CACrCb,EAAgBa,CAClB,EAKMC,EAAS,IAAM,CAEnB,sBAAsBA,CAAM,EAE5BhB,EAAS,OAAO,EAEZE,GACFA,EAAc,EAIhBJ,EAAS,OAAOJ,EAAOE,CAAM,CAC/B,EAaA,OAAO,OAAO,OAAO,CACnB,MAAOF,EACP,OAAQE,EACR,SAAUI,EACV,SAAUF,EAEV,MAAOe,EACP,SAAUC,EACV,OAAQE,EACR,QAhBeC,GAAwC,CACvDA,EAAiB,QAASC,GAAOA,EAAG,CAAC,EAErCpB,EAAS,QAAQ,EACjBE,EAAS,QAAQ,CACnB,CAYA,CAAC,CACH","names":["AxesHelper","PerspectiveCamera","Scene","WebGLRenderer","OrbitControls","createThreeJsInstance","props","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","controls","OrbitControls","animationLoop","contextManager","getThreeJsContext","_mountRenderer","tag","container","_configureControls","addAxesHelper","axes_helper","AxesHelper","_mountThreeJsContext","mount","register","loop","render","disposeCallbacks","fn"]}