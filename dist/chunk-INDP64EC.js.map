{"version":3,"sources":["../src/core/game_engine/game_engine.ts"],"names":["DEFAULT_CAMERA_OPTIONS","createThreeJsInstance","props","fov","aspectRatio","near","far","scene","Scene","camera","PerspectiveCamera","renderer","WebGLRenderer","orbit","animationCallback","animationFrameId","contextManager","getThreeJsContext","mountRendererToDom","elementId","container","OrbitControls","exposeToContext","processPipelineDebugger","callback","loop"],"mappings":"+MAmBMA,CAAyB,CAAA,CAC7B,GAAK,CAAA,EAAA,CACL,WAAa,CAAA,MAAA,CAAO,WAAa,MAAO,CAAA,WAAA,CACxC,IAAM,CAAA,EAAA,CACN,GAAK,CAAA,GACP,EAEaC,CACXC,CAAAA,CAAAA,EACoB,CAEpB,GAAM,CAAE,IAAAC,CAAK,CAAA,WAAA,CAAAC,CAAa,CAAA,IAAA,CAAAC,CAAM,CAAA,GAAA,CAAAC,CAAI,CAAIN,CAAAA,CAAAA,CAGpCO,GAAe,CAAA,IAAIC,KACnBC,CAAAA,CAAAA,CAA4B,IAAIC,iBAClCP,CAAAA,CAAAA,CACAC,CACAC,CAAAA,CAAAA,CACAC,CACF,CAAA,CACIK,EAA0B,IAAIC,aAAAA,CAAc,CAAE,SAAW,CAAA,IAAK,CAAC,CAC/DC,CAAAA,CAAAA,CAGAC,CAA0C,CAAA,IAAA,CAC1CC,CAAqC,CAAA,IAAA,CAGnCC,EAAiBC,CAAkB,EAAA,CAInCC,CAAsBC,CAAAA,CAAAA,EAA4B,CACtD,IAAMC,EAAY,QAAS,CAAA,cAAA,CAAeD,CAAS,CAAA,CAEnDR,CAAS,CAAA,OAAA,CAAQ,OAAO,UAAY,CAAA,MAAA,CAAO,WAAW,CACtDA,CAAAA,CAAAA,CAAS,cAAc,MAAO,CAAA,gBAAgB,CAE1CS,CAAAA,CAAAA,EACFA,CAAU,CAAA,WAAA,CAAYT,EAAS,UAAU,CAAA,CACzCE,CAAQ,CAAA,IAAIQ,aAAcZ,CAAAA,CAAAA,CAAQE,EAAS,UAAU,CAAA,EAErD,OAAQ,CAAA,IAAA,CAAK,CAA8CQ,2CAAAA,EAAAA,CAAS,EAAE,EAE1E,CAAA,CAKMG,EAAkB,IAAY,CAClCN,EAAe,KAAM,CAAA,CACnB,KAAOT,CAAAA,GAAAA,CACP,MAAQE,CAAAA,CAAAA,CACR,SAAUE,CACV,CAAA,KAAA,CAAOE,CACT,CAAC,EACH,CAAA,CAwCA,OAAO,CACL,KAAA,CAvCY,IAAM,CAClBK,CAAmBhB,CAAAA,CAAAA,CAAM,UAAU,CACnCoB,CAAAA,CAAAA,GACAC,CAAwB,CAAA,OAAA,CAAQ,aAAa,EAC/C,CAAA,CAoCE,QAlCgBC,CAAAA,CAAAA,EAA+B,CAC/CV,CAAAA,CAAoBU,EACpBD,CAAwB,CAAA,UAAA,CAAW,0BAA0B,EAC/D,CAgCE,CAAA,MAAA,CA9Ba,IAAM,CACnB,GAAIR,CAAqB,GAAA,IAAA,CAAM,OAE/B,IAAMU,EAAO,IAAM,CAEjBV,EAAmB,qBAAsBU,CAAAA,CAAI,EAC7CX,CAAoB,IAAA,CACpBH,CAAS,CAAA,MAAA,CAAOJ,GAAOE,CAAAA,CAAM,EAC/B,CAEAgB,CAAAA,CAAAA,GACF,CAAA,CAoBE,OAlBc,CAAA,IAAM,CACpB,IAAML,CAAAA,CAAY,QAAS,CAAA,cAAA,CAAelB,CAAM,CAAA,UAAU,EACtDa,CAAqB,GAAA,IAAA,GACvB,oBAAqBA,CAAAA,CAAgB,CACrCA,CAAAA,CAAAA,CAAmB,GAEjBK,CAAaT,EAAAA,CAAAA,CAAS,UAAW,CAAA,aAAA,GAAkBS,CACrDA,EAAAA,CAAAA,CAAU,YAAYT,CAAS,CAAA,UAAU,CAG3CA,CAAAA,CAAAA,CAAS,OAAQ,EAAA,CACjBY,EAAwB,SAAU,CAAA,aAAa,EACjD,CAOA,CACF","file":"chunk-INDP64EC.js","sourcesContent":["import { PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { getThreeJsContext } from \"./game_context\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { LifeCycle, Nullable } from \"@utils/types/lifecycle\";\n\nexport interface ThreeJSRenderOptions {\n  /** Dom element id where the render will be mounted */\n  domMountId: string;\n}\n\nexport interface ThreeJsRenderer extends LifeCycle {\n  /** Register a callback executed on each animation frame */\n  register: (loop: () => void) => void;\n\n  /** Start rendering loop */\n  render: () => void;\n}\n\nconst DEFAULT_CAMERA_OPTIONS = {\n  fov: 75,\n  aspectRatio: window.innerWidth / window.innerHeight,\n  near: 0.1,\n  far: 1000,\n} as const;\n\nexport const createThreeJsInstance = (\n  props: ThreeJSRenderOptions\n): ThreeJsRenderer => {\n  //Local references\n  const { fov, aspectRatio, near, far } = DEFAULT_CAMERA_OPTIONS;\n\n  //=====Core Elements======\n  let scene: Scene = new Scene();\n  let camera: PerspectiveCamera = new PerspectiveCamera(\n    fov,\n    aspectRatio,\n    near,\n    far\n  );\n  let renderer: WebGLRenderer = new WebGLRenderer({ antialias: true });\n  let orbit: OrbitControls;\n\n  // State\n  let animationCallback: Nullable<() => void> = null;\n  let animationFrameId: Nullable<number> = null;\n\n  //External Context Hook\n  const contextManager = getThreeJsContext();\n\n  //Internal Methods\n\n  const mountRendererToDom = (elementId: string): void => {\n    const container = document.getElementById(elementId);\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    if (container) {\n      container.appendChild(renderer.domElement);\n      orbit = new OrbitControls(camera, renderer.domElement);\n    } else {\n      console.warn(`Could not find element with selector tag : ${elementId}`);\n    }\n  };\n\n  /**\n   * Mount the context_manager to allow reference to scene and other props externally\n   */\n  const exposeToContext = (): void => {\n    contextManager.mount({\n      scene: scene,\n      camera: camera,\n      renderer: renderer,\n      orbit: orbit,\n    });\n  };\n\n  const mount = () => {\n    mountRendererToDom(props.domMountId);\n    exposeToContext();\n    processPipelineDebugger.onMount(\"game-engine\");\n  };\n\n  const register = (callback: () => void): void => {\n    animationCallback = callback;\n    processPipelineDebugger.onCallback(\"game-engine registration\");\n  };\n\n  const render = () => {\n    if (animationFrameId !== null) return; //prevent multiple render loops\n\n    const loop = () => {\n      //Recursive callback function\n      animationFrameId = requestAnimationFrame(loop);\n      animationCallback?.();\n      renderer.render(scene, camera);\n    };\n\n    loop();\n  };\n\n  const unmount = () => {\n    const container = document.getElementById(props.domMountId);\n    if (animationFrameId !== null) {\n      cancelAnimationFrame(animationFrameId);\n      animationFrameId = 0;\n    }\n    if (container && renderer.domElement.parentElement === container) {\n      container.removeChild(renderer.domElement);\n    }\n\n    renderer.dispose();\n    processPipelineDebugger.onUnmount(\"game-engine\");\n  };\n\n  return {\n    mount: mount,\n    register: register,\n    render: render,\n    unmount: unmount,\n  };\n};\n"]}