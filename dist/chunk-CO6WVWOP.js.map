{"version":3,"sources":["../src/gameplay/RoomManager.ts"],"names":["createRoomController","serviceRegistry","getServiceRegistry","storage","logger","eventBusManager","contextManager","stateManager","loader","rooms","roomAssets","NAVIGATION_ROOM_ASSETS","ABOUT_ROOM_ASSETS","PROJECTS_ROOM_ASSETS","activeRoom","activeRoomKey","initializeLoader","createLoader","err","instantiateRoom","key","createNavigationRoom","NAVIGATION_ROOM_OPTIONS","createAboutRoom","ABOUT_ROOM_OPTIONS","createProjectRoom","PROJECTS_ROOM_OPTIONS","loadRoom","room","loadItems","switchRoom","mount","PLAYER_ASSET","update","deltaTime","unmount","transitionRooms","deactivateRoom"],"mappings":"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","file":"chunk-CO6WVWOP.js","sourcesContent":["import {\n  ABOUT_ROOM_ASSETS,\n  NAVIGATION_ROOM_ASSETS,\n  PLAYER_ASSET,\n  PROJECTS_ROOM_ASSETS,\n} from \"config/asset_manifest\";\nimport {\n  ABOUT_ROOM_OPTIONS,\n  NAVIGATION_ROOM_OPTIONS,\n  PROJECTS_ROOM_OPTIONS,\n} from \"config/rooms\";\nimport { createLoader, Loader } from \"engine/core/LoadingManager\";\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { createAboutRoom } from \"gameplay/rooms/about/room\";\nimport { createNavigationRoom } from \"gameplay/rooms/navigation/room\";\nimport { createProjectRoom } from \"gameplay/rooms/projects/room\";\nimport { Room, RoomAsset } from \"types/rooms.types\";\n\nexport interface RoomController {\n  mount: () => Promise<void>;\n  switchRoom: Record<RoomKey | \"default\", () => void>;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\ntype RoomKey = \"navigation\" | \"about\" | \"projects\";\n\ntype RoomMap = {\n  [key in RoomKey]: Nullable<Room>;\n};\n\ntype RoomAssetsMap = {\n  [key in RoomKey]: RoomAsset;\n};\n\nexport const createRoomController = (): RoomController => {\n  const serviceRegistry = getServiceRegistry();\n  const [storage, logger, eventBusManager, contextManager, stateManager] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n    serviceRegistry.get(\"GlobalStateManager\"),\n  ];\n\n  let loader: Nullable<Loader> = null;\n  let rooms: RoomMap = { navigation: null, about: null, projects: null };\n  let roomAssets: RoomAssetsMap = {\n    navigation: NAVIGATION_ROOM_ASSETS,\n    about: ABOUT_ROOM_ASSETS,\n    projects: PROJECTS_ROOM_ASSETS,\n  };\n  let activeRoom: Nullable<Room> = null;\n  let activeRoomKey: Nullable<RoomKey> = null;\n\n  const initializeLoader = (): void => {\n    try {\n      loader = createLoader({\n        storageManager: storage,\n        stateManager: stateManager,\n        loaderEventBus: eventBusManager.loadingBus,\n        renderer: contextManager.get(\"renderer\")!,\n        scene: contextManager.get(\"scene\")!,\n      });\n      loader?.configure();\n    } catch (err) {\n      throw new Error(\n        `[Gameplay] Couldnt create and initailize the loader due to ${err}`\n      );\n    }\n  };\n\n  const instantiateRoom = (key: RoomKey): Room => {\n    switch (key) {\n      case \"navigation\":\n        rooms[key] = createNavigationRoom(NAVIGATION_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"about\":\n        rooms[key] = createAboutRoom(ABOUT_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"projects\":\n        rooms[key] = createProjectRoom(PROJECTS_ROOM_OPTIONS);\n        return rooms[key]!;\n      default:\n        throw new Error(`Unknown Room key ${key}`);\n    }\n  };\n\n  const loadRoom = async (key: RoomKey) => {\n    if (!loader) return;\n\n    const assets = roomAssets[key];\n    if (!assets)\n      throw new Error(\n        \"[Room Controller] sufficient asset meta data is not given.\"\n      );\n\n    if (!rooms[key]) {\n      const room: Room = instantiateRoom(key);\n\n      console.log(\"load room\", roomAssets[key]);\n\n      const loadItems = [...roomAssets[key].meshes];\n      if (roomAssets[key].hdr) loadItems.push(roomAssets[key].hdr);\n\n      //Load only once\n      await loader.load(loadItems);\n\n      if (room) {\n        room.mount();\n        room.isLoaded = true;\n        activeRoom = room;\n      }\n    }\n  };\n\n  const switchRoom = async (key: RoomKey): Promise<void> => {\n    if (activeRoomKey === key) return;\n\n    if (activeRoomKey != null) {\n      if (rooms[activeRoomKey] != null) rooms[activeRoomKey]!.setDeactive();\n    }\n\n    await loadRoom(key);\n\n    if (rooms[key]) rooms[key].setActive();\n    activeRoomKey = key;\n  };\n\n  const mount = async (): Promise<void> => {\n    logger.onMount({ origin: \"Room Controller\" });\n    initializeLoader();\n    await loader?.load([PLAYER_ASSET]);\n    await loadRoom(\"navigation\");\n    await switchRoom(\"navigation\");\n  };\n\n  const update = (deltaTime: number) => {\n    activeRoom?.update(deltaTime);\n  };\n\n  const unmount = (): void => {\n    loader?.dispose();\n\n    Object.values(rooms).forEach((room) => {\n      room?.unmount();\n    });\n\n    logger.onUnmount({ origin: \"room-controller\" });\n  };\n\n  const transitionRooms = (key: RoomKey) => {\n    eventBusManager.loadingBus.emit({\n      type: \"load:start\",\n      loaded: 0,\n      total: 0,\n      url: \"\",\n    });\n\n    Promise.allSettled([switchRoom(key)]).then(() => {\n      eventBusManager.loadingBus.emit({ type: \"load:complete\" });\n    });\n  };\n\n  const deactivateRoom = () => {\n    if (!activeRoomKey) return;\n\n    activeRoom?.setDeactive();\n  };\n\n  return {\n    mount: mount,\n    switchRoom: {\n      navigation: () => transitionRooms(\"navigation\"),\n      about: () => transitionRooms(\"about\"),\n      projects: () => transitionRooms(\"projects\"),\n      default: () => deactivateRoom(),\n    },\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}