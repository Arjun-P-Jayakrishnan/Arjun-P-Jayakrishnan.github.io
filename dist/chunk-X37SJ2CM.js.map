{"version":3,"sources":["../src/gameplay/gameplay.ts"],"names":["createGameplay","globalState","eventBusManager","getGlobalContext","getThreeJsContext","clock","Clock","state","tempData","isMounted","roomController","createRoomController","inputControllers","getControllers","bind","mount","processPipelineDebugger","e","updateDeltaTime","update","unbind"],"mappings":"mOA2BO,IAAMA,EAAiB,IAAgB,KAEtC,CAAE,WAAA,CAAAC,EAAa,eAAAC,CAAAA,CAAgB,EAAIC,CAAiB,EAAA,CAC1CC,CAAkB,EAAA,KAC5BC,EAAe,IAAIC,KAAAA,CAGrBC,IAAe,CAAE,SAAA,CAAW,CAAE,CAC9BC,CAAAA,CAAAA,CAAqB,CAAE,SAAW,CAAA,CAAE,EACpCC,CAAqB,CAAA,KAAA,CAGrBC,EAAiCC,GAAqB,EAAA,CACtDC,EAAqCC,GAAe,EAAA,CAElDC,EAAO,IAAM,CACjBZ,EAAgB,UAAW,CAAA,EAAA,CACzB,aACAQ,CAAe,CAAA,UAAA,CAAW,KAC5B,CACAR,CAAAA,CAAAA,CAAgB,WAAW,EACzB,CAAA,YAAA,CACAQ,EAAe,UAAW,CAAA,OAC5B,EAEAR,CAAgB,CAAA,UAAA,CAAW,GACzB,cACAQ,CAAAA,CAAAA,CAAe,WAAW,QAC5B,CAAA,CACAR,EAAgB,UAAW,CAAA,EAAA,CACzB,eACAQ,CAAe,CAAA,UAAA,CAAW,OAC5B,CAEAR,CAAAA,CAAAA,CAAgB,WAAW,EACzB,CAAA,WAAA,CACAQ,EAAe,UAAW,CAAA,UAC5B,EACAR,CAAgB,CAAA,UAAA,CAAW,GACzB,WACAQ,CAAAA,CAAAA,CAAe,WAAW,OAC5B,EACF,EAEMK,CAAQ,CAAA,SAA2B,CACnCN,CAEJO,GAAAA,GAAAA,CAAwB,QAAQ,UAAU,CAAA,CAC1CJ,EAAiB,KAAM,CAAA,CACrB,MAAO,CACL,WAAA,CAAa,CACX,GAAK,CAAA,IAAA,CACL,MAAO,IACT,CACF,CACF,CAAC,CAAA,CACD,MAAMF,CAAe,CAAA,KAAA,GACrBI,CAAK,EAAA,CACLL,EAAY,IAEZ,CAAA,MAAA,CAAO,iBAAiB,OAAUQ,CAAAA,CAAAA,EAAM,CACtC,OAAQ,CAAA,GAAA,CAAIA,CAAC,EACf,CAAC,GACH,CAEMC,CAAAA,CAAAA,CAAkB,IAAY,CAClCV,CAAAA,CAAS,UAAYH,CAAM,CAAA,QAAA,GAEvB,CAAC,KAAA,CAAMG,EAAS,SAAS,CAAA,EAAKA,EAAS,SAAc,GAAA,MAAA,GACvDD,IAAM,SAAYC,CAAAA,CAAAA,CAAS,WAE/B,CAEMW,CAAAA,CAAAA,CAAS,IAAM,CACnBD,CAAAA,GAEAR,CAAe,CAAA,MAAA,CAAOH,IAAM,SAAa,EAAA,CAAC,EAC5C,CAEMa,CAUN,OAAO,CACL,KAAA,CAAOL,EACP,MAAQI,CAAAA,CAAAA,CACR,QARc,IAAM,CACpBH,IAAwB,SAAU,CAAA,UAAU,EAE9C,CAMA,CACF","file":"chunk-X37SJ2CM.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { Clock } from \"three\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport {\n  createRoomController,\n  RoomController,\n} from \"./controller/room_controller\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport {\n  ControllerManger,\n  getControllers,\n} from \"graphics/mechanics/controllers/controller\";\n\nexport interface Gameplay {\n  mount: () => Promise<void>;\n  update: () => void;\n  unmount: () => void;\n}\n\ninterface State {\n  deltaTime: number;\n}\n\ninterface TempData {\n  deltaTime: number;\n}\n\nexport const createGameplay = (): Gameplay => {\n  //Global properties\n  const { globalState, eventBusManager } = getGlobalContext();\n  const context = getThreeJsContext();\n  const clock: Clock = new Clock();\n\n  //Re usable state (no re-allocation)\n  let state: State = { deltaTime: 0 };\n  let tempData: TempData = { deltaTime: 0 };\n  let isMounted: boolean = false;\n\n  //Controllers\n  let roomController: RoomController = createRoomController();\n  let inputControllers: ControllerManger = getControllers();\n\n  const bind = () => {\n    eventBusManager.displayBus.on(\n      \"about:show\",\n      roomController.switchRoom[\"about\"]\n    );\n    eventBusManager.displayBus.on(\n      \"about:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"project:show\",\n      roomController.switchRoom[\"projects\"]\n    );\n    eventBusManager.displayBus.on(\n      \"project:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"home:show\",\n      roomController.switchRoom[\"navigation\"]\n    );\n    eventBusManager.displayBus.on(\n      \"home:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n  };\n\n  const mount = async (): Promise<void> => {\n    if (isMounted) return;\n\n    processPipelineDebugger.onMount(\"gameplay\");\n    inputControllers.mount({\n      mouse: {\n        sensitivity: {\n          yaw: 0.005,\n          pitch: 0.000001,\n        },\n      },\n    });\n    await roomController.mount();\n    bind();\n    isMounted = true;\n\n    window.addEventListener(\"keyup\", (e) => {\n      console.log(e);\n    });\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime) && tempData.deltaTime !== undefined) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n\n    roomController.update(state.deltaTime ?? 0);\n  };\n\n  const unbind = () => {\n    // eventBusManager.displayBus.off(\"about:show\", rooms.navigation.setActive);\n    // eventBusManager.displayBus.off(\"about:hide\", rooms.navigation.setDeactive);\n  };\n\n  const unmount = () => {\n    processPipelineDebugger.onUnmount(\"gameplay\");\n    unbind();\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}