{"version":3,"sources":["../src/gameplay/controller/room_controller.ts"],"names":["createRoomController","globalState","eventBusManager","getGlobalContext","context","getThreeJsContext","loader","rooms","roomAssets","NAVIGATION_ROOM_ASSETS","ABOUT_ROOM_ASSETS","PROJECTS_ROOM_ASSETS","activeRoom","activeRoomKey","initializeLoader","createLoader","err","instantiateRoom","key","createNavigationRoom","NAVIGATION_ROOM_OPTIONS","createAboutRoom","ABOUT_ROOM_OPTIONS","createProjectRoom","PROJECTS_ROOM_OPTIONS","loadRoom","room","switchRoom","processPipelineDebugger","mount","PLAYER_ASSET","update","deltaTime","unmount","transitionRooms","deactivateRoom"],"mappings":"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","file":"chunk-D64MIHBI.js","sourcesContent":["import { Nullable } from \"gameplay/lifecycle\";\nimport { createLoader, Loader } from \"core/loader/loader\";\nimport { getGlobalContext } from \"@managers/globalContext\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { createAboutRoom } from \"gameplay/about/room\";\nimport { ABOUT_ROOM_ASSETS, NAVIGATION_ROOM_ASSETS, PLAYER_ANIMATIONS, PLAYER_ASSET, PROJECTS_ROOM_ASSETS, Room, RoomAsset } from \"./room_types\";\nimport { ABOUT_ROOM_OPTIONS, NAVIGATION_ROOM_OPTIONS, PROJECTS_ROOM_OPTIONS } from \"gameplay/controller/configs\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { createNavigationRoom } from \"gameplay/navigation/room\";\nimport { createProjectRoom } from \"gameplay/projects/room\";\n\nexport interface RoomController{\n    mount:()=>Promise<void>;\n    switchRoom:Record< RoomKey|\"default\",()=>void>;\n    update:(deltaTime:number)=>void;\n    unmount:()=>void;\n}\n\ntype RoomKey=\"navigation\"|\"about\"|\"projects\";\n\ntype RoomMap = {\n    [key in RoomKey]: Nullable<Room>;\n};\n\ntype RoomAssetsMap={\n    [key in RoomKey]:RoomAsset\n}\n\nexport const createRoomController=():RoomController=>{\n    const { globalState,eventBusManager } = getGlobalContext();\n    const context=getThreeJsContext();\n\n    let loader: Nullable<Loader> = null;\n    let rooms:RoomMap={\n        navigation:null,\n        about:null,\n        projects:null,\n    }\n    let roomAssets:RoomAssetsMap={\n        navigation:NAVIGATION_ROOM_ASSETS,\n        about:ABOUT_ROOM_ASSETS,\n        projects:PROJECTS_ROOM_ASSETS              \n    }\n    let activeRoom:Nullable<Room>=null;\n    let activeRoomKey:Nullable<RoomKey>=null;\n\n    const initializeLoader=():void=>{\n        try{\n            loader = createLoader(\n                {\n                globalState: globalState,\n                loaderEventBus: eventBusManager.loadingBus,\n                renderer: context.get('renderer'),\n                scene: context.get('scene'),\n                }\n            );\n            loader?.configure();\n        }\n        catch(err){\n            throw new Error(`[Gameplay] Couldnt create and initailize the loader due to ${err}`)\n        }\n    }\n\n    const instantiateRoom=(key:RoomKey):Room=>{\n        switch(key){\n            case 'navigation':\n                rooms[key]=createNavigationRoom(NAVIGATION_ROOM_OPTIONS);\n                return rooms[key];\n            case 'about':\n                rooms[key]=createAboutRoom(ABOUT_ROOM_OPTIONS);\n                return rooms[key];\n            case 'projects':\n                rooms[key]=createProjectRoom(PROJECTS_ROOM_OPTIONS);\n                return rooms[key];\n            default:\n                throw new Error(`Unknown Room key ${key}`)\n        }\n    }\n\n    const loadRoom= async (key: RoomKey)=>{\n        if(!loader) return;\n\n        const assets=roomAssets[key];\n        if(!assets) throw new Error('[Room Controller] sufficient asset meta data is not given.')\n\n        if(!rooms[key]){\n           \n            const room:Room=instantiateRoom(key);\n            \n            //Load only once\n            await loader.load({\n                meshesMetaData:roomAssets[key].meshes,\n                hdrMetaData:roomAssets[key].hdr,\n                animationsMetaData:[]\n            });\n\n            if(room){\n                room.mount();\n                room.isLoaded=true\n                activeRoom=room;\n            }\n        }\n    }\n\n    const switchRoom= async(key:RoomKey):Promise<void>=>{\n        if( activeRoomKey===key) return;\n\n        if(activeRoomKey!=null){\n            console.log('deactivating.........')\n            processPipelineDebugger.onInit('deactivating');\n           \n            if(rooms[activeRoomKey]!=null) rooms[activeRoomKey]!.setDeactive();\n        }\n\n        await loadRoom(key);\n\n        if(rooms[key]) rooms[key].setActive();\n        activeRoomKey=key;\n    }\n\n    const mount= async ():Promise<void>=>{\n        processPipelineDebugger.onMount('room-controller')\n        initializeLoader();\n        await loader?.load({meshesMetaData:[PLAYER_ASSET],animationsMetaData:[]});\n        await loadRoom('navigation');\n        await switchRoom('navigation');\n    }\n\n   \n\n    const update=(deltaTime:number)=>{\n        activeRoom?.update(deltaTime);\n    }\n\n    const unmount=():void=>{\n        loader?.dispose();\n\n        Object.values(rooms).forEach((room)=>{\n            room?.unmount();\n        })\n        \n        processPipelineDebugger.onUnmount('room-controller')\n    }\n\n    const transitionRooms=(key:RoomKey)=>{\n        eventBusManager.loadingBus.emit({type:\"load:start\",loaded:0,total:0,url:\"\"})\n\n        Promise.allSettled([switchRoom(key)]).then(()=>{\n            eventBusManager.loadingBus.emit({type:\"load:complete\"})\n        })\n    }\n\n    const deactivateRoom=()=>{\n        if(!activeRoomKey) return;\n\n        activeRoom?.setDeactive();\n    }\n\n    return {\n        mount:mount,\n        switchRoom:{\n            navigation:()=>transitionRooms('navigation'),\n            about:()=>transitionRooms('about'),\n            projects:()=>transitionRooms('projects'),\n            default:()=>deactivateRoom()\n        },\n        update:update,\n        unmount:unmount\n    }\n}"]}