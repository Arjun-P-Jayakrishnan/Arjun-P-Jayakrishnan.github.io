{"version":3,"sources":["../src/utils/state/globalState.ts"],"sourcesContent":["import { createObservable, Observable } from \"./observable\";\r\n\r\ntype ObservableMap = Record<string, Observable<any>>;\r\n\r\n/**\r\n * Here we map key to state\r\n *\r\n * [key in T i.e string] : U (type extracted from observable)\r\n *\r\n * key : U or never\r\n */\r\ntype ExtractState<T extends ObservableMap> = {\r\n  [K in keyof T]: T[K] extends Observable<infer U> ? U : never;\r\n};\r\n\r\nexport interface GlobalState {\r\n  /**\r\n   *@description populates the state with Initial values\r\n   */\r\n  inflate: () => void;\r\n  /**\r\n   * @description gets the current state\r\n   * @returns the state with fields for the given map\r\n   */\r\n  getState: <T extends ObservableMap>() => ExtractState<T>;\r\n  /**\r\n   * @description updates to the new state\r\n   * @param newState only the part of the state say eg loading state\r\n   */\r\n  setState: <T extends ObservableMap>(newState: Partial<ExtractState<T>>) => void;\r\n  /**\r\n   * @description gets the observable\r\n   * @param key string\r\n   * @returns observable\r\n   */\r\n  getObservable: <K extends keyof ObservableMap>(\r\n    key: K\r\n  ) => Observable<ObservableMap[K]>;\r\n  /**\r\n   *\r\n   * @param key the state to which subscription is taken\r\n   * @param fn the callback function\r\n   * @returns un subscribe function\r\n   */\r\n  subscribe: <K extends keyof ObservableMap>(\r\n    key: K,\r\n    fn: (value: ObservableMap[K]) => void\r\n  ) => () => void;\r\n  /**\r\n   * @description clears up any left over observables\r\n   */\r\n  dispose: () => void;\r\n}\r\n\r\nexport const createGlobalState = <T extends ObservableMap>(\r\n  map: Record<string, any>\r\n): GlobalState => {\r\n  const stateMap: T = {} as T;\r\n  /**\r\n   *@description inflates the state-map with values\r\n   */\r\n  const inflate = () => {\r\n    //createObservable({initial:map[key]})\r\n\r\n    for (const key in map) {\r\n      const observable = createObservable({ initial: map[key] });\r\n      stateMap[key as keyof T] = observable as T[typeof key];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @description gets the state from observables\r\n   * @returns current state\r\n   */\r\n  const getState = <T extends ObservableMap>(): ExtractState<T> => {\r\n    const state = {} as ExtractState<T>;\r\n\r\n    for (const key in stateMap) {\r\n      state[key] = stateMap[key].getValue();\r\n    }\r\n\r\n    return state;\r\n  };\r\n\r\n  /**\r\n   * @description sets the new state\r\n   * @param newState the state which has to be updated\r\n   */\r\n  const setState = <T extends ObservableMap>(newState: Partial<ExtractState<T>>) => {\r\n    for (const key in newState) {\r\n      if (stateMap[key]) {\r\n        stateMap[key].setValue(newState[key]);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @description gets the observable\r\n   * @param key string\r\n   * @returns observable for the key\r\n   */\r\n  const getObservable = <K extends keyof ObservableMap>(\r\n    key: K\r\n  ): Observable<ObservableMap[K]> => {\r\n    return stateMap[key];\r\n  };\r\n\r\n  /***\r\n   * @description subscribe to underlying observable\r\n   */\r\n  const subscribe = <K extends keyof ObservableMap>(\r\n    key: K,\r\n    fn: (value: T[K]) => void\r\n  ) => {\r\n    return stateMap[key].subscribeToChanges(fn);\r\n  };\r\n\r\n  /**\r\n   * dispose off any unwanted observables if any is left behind\r\n   */\r\n  const dispose = () => {\r\n    for (const key in stateMap) {\r\n      stateMap[key].dispose();\r\n    }\r\n  };\r\n\r\n  return Object.freeze({\r\n    inflate: inflate,\r\n    getState: getState,\r\n    setState: setState,\r\n    getObservable: getObservable,\r\n    subscribe: subscribe,\r\n    dispose: dispose,\r\n  });\r\n};\r\n"],"mappings":";;;;;AAsDO,IAAM,oBAAoB,CAC/B,QACgB;AAChB,QAAM,WAAc,CAAC;AAIrB,QAAM,UAAU,MAAM;AAGpB,eAAW,OAAO,KAAK;AACrB,YAAM,aAAa,iBAAiB,EAAE,SAAS,IAAI,GAAG,EAAE,CAAC;AACzD,eAAS,GAAc,IAAI;AAAA,IAC7B;AAAA,EACF;AAMA,QAAM,WAAW,MAAgD;AAC/D,UAAM,QAAQ,CAAC;AAEf,eAAW,OAAO,UAAU;AAC1B,YAAM,GAAG,IAAI,SAAS,GAAG,EAAE,SAAS;AAAA,IACtC;AAEA,WAAO;AAAA,EACT;AAMA,QAAM,WAAW,CAA0B,aAAuC;AAChF,eAAW,OAAO,UAAU;AAC1B,UAAI,SAAS,GAAG,GAAG;AACjB,iBAAS,GAAG,EAAE,SAAS,SAAS,GAAG,CAAC;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AAOA,QAAM,gBAAgB,CACpB,QACiC;AACjC,WAAO,SAAS,GAAG;AAAA,EACrB;AAKA,QAAM,YAAY,CAChB,KACA,OACG;AACH,WAAO,SAAS,GAAG,EAAE,mBAAmB,EAAE;AAAA,EAC5C;AAKA,QAAM,UAAU,MAAM;AACpB,eAAW,OAAO,UAAU;AAC1B,eAAS,GAAG,EAAE,QAAQ;AAAA,IACxB;AAAA,EACF;AAEA,SAAO,OAAO,OAAO;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;","names":[]}