{"version":3,"sources":["../src/gameplay/RoomManager.ts"],"names":["createRoomController","serviceRegistry","getServiceRegistry","storage","logger","eventBusManager","contextManager","stateManager","loader","rooms","roomAssets","NAVIGATION_ROOM_ASSETS","ABOUT_ROOM_ASSETS","PROJECTS_ROOM_ASSETS","activeRoom","activeRoomKey","initializeLoader","createLoader","err","instantiateRoom","key","createNavigationRoom","NAVIGATION_ROOM_OPTIONS","createAboutRoom","ABOUT_ROOM_OPTIONS","createProjectRoom","PROJECTS_ROOM_OPTIONS","loadRoom","room","loadItems","switchRoom","mount","PLAYER_ASSET","update","deltaTime","unmount","transitionRooms","deactivateRoom"],"mappings":"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","file":"chunk-IEYGABJH.js","sourcesContent":["import {\n  ABOUT_ROOM_ASSETS,\n  NAVIGATION_ROOM_ASSETS,\n  PLAYER_ASSET,\n  PROJECTS_ROOM_ASSETS,\n} from \"config/asset_manifest\";\nimport {\n  ABOUT_ROOM_OPTIONS,\n  NAVIGATION_ROOM_OPTIONS,\n  PROJECTS_ROOM_OPTIONS,\n} from \"config/rooms\";\nimport { createLoader, Loader } from \"engine/core/LoadingManager\";\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { createAboutRoom } from \"gameplay/rooms/about/room\";\nimport { createNavigationRoom } from \"gameplay/rooms/navigation/room\";\nimport { createProjectRoom } from \"gameplay/rooms/projects/room\";\nimport { Room, RoomAsset } from \"types/rooms.types\";\n\nexport interface RoomController {\n  mount: () => Promise<void>;\n  switchRoom: Record<RoomKey | \"default\", () => void>;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\ntype RoomKey = \"navigation\" | \"about\" | \"projects\";\n\ntype RoomMap = {\n  [key in RoomKey]: Nullable<Room>;\n};\n\ntype RoomAssetsMap = {\n  [key in RoomKey]: RoomAsset;\n};\n\nexport const createRoomController = (): RoomController => {\n  const serviceRegistry = getServiceRegistry();\n  const [storage, logger, eventBusManager, contextManager, stateManager] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n    serviceRegistry.get(\"GlobalStateManager\"),\n  ];\n\n  let loader: Nullable<Loader> = null;\n  let rooms: RoomMap = { navigation: null, about: null, projects: null };\n  let roomAssets: RoomAssetsMap = {\n    navigation: NAVIGATION_ROOM_ASSETS,\n    about: ABOUT_ROOM_ASSETS,\n    projects: PROJECTS_ROOM_ASSETS,\n  };\n  let activeRoom: Nullable<Room> = null;\n  let activeRoomKey: Nullable<RoomKey> = null;\n\n  const initializeLoader = (): void => {\n    try {\n      loader = createLoader({\n        storageManager: storage,\n        stateManager: stateManager,\n        loaderEventBus: eventBusManager.loadingBus,\n        renderer: contextManager.get(\"renderer\")!,\n        scene: contextManager.get(\"scene\")!,\n      });\n      loader?.configure();\n    } catch (err) {\n      throw new Error(\n        `[Gameplay] Couldnt create and initailize the loader due to ${err}`\n      );\n    }\n  };\n\n  const instantiateRoom = (key: RoomKey): Room => {\n    switch (key) {\n      case \"navigation\":\n        rooms[key] = createNavigationRoom(NAVIGATION_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"about\":\n        rooms[key] = createAboutRoom(ABOUT_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"projects\":\n        rooms[key] = createProjectRoom(PROJECTS_ROOM_OPTIONS);\n        return rooms[key]!;\n      default:\n        throw new Error(`Unknown Room key ${key}`);\n    }\n  };\n\n  const loadRoom = async (key: RoomKey) => {\n    if (!loader) return;\n\n    const assets = roomAssets[key];\n    if (!assets)\n      throw new Error(\n        \"[Room Controller] sufficient asset meta data is not given.\"\n      );\n\n    if (!rooms[key]) {\n      const room: Room = instantiateRoom(key);\n\n      console.log(\"load room\", roomAssets[key]);\n\n      const loadItems = [...roomAssets[key].meshes];\n      if (roomAssets[key].hdr) loadItems.push(roomAssets[key].hdr);\n\n      //Load only once\n      await loader.load(loadItems);\n\n      if (room) {\n        room.mount();\n        room.isLoaded = true;\n        activeRoom = room;\n      }\n    }\n  };\n\n  const switchRoom = async (key: RoomKey): Promise<void> => {\n    if (activeRoomKey === key) return;\n    eventBusManager.loadingBus.emit({\n      type: \"load:start\",\n      loaded: 0,\n      total: 0,\n      url: \"\",\n    });\n\n    if (activeRoomKey != null) {\n      if (rooms[activeRoomKey] != null) rooms[activeRoomKey]!.setDeactive();\n    }\n\n    await loadRoom(key);\n\n    if (rooms[key]) rooms[key].setActive();\n    activeRoomKey = key;\n\n    eventBusManager.loadingBus.emit({ type: \"load:complete\" });\n  };\n\n  const mount = async (): Promise<void> => {\n    logger.onMount({ origin: \"Room Controller\" });\n    initializeLoader();\n    await loader?.load([PLAYER_ASSET]);\n    await loadRoom(\"navigation\");\n    await switchRoom(\"navigation\");\n  };\n\n  const update = (deltaTime: number) => {\n    activeRoom?.update(deltaTime);\n  };\n\n  const unmount = (): void => {\n    loader?.dispose();\n\n    Object.values(rooms).forEach((room) => {\n      room?.unmount();\n    });\n\n    logger.onUnmount({ origin: \"room-controller\" });\n  };\n\n  const transitionRooms = (key: RoomKey) => {\n    eventBusManager.loadingBus.emit({\n      type: \"load:start\",\n      loaded: 0,\n      total: 0,\n      url: \"\",\n    });\n\n    Promise.allSettled([switchRoom(key)]).then(() => {\n      eventBusManager.loadingBus.emit({ type: \"load:complete\" });\n    });\n  };\n\n  const deactivateRoom = () => {\n    if (!activeRoomKey) return;\n\n    activeRoom?.setDeactive();\n  };\n\n  return {\n    mount: mount,\n    switchRoom: {\n      navigation: () => transitionRooms(\"navigation\"),\n      about: () => transitionRooms(\"about\"),\n      projects: () => transitionRooms(\"projects\"),\n      default: () => deactivateRoom(),\n    },\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}