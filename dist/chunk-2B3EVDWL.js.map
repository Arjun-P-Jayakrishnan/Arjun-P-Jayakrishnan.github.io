{"version":3,"sources":["../src/gameplay/projects/player.ts"],"names":["createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","contextManager","getThreeJsContext","state","Vector3","objects","animations","mixers","castShadow","player","child","processPipelineDebugger","playerRoot","mixer","AnimationMixer","err","deltaTime"],"mappings":"8JAuDO,IAAMA,EAAgBC,CAA+B,EAAA,KACpD,CAAE,eAAA,CAAAC,EAAiB,WAAAC,CAAAA,CAAAA,CAAa,cAAAC,CAAc,CAAA,CAAIC,GAClDC,CAAiBC,GAEnBC,EACqB,CAAE,cAAgB,CAAA,IAAIC,QAAQ,CAAG,CAAA,CAAA,CAAG,CAAC,CAAE,EAAA,KAG5DC,CACAC,CACAC,IAA2B,EAAC,CAE1BC,EAAcC,CAAuC,EAAA,CACzDA,EAAO,QAAUC,CAAAA,CAAAA,EAAU,CACzBA,CAAM,CAAA,UAAA,CAAa,KACrB,CAAC,EACH,EAiDA,OAAO,CACL,MAhDY,IAAM,CAClB,GAAI,CACFC,GAAAA,CAAwB,QAAQ,mBAAmB,CAAA,CACnD,IAAIC,CAAab,CAAAA,CAAAA,CACd,WAAW,QAAQ,CAAA,CACnB,SAAS,QAAQ,CAAA,EAAG,OACnBO,CACFP,CAAAA,CAAAA,CAAc,WAAW,QAAQ,CAAA,CAAE,SAAS,QAAQ,CAAA,EAAG,YAAc,EAAC,CAExE,GAAI,CAACa,CAAAA,CACH,MAAM,IAAI,KAAA,CAAM,mCAAmChB,CAAM,CAAA,UAAU,EAAE,CAEvE,CAAA,OAAA,CAAQ,IAAI,QAAUgB,CAAAA,CAAU,EAChC,OAAQ,CAAA,GAAA,CAAI,oBAAqBN,CAAU,CAAA,CAE3CD,EAAU,CACR,UAAA,CAAYO,CACd,CAGA,CAAA,IAAMC,EAAQ,IAAIC,cAAAA,CAAeF,CAAU,CAC3CC,CAAAA,CAAAA,CAAM,WAAWP,CAAW,CAAA,CAAC,CAAC,CAAE,CAAA,IAAA,GAEhCC,GAAO,CAAA,IAAA,CAAKM,CAAK,EACnB,CAAA,MAASE,EAAK,CACZ,OAAA,CAAQ,MAAM,CAAiCA,8BAAAA,EAAAA,CAAG,EAAE,EACtD,CACF,EAsBE,QApBe,CAAA,IAAM,CACjBV,CAAQ,CAAA,UAAA,GACVA,EAAQ,UAAW,CAAA,QAAA,CAAS,IAAI,CAAG,CAAA,CAAA,CAAG,EAAG,KAAK,CAAA,CAC9CA,EAAQ,UAAW,CAAA,UAAA,CAAa,KAChCG,CAAWH,CAAAA,CAAAA,CAAQ,UAAU,CAEjC,EAAA,CAAA,CAeE,OAbcW,CAAsB,EAAA,CACpCT,IAAO,OAASM,CAAAA,CAAAA,EAAU,CACxBA,CAAM,CAAA,MAAA,CAAOG,CAAS,EACxB,CAAC,EACH,CAUE,CAAA,UAAA,CARiB,IAAM,EAAC,CASxB,QAPc,IAAM,EAQtB,CACF","file":"chunk-2B3EVDWL.js","sourcesContent":["import { getGlobalContext } from \"@managers/globalContext\";\nimport { Nullable } from \"@utils/types\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { getControllers } from \"graphics/mechanics/controllers/controller\";\nimport { KeyboardController } from \"graphics/mechanics/controllers/plugins/keyboard\";\nimport { MouseController } from \"graphics/mechanics/controllers/plugins/mouse\";\nimport {\n  AnimationMixer,\n  Bone,\n  Euler,\n  Group,\n  Mesh,\n  Object3D,\n  Object3DEventMap,\n  Scene,\n  Vector3,\n} from \"three\";\n\nexport interface PlayerProps {\n  storageId: string;\n  rootMeshId: string;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {};\n  let tempData: TempData = { inputDirection: new Vector3(0, 0, 0) };\n  let inputs: Nullable<MouseController>;\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n  let mixers: AnimationMixer[] = [];\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      processPipelineDebugger.onMount(\"about-room-player\");\n      let playerRoot = globalStorage\n        .getStorage(\"player\")\n        .retrieve(\"player\")?.groups;\n      let animations =\n        globalStorage.getStorage(\"player\").retrieve(\"player\")?.animations ?? [];\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${props.rootMeshId}`);\n      }\n      console.log(\"player\", playerRoot);\n      console.log(\"animations loaded\", animations);\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      // console.log('armature',armature)\n      const mixer = new AnimationMixer(playerRoot);\n      mixer.clipAction(animations[2]).play();\n\n      mixers.push(mixer);\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, 0, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n    }\n  };\n\n  const update = (deltaTime: number) => {\n    mixers.forEach((mixer) => {\n      mixer.update(deltaTime);\n    });\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n"]}