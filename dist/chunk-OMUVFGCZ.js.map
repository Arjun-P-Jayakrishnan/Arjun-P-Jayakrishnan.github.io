{"version":3,"sources":["../src/components/navbar/navbar.ts"],"names":["template","Navbar","nextState","clone","getServiceRegistry","NavigationPage","navigationPage","eventBusManager"],"mappings":"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","file":"chunk-OMUVFGCZ.js","sourcesContent":["import { EventBus } from \"@events/eventBus\";\nimport { EventBusManager } from \"@events/EventBusManager\";\nimport { Logger } from \"@utils/Logger\";\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { NavigationEvents, ViewEvents } from \"types/event.types\";\nimport { Nullable } from \"types/generic.types\";\nimport { NavigationPage } from \"./pages\";\n\nconst template = document.createElement(\"template\");\n\ntemplate.innerHTML = `\n  <link\n      rel=\"stylesheet\"\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css\"\n    />\n  <link rel=\"stylesheet\" href=\"/style/navbar.css\">\n  <nav class=\"navbar\" id=\"main-nav\">\n      <div class=\"logo\"><img src=\"/assets/images/logo.png\" aria-label=\"Logo\" width=\"1em\" height=\"1em\"/></div>\n      <button class=\"toggle-btn\" aria-expanded=\"false\" aria-controls=\"main-nav\">&#9776</button>\n  </nav>\n`;\n\ntype TabKeys = \"home\" | \"about\" | \"projects\" | \"contact\";\ntype BusHandler = Record<\n  `${TabKeys}:show` | `${TabKeys}:hide`,\n  (e: NavigationEvents) => void\n>;\n\ninterface State {\n  activeTab: TabKeys;\n}\n\ninterface Components {\n  toggleBtn: Nullable<HTMLElement>;\n  navRoot: Nullable<HTMLElement>;\n  navigationPage: Nullable<NavigationPage>;\n}\n\nexport class Navbar extends HTMLElement {\n  //State\n  private state: State;\n  private displayEventBus: EventBus<NavigationEvents> | null = null;\n  private viewEventBus: EventBus<ViewEvents> | null = null;\n  private components: Components;\n  private root: ShadowRoot;\n  private logger: Logger;\n\n  constructor() {\n    super();\n    this.root = this.attachShadow({ mode: \"open\" });\n    const clone = template.content.cloneNode(true);\n    this.root.appendChild(clone);\n\n    this.state = {\n      activeTab: \"home\",\n    };\n\n    this.components = {\n      navRoot: null,\n      toggleBtn: null,\n      navigationPage: null,\n    };\n\n    this.queryElements();\n\n    this.logger = getServiceRegistry().get(\"Logger\");\n    this.logger.onLoad({ origin: \"Navbar\" });\n\n    customElements.define(\"navigation-page\", NavigationPage);\n    const navigationPage = document.createElement(\"navigation-page\");\n    this.components.navRoot?.appendChild(navigationPage);\n    this.components.navigationPage = navigationPage as NavigationPage;\n  }\n\n  static get observedAttributes() {\n    return [];\n  }\n\n  /**\n   * @description called when the component is mounted\n   */\n  connectedCallback() {\n    this.bindEvents();\n    this.setupBusListeners();\n  }\n\n  /**\n   * @description called when component is un mounted\n   */\n  disconnectedCallback() {\n    this.unBindEvents();\n    this.disposeBusListeners();\n  }\n\n  queryElements() {\n    this.components.toggleBtn = this.root.querySelector(\".toggle-btn\");\n    this.components.navRoot = this.root.querySelector(\".navbar\");\n  }\n\n  bindEvents() {\n    this.components.toggleBtn?.addEventListener(\"click\", this.onToggleClick);\n  }\n\n  unBindEvents() {\n    this.components.toggleBtn?.removeEventListener(\"click\", this.onToggleClick);\n  }\n\n  /***\n   * @description on Click handler for hamburger menu closing or opening\n   */\n  toggleHamburgerMenu = (): void => {\n    console.log(this.components.navigationPage);\n    if (!this.components.navigationPage) return;\n\n    const isOpen =\n      this.components.navigationPage.getAttribute(\"aria-expanded\") === \"true\";\n    const nextState = !isOpen;\n\n    this.components.navigationPage.setAttribute(\n      \"aria-expanded\",\n      String(nextState)\n    );\n    this.components?.toggleBtn?.setAttribute(\n      \"aria-expanded\",\n      String(nextState)\n    );\n  };\n\n  private onToggleClick = (e: Event) => this.toggleHamburgerMenu();\n\n  private openNavigationPages = () => () => {\n    this.components.navigationPage?.classList.remove(\"hidden\");\n  };\n\n  private closeNavigationPage = () => {\n    this.components.navigationPage?.classList.add(\"hidden\");\n  };\n\n  setupBusListeners = () => {\n    if (!this.displayEventBus) return;\n\n    this.viewEventBus?.on(\"project-screen:show\", this.openNavigationPages);\n\n    this.viewEventBus?.on(\"project-screen:hide\", this.closeNavigationPage);\n  };\n\n  disposeBusListeners = () => {\n    if (!this.displayEventBus) return;\n  };\n\n  set eventBusManager(eventBusManager: EventBusManager) {\n    this.displayEventBus = eventBusManager.displayBus;\n    this.viewEventBus = eventBusManager.viewBus;\n\n    if (this.components.navigationPage) {\n      this.components.navigationPage!.eventBusManager = eventBusManager;\n    }\n  }\n}\n"]}