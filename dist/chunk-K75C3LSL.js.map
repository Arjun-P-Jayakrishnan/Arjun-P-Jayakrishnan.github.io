{"version":3,"sources":["../src/graphics/gameplay/modules/player.ts"],"names":["PLAYER_CONSTANTS","createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","contextManager","getThreeJsContext","state","Vector3","tempData","inputs","objects","animations","create","playerRoot","AnimationMixer","getControllers","err","updateMouse","mouse","camera","updateKeyboard","deltaTime","VELOCITY_DEADZONE","inputDirection","decay","FRICTION","updateControllers","rotation","updateAnimation"],"mappings":"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","file":"chunk-K75C3LSL.js","sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\nimport { getThreeJsContext } from \"graphics/internal/context\";\nimport { AnimationMixer, Euler, Object3D, Scene, Vector3 } from \"three\";\nimport { getControllers } from \"../controllers/controller\";\nimport { KeyboardController } from \"../controllers/plugins/keyboard\";\nimport { MouseController } from \"../controllers/plugins/mouse\";\n\nexport interface PlayerProps {\n  ids: {\n    rootMesh: string;\n  };\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  create: () => void;\n  update: (\n    deltaTime: number,\n    rotation: {\n      yaw: number;\n      pitch: number;\n    },\n    camera: {\n      rotation: Euler;\n    }\n  ) => {\n    position: Vector3;\n    rotation: Euler;\n  };\n  destroy: () => void;\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n  let inputs: {\n    mouse: MouseController | null;\n    keyboard: KeyboardController | null;\n  } = {\n    mouse: null,\n    keyboard: null,\n  };\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const create = () => {\n    try {\n      let playerRoot = contextManager\n        .getProperty(\"scene\")\n        .getObjectByName(props.ids.rootMesh);\n\n      // const playerRoot=scene.getObjectByName(props.ids.rootMesh) as Object3D;\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${props.ids.rootMesh}`\n        );\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n\n      inputs = {\n        mouse: getControllers().getController(\"mouse\"),\n        keyboard: getControllers().getController(\"keyboard\"),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (\n    mouse: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    state.rotationApplied = mouse;\n    objects.playerRoot.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (deltaTime: number) => {\n    if (!inputs.keyboard) return;\n    const FRICTION = 5.0;\n    const VELOCITY_DEADZONE = 0.001;\n\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (inputs.keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n    if (inputs.keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n    if (inputs.keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n    if (inputs.keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n    if (inputDirection.length() > 0) {\n      //normalize direction\n      inputDirection.applyQuaternion(objects.playerRoot.quaternion);\n      inputDirection.normalize();\n\n      //accelerate towards the direction\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n      //ensure the velocity doesn't go over the threshold\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n      const decay = Math.exp(-FRICTION * deltaTime);\n      state.velocity.multiplyScalar(decay);\n\n      if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n        state.velocity.set(0, 0, 0);\n      }\n    }\n\n    objects.playerRoot.position.add(state.velocity);\n  };\n\n  const updateControllers = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    updateMouse(rotation, camera);\n    updateKeyboard(deltaTime);\n  };\n\n  const updateAnimation = (deltaTime: number) => {\n    animations.mixer!.update(deltaTime);\n  };\n\n  const update = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    if (animations.mixer) {\n      updateAnimation(deltaTime);\n    }\n\n    updateControllers(deltaTime, rotation, camera);\n\n    return {\n      position: objects.playerRoot.position,\n      rotation: objects.playerRoot.rotation,\n    };\n  };\n\n  const destroy = () => {\n    try {\n      objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    create: create,\n    update: update,\n    destroy: destroy,\n  };\n};\n"]}