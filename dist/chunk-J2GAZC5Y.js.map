{"version":3,"sources":["../src/gameplay/projects/room.ts"],"names":["createProjectRoom","props","globalStorage","getGlobalContext","context","getThreeJsContext","scene","camera","orbit","components","createCameraManager","createPlayer","createGround","createLighting","group","processPipelineDebugger","deltaTime"],"mappings":"+RAyBaA,IAAAA,CAAAA,CAAqBC,GAAkC,CAElE,GAAM,CAAC,aAAAC,CAAAA,CAAa,EAAEC,CAAiB,EAAA,CACjCC,EAA8BC,CAAkB,EAAA,CAChD,CAAE,KAAAC,CAAAA,CAAAA,CAAO,OAAAC,CAAO,CAAA,KAAA,CAAAC,CAAM,CAAI,CAAA,CAAE,MAAOJ,CAAQ,CAAA,GAAA,CAAI,OAAO,CAAG,CAAA,MAAA,CAAQA,EAAQ,GAAI,CAAA,QAAQ,EAAE,KAAMA,CAAAA,CAAAA,CAAQ,IAAI,OAAO,CAAC,EAKjHK,CAAyB,CAAA,CAC7B,OAAQC,GAAoB,CAAA,CAAE,MAAQH,CAAAA,CAAAA,CAAQ,KAAOD,CAAAA,CAAAA,CAAM,MAAME,CAAK,CAAC,EACvE,MAAOG,CAAAA,GAAAA,CAAaV,EAAM,MAAM,CAAA,CAChC,OAAOW,GAAaX,CAAAA,CAAAA,CAAM,MAAM,CAChC,CAAA,QAAA,CAASY,KACX,CAAA,CACIC,EAAwC,IA8C5C,CAAA,OAAO,CACL,KA7CY,CAAA,IAAM,CAClBC,GAAwB,CAAA,OAAA,CAAQ,eAAe,CAC/CN,CAAAA,CAAAA,CAAW,OAAO,KAAM,EAAA,CACxBA,EAAW,MAAO,CAAA,KAAA,GAClBA,CAAW,CAAA,MAAA,CAAO,OAClBA,CAAAA,CAAAA,CAAW,SAAS,KAAM,EAAA,CAE1BK,CAAMZ,CAAAA,CAAAA,CAAc,UAAWD,CAAAA,CAAAA,CAAM,SAAS,CAAE,CAAA,QAAA,CAASA,EAAM,SAAS,CAAA,EAAG,QAAU,KACvF,CAAA,CAsCE,UApCe,IAAM,CAClBa,IAAOA,CAAM,CAAA,OAAA,CAAQ,MAExBC,GAAwB,CAAA,MAAA,CAAO,oBAAoB,CACnDN,CAAAA,CAAAA,CAAW,OAAO,QAAS,EAAA,CAC3BA,EAAW,MAAO,CAAA,QAAA,GAClBA,CAAW,CAAA,QAAA,CAAS,UACpBA,CAAAA,CAAAA,CAAW,OAAO,QAAS,GAE7B,EA4BE,MA1BcO,CAAAA,CAAAA,EAAsB,CAEpCP,CAAW,CAAA,MAAA,CAAO,OAAOO,CAAS,CAAA,CAClCP,CAAW,CAAA,MAAA,CAAO,MAAOO,CAAAA,CAAS,EAEpC,CAsBE,CAAA,WAAA,CApBiB,IAAM,CACpBF,CAAAA,GAAOA,EAAM,OAAQ,CAAA,KAAA,CAAA,CAExBL,EAAW,MAAO,CAAA,UAAA,GAClBA,CAAW,CAAA,MAAA,CAAO,YAClBA,CAAAA,CAAAA,CAAW,SAAS,UAAW,EAAA,CAC/BA,CAAW,CAAA,MAAA,CAAO,UAAW,GAC/B,EAcE,OAZc,CAAA,IAAM,CACpBA,CAAW,CAAA,MAAA,CAAO,SAClBA,CAAAA,CAAAA,CAAW,OAAO,OAAQ,EAAA,CAC1BA,EAAW,QAAS,CAAA,OAAA,GACpBA,CAAW,CAAA,MAAA,CAAO,UACpB,CAAA,CAQE,QAAS,CAAA,KACX,CACF","file":"chunk-J2GAZC5Y.js","sourcesContent":["\nimport { getThreeJsContext, ThreeJsContextManager } from \"core/game_engine/game_context\";\nimport {  CameraManager, createCameraManager,  } from \"./camera\";\nimport { Room } from \"gameplay/controller/room_types\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { createPlayer, Player, PlayerProps } from \"./player\";\nimport { createGround, Ground, GroundProps } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { getGlobalContext } from \"@managers/globalContext\";\nimport { Nullable } from \"core/lifecyle\";\nimport { Group, Object3DEventMap } from \"three\";\n\nexport interface ProjectRoomProps {\n  storageId:string;\n  player:PlayerProps\n  ground:GroundProps\n}\n\ninterface Components {\n  camera: CameraManager;\n  player:Player;\n  ground:Ground;\n  lighting:Lighting;\n}\n\nexport const createProjectRoom = (props: ProjectRoomProps): Room => {\n  //====References===\n  const {globalStorage}=getGlobalContext();\n  const context:ThreeJsContextManager=getThreeJsContext();\n  const { scene, camera,orbit } = { scene: context.get(\"scene\"), camera: context.get(\"camera\"),orbit:context.get('orbit')};\n\n\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({ camera: camera, scene: scene,orbit:orbit}),\n    player:createPlayer(props.player),\n    ground:createGround(props.ground),\n    lighting:createLighting()\n  };\n  let group:Nullable<Group<Object3DEventMap>>=null;\n\n  const mount = () => {\n    processPipelineDebugger.onMount('projects-room')\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n   \n    group=globalStorage.getStorage(props.storageId).retrieve(props.storageId)?.groups ?? null;\n  };\n\n  const activate = () => {\n    if(group) group.visible=true\n\n    processPipelineDebugger.onInit('projects-room-init')\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n    \n  };\n\n  const update = (deltaTime: number) => {\n    // components.camera.update(deltaTime);\n    components.player.update(deltaTime);\n    components.camera.update(deltaTime)\n    //orbit.update();\n  };\n\n  const deactivate = () => {\n    if(group) group.visible=false\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded:false\n  };\n};\n"]}