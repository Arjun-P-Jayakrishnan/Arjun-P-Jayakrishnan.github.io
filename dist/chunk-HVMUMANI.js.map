{"version":3,"sources":["../src/gameplay/rooms/projects/player.ts"],"names":["createPlayer","logger","reference","storage","objects","mixers","castShadow","player","child","playerRoot","animations","mixer","AnimationMixer","err","deltaTime"],"mappings":"mCA2BaA,IAAAA,CAAAA,CAAe,CAAC,CAC3B,MAAA,CAAAC,CACA,CAAA,SAAA,CAAAC,EACA,OAAAC,CAAAA,CACF,CAA2B,GAAA,CACzB,IAAIC,CACAC,CAAAA,CAAAA,CAA2B,EAAC,CAE1BC,EAAcC,CAAuC,EAAA,CACzDA,CAAO,CAAA,QAAA,CAAUC,GAAU,CACzBA,CAAAA,CAAM,UAAa,CAAA,KACrB,CAAC,EACH,CAAA,CAmDA,OAAO,CACL,KAAA,CAlDY,IAAM,CAClB,GAAI,CACF,IAAIC,EAAaN,CACd,CAAA,UAAA,CAAW,OAAO,CAAA,CAClB,SAASD,CAAU,CAAA,SAAS,CAAG,EAAA,MAAA,CAC9BQ,EACFP,CAAQ,CAAA,UAAA,CAAW,OAAO,CAAA,CAAE,SAASD,CAAU,CAAA,SAAS,CAAG,EAAA,UAAA,EAC3D,EAEF,CAAA,GAAI,CAACO,CAAAA,CACH,MAAM,IAAI,KAAA,CACR,CAAmCP,gCAAAA,EAAAA,CAAAA,CAAU,SAAS,CACxD,CAAA,CAAA,CAIFE,EAAU,CACR,UAAA,CAAYK,CACd,CAGA,CAAA,IAAME,CAAQ,CAAA,IAAIC,eAAeH,CAAU,CAAA,CAC3CE,CAAM,CAAA,UAAA,CAAWD,EAAW,CAAC,CAAC,CAAE,CAAA,IAAA,GAEhCL,CAAO,CAAA,IAAA,CAAKM,CAAK,CAAA,CACjBV,EAAO,OAAQ,CAAA,CAAE,MAAQ,CAAA,qBAAsB,CAAC,EAClD,CAAA,MAASY,CAAK,CAAA,CACZ,QAAQ,KAAM,CAAA,CAAA,8BAAA,EAAiCA,CAAG,CAAA,CAAE,EACtD,CACF,CAAA,CAsBE,SApBe,IAAM,CACjBT,EAAQ,UACVA,GAAAA,CAAAA,CAAQ,UAAW,CAAA,QAAA,CAAS,IAAI,CAAG,CAAA,CAAA,CAAG,CAAG,CAAA,KAAK,EAC9CA,CAAQ,CAAA,UAAA,CAAW,UAAa,CAAA,IAAA,CAChCE,EAAWF,CAAQ,CAAA,UAAU,CAEjC,EAAA,CAAA,CAeE,OAbcU,CAAsB,EAAA,CACpCT,CAAO,CAAA,OAAA,CAASM,GAAU,CACxBA,CAAAA,CAAM,MAAOG,CAAAA,CAAS,EACxB,CAAC,EACH,CAUE,CAAA,UAAA,CARiB,IAAM,EAAC,CASxB,QAPc,IAAM,EAQtB,CACF","file":"chunk-HVMUMANI.js","sourcesContent":["import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { AnimationMixer, Object3D, Object3DEventMap, Scene } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  logger: Logger;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\nexport const createPlayer = ({\n  logger,\n  reference,\n  storage,\n}: PlayerProps): Player => {\n  let objects: ObjectReferences;\n  let mixers: AnimationMixer[] = [];\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      let playerRoot = storage\n        .getStorage(\"model\")\n        .retrieve(reference.storageId)?.groups;\n      let animations =\n        storage.getStorage(\"model\").retrieve(reference.storageId)?.animations ??\n        [];\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${reference.storageId}`\n        );\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      // console.log('armature',armature)\n      const mixer = new AnimationMixer(playerRoot);\n      mixer.clipAction(animations[2]).play();\n\n      mixers.push(mixer);\n      logger.onMount({ origin: \"Project-Room-Player\" });\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, 0, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n    }\n  };\n\n  const update = (deltaTime: number) => {\n    mixers.forEach((mixer) => {\n      mixer.update(deltaTime);\n    });\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n"]}