{"version":3,"sources":["../src/gameplay/navigation/ground.ts"],"names":["createGround","props","ground","globalStorage","getGlobalContext","contextManager","getThreeJsContext","gridMat","createGridMaterial","processPipelineDebugger"],"mappings":"qKAuBaA,IAAAA,CAAAA,CAAgBC,GAA+B,CAC1D,IAAIC,EAAyB,IACzB,CAAA,CAAE,aAAAC,CAAAA,CAAc,CAAIC,CAAAA,GAAAA,GACpBC,CAAiBC,CAAAA,CAAAA,GAEjBC,CAAkC,CAAA,IAAA,CAkCtC,OAAO,CACL,KAAA,CAjCY,IAAM,CAOlB,GANAL,CAAAA,CACGC,EACE,UAAWF,CAAAA,CAAAA,CAAM,SAAS,CAC1B,CAAA,QAAA,CAASA,EAAM,SAAS,CAAA,EACvB,MAAO,CAAA,eAAA,CAAgBA,CAAM,CAAA,QAAQ,GAAc,IAErD,CAAA,CAACC,CAAQ,CAAA,CACX,OAAQ,CAAA,KAAA,CAAM,sCAAsCD,CAAM,CAAA,QAAQ,CAAE,CAAA,CAAA,CACpE,MACF,CAEAM,EAAUC,GAAmB,CAAA,CAC3B,OAAQH,CAAe,CAAA,GAAA,CAAI,QAAQ,CACnC,CAAA,QAAA,CAAU,EACV,CAAA,OAAA,CAAS,CACX,CAAC,EAEDH,CAAO,CAAA,QAAA,CAAWK,CAAQ,CAAA,GAAA,CAC1BE,GAAwB,CAAA,OAAA,CAAQ,mBAAmB,CACnD,CAAA,OAAA,CAAQ,GAAIP,CAAAA,CAAAA,CAAQK,CAAO,EAC7B,EAaE,MAXa,CAAA,IAAM,CACnBA,CAAS,EAAA,MAAA,CAAOF,EAAe,GAAI,CAAA,QAAQ,CAAE,CAAA,QAAQ,EACvD,CAAA,CAUE,SARe,IAAM,EASrB,CAAA,UAAA,CARiB,IAAM,GASvB,OAPc,CAAA,IAAM,EAQtB,CACF","file":"chunk-KZLICZGK.js","sourcesContent":["import { getGlobalContext } from \"@managers/globalContext\";\nimport { Nullable } from \"@utils/types/lifecycle\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport {\n  createGridMaterial,\n  GridMaterial,\n} from \"graphics/materials/grid/grid-material\";\nimport { Mesh, Object3D } from \"three\";\n\nexport interface GroundProps {\n  groundId: string;\n  storageId: string;\n}\n\nexport interface Ground {\n  mount: () => void;\n  update: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = (props: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n  let { globalStorage } = getGlobalContext();\n  let contextManager = getThreeJsContext();\n\n  let gridMat: Nullable<GridMaterial> = null;\n\n  const mount = () => {\n    ground =\n      (globalStorage\n        .getStorage(props.storageId)\n        .retrieve(props.storageId)\n        ?.groups.getObjectByName(props.groundId) as Mesh) ?? null;\n\n    if (!ground) {\n      console.error(`Cant get ground mesh from the id : ${props.groundId}`);\n      return;\n    }\n\n    gridMat = createGridMaterial({\n      camera: contextManager.get(\"camera\"),\n      fadeNear: 0.1,\n      fadeFar: 1,\n    });\n\n    ground.material = gridMat.mat;\n    processPipelineDebugger.onMount(\"navigation-ground\");\n    console.log(ground, gridMat);\n  };\n\n  const update = () => {\n    gridMat?.update(contextManager.get(\"camera\").position);\n  };\n\n  const activate = () => {};\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update: update,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n"]}