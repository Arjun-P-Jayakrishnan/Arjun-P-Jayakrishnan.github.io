{"version":3,"sources":["../../../src/plugins/loader/hdr_loader.ts"],"names":["createHDRLoader","loadingManager","renderer","scene","pmremGenerator","PMREMGenerator","rgbeLoader","RGBELoader","_loadHDRTexture","metaData","reject","resolve","data","texData","envMap","err","load","assets","promises","asset","dispose"],"mappings":"qGAwBaA,IAAAA,CAAAA,CAAkB,CAAC,CAC9B,cAAAC,CAAAA,CAAAA,CACA,SAAAC,CACA,CAAA,KAAA,CAAAC,CACF,CAAA,GAA2C,CACzC,IAAMC,CAAiC,CAAA,IAAIC,cAAeH,CAAAA,CAAQ,CAC5DI,CAAAA,CAAAA,CAAyB,IAAIC,UAAAA,CAAWN,CAAc,CAMtDO,CAAAA,CAAAA,CAAkB,MACtBC,CAAAA,EAEO,IAAI,OAAA,CAAQ,CAACC,CAAAA,CAAQC,CAAY,GAAA,CACtC,OAAQ,CAAA,GAAA,CAAI,MAAQF,CAAAA,CAAAA,CAAS,IAAI,CACjCH,CAAAA,CAAAA,CAAW,IACTG,CAAAA,CAAAA,CAAS,IACT,CAAA,CAACG,CAAmBC,CAAAA,CAAAA,GAAoB,CACtC,IAAMC,CAASV,CAAAA,CAAAA,CAAe,mBAAoBQ,CAAAA,CAAI,EAAE,OACxDA,CAAAA,CAAAA,CAAK,OAAQ,EAAA,CACbT,CAAM,CAAA,WAAA,CAAcW,CACpBH,CAAAA,CAAAA,GACF,CAAA,CACA,MACCI,CAAAA,CAAAA,EAAQ,CACPL,CAAAA,GACF,CACF,EACF,CAAC,CAAA,CAGGM,CAAO,CAAA,MAAOC,CAAmC,EAAA,CACrD,IAAMC,CAAAA,CAA4B,EAAC,CAEnCD,CAAO,CAAA,OAAA,CAAQ,MAAOE,CAAU,EAAA,CAC9BD,CAAS,CAAA,IAAA,CAAKV,CAAgBW,CAAAA,CAAK,CAAC,EACtC,CAAC,CAAA,CAED,MAAM,OAAA,CAAQ,UAAWD,CAAAA,CAAQ,EACnC,CAEME,CAIN,OAAO,CACL,IAAMJ,CAAAA,CACR,CACF","file":"hdr_loader.js","sourcesContent":["import { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  DataTexture,\n  LoadingManager,\n  PMREMGenerator,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\nimport { ModelAssetDescriptor } from \"types/loader.types\";\nimport { LoaderPlugin } from \"types/plugin.types\";\n\nexport interface HDRTextureLoaderProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loadingManager: LoadingManager;\n  storageManager: GlobalStorageManager;\n}\n\n/**\n * @description loads .hdr files and illuminates scene\n * @param props hdr loading properties\n * @returns HDR loader plugin\n */\nexport const createHDRLoader = ({\n  loadingManager,\n  renderer,\n  scene,\n}: HDRTextureLoaderProps): LoaderPlugin => {\n  const pmremGenerator: PMREMGenerator = new PMREMGenerator(renderer);\n  const rgbeLoader: RGBELoader = new RGBELoader(loadingManager);\n\n  /**\n   * @description loads a hdr file\n   * @param metaData meta-data for loading hdr\n   */\n  const _loadHDRTexture = async (\n    metaData: ModelAssetDescriptor\n  ): Promise<void> => {\n    return new Promise((reject, resolve) => {\n      console.log(\"path\", metaData.path);\n      rgbeLoader.load(\n        metaData.path,\n        (data: DataTexture, texData: object) => {\n          const envMap = pmremGenerator.fromEquirectangular(data).texture;\n          data.dispose();\n          scene.environment = envMap;\n          resolve();\n        },\n        undefined,\n        (err) => {\n          reject();\n        }\n      );\n    });\n  };\n\n  const load = async (assets: ModelAssetDescriptor[]) => {\n    const promises: Promise<void>[] = [];\n\n    assets.forEach(async (asset) => {\n      promises.push(_loadHDRTexture(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  const dispose = () => {\n    pmremGenerator.dispose();\n  };\n\n  return {\n    load: load,\n  };\n};\n"]}