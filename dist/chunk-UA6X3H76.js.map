{"version":3,"sources":["../src/gameplay/navigation/room.ts"],"names":["createNavigationRoom","props","globalStorage","getGlobalContext","contextManager","getThreeJsContext","components","createCameraManager","createPlayer","createGround","getControllers","state","room","isMounted","processPipelineDebugger","Vector3","Euler","deltaTime"],"mappings":"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","file":"chunk-UA6X3H76.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { createGround, Ground, GroundProps } from \"./ground\";\nimport { createPlayer, Player, PlayerProps } from \"./player\";\nimport {\n  ControllerManger,\n  getControllers,\n} from \"graphics/mechanics/controllers/controller\";\nimport { ObjectStorageUnit } from \"@managers/storage/storageTypes\";\nimport {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"core/game_engine/game_context\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { Nullable } from \"@utils/types/lifecycle\";\nimport { Room } from \"@utils/types/room\";\nimport { Euler, Vector3 } from \"three\";\n\nexport interface NavigationRoomProps {\n  storageId: string;\n  player: PlayerProps;\n  ground: GroundProps;\n}\n\ninterface Entities {\n  player: Player;\n  ground: Ground;\n  camera: CameraManager;\n  controllers: ControllerManger;\n}\n\ninterface InternalState {\n  player: {\n    position: Vector3;\n    rotation: Euler;\n    rotationDelta: { yaw: number; pitch: number };\n  };\n}\n\ninterface TempData {}\n\nexport const createNavigationRoom = (props: NavigationRoomProps): Room => {\n  //External dependencies\n  const { globalStorage } = getGlobalContext();\n  let contextManager: ThreeJsContextManager = getThreeJsContext();\n\n  //Internal\n  let components: Nullable<Entities> = {\n    camera: createCameraManager({ camera: contextManager.get(\"camera\") }),\n    player: createPlayer({ rootMeshId: props.player.rootMeshId }),\n    ground: createGround(props.ground),\n    controllers: getControllers(),\n  };\n\n  //TODO:no idea on what to add yet\n  let state: Nullable<InternalState> = null;\n  //TODO: no idea what temporary data to add yet\n  let tempData: Nullable<TempData> = null;\n\n  let room: Nullable<ObjectStorageUnit> = null;\n  let isMounted: boolean = false;\n\n  const activate = () => {\n    if (!room || !components) return;\n    room.groups.visible = true;\n    contextManager.get(\"orbit\").enabled = false;\n\n    components.camera.activate();\n    components.ground.activate();\n    components.player.activate();\n  };\n\n  const deactivate = () => {\n    if (!room || !components) return;\n    room.groups.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.player.deactivate();\n  };\n\n  const mount = () => {\n    if (isMounted || !components) return;\n\n    processPipelineDebugger.onMount(\"Navigation Room\");\n    state = {\n      player: {\n        position: new Vector3(0, 0, 0),\n        rotation: new Euler(0, 0, 0),\n        rotationDelta: { yaw: 0, pitch: 0 },\n      },\n    };\n\n    //get base root i.e group so that it can be used to toggle visibility\n    room =\n      globalStorage.getStorage(props.storageId).retrieve(props.storageId) ??\n      null;\n\n    components.controllers.mount({\n      mouse: { sensitivity: { pitch: 0.001, yaw: 0.0009 } },\n    });\n    components.player.mount();\n    components.ground.mount();\n    components.camera.mount();\n\n    isMounted = true;\n  };\n\n  const update = (deltaTime: number) => {\n    if (!isMounted || !components || !state) return;\n    contextManager.get(\"orbit\").update();\n    state.player = components.player.update(deltaTime);\n    components.camera.update({\n      playerPosition: state.player.position,\n      rotationDelta: state.player.rotationDelta,\n    });\n\n    //entities.ground.update();\n  };\n\n  const unmount = () => {\n    if (!isMounted || !components) return;\n\n    processPipelineDebugger.onUnmount(\"Navigation Room\");\n\n    components.player.unmount();\n    components.controllers.unmount();\n    components.ground.unmount();\n    contextManager.unmount();\n\n    components = null;\n    room = null;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n    setActive: activate,\n    setDeactive: deactivate,\n    isLoaded: false,\n  };\n};\n"]}