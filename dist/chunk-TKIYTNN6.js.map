{"version":3,"sources":["../src/graphics/gameplay/gameplay.ts"],"sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\nimport {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"graphics/internal/context\";\nimport { Clock, Euler, Vector3 } from \"three\";\nimport { ControllerManger, getControllers } from \"./controllers/controller\";\nimport { CameraControls, createCameraControls } from \"./modules/camera\";\nimport { createGround, Ground, GroundProps } from \"./modules/ground\";\nimport { createPlayer, Player, PlayerProps } from \"./modules/player\";\n\nexport interface GameplayOptions {\n  player: PlayerProps;\n  ground: GroundProps;\n}\n\nexport interface Gameplay {\n  mount: () => void;\n  update: () => void;\n  unmount: () => void;\n}\n\ninterface References {\n  player: Player;\n  camera: CameraControls;\n  ground: Ground;\n  controllers: ControllerManger;\n}\n\ninterface State {\n  deltaTime: number;\n  mouseRotation: {\n    yaw: number;\n    pitch: number;\n  };\n  camera: {\n    rotation: Euler;\n  };\n}\n\ninterface TempData {\n  deltaTime: number;\n  playerData: {\n    position: Vector3;\n    rotation: Euler;\n  } | null;\n}\n\nexport const createGameplay = (options: GameplayOptions): Gameplay => {\n  //\n  const { globalState, eventBusManager, globalStorage } = getGlobalContext();\n\n  const clock: Clock = new Clock();\n  let contextManager: ThreeJsContextManager;\n  let references: References;\n\n  //Re usable state (no re-allocation)\n  let state: State = {\n    deltaTime: 0,\n    mouseRotation: {\n      yaw: 0,\n      pitch: 0,\n    },\n    camera: {\n      rotation: new Euler(0, 0, 0, \"XYZ\"),\n    },\n  };\n\n  let tempData: TempData = {\n    deltaTime: 0,\n    playerData: null,\n  };\n\n  const mount = (): void => {\n    contextManager = getThreeJsContext();\n\n    const controllers: ControllerManger = getControllers();\n    controllers.mount({\n      mouse: {\n        sensitivity: 0.01,\n      },\n    });\n\n    const player = createPlayer({\n      ids: options.player.ids,\n    });\n    player.create();\n\n    const camera = createCameraControls({\n      camera: contextManager.getProperty(\"camera\"),\n    });\n\n    const ground = createGround(options.ground);\n    ground.mount();\n\n    references = { player, camera, ground, controllers };\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime)) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n    state.mouseRotation = references.controllers\n      .getController(\"mouse\")\n      ?.getRotation()!;\n    tempData.playerData = references.player.update(\n      state.deltaTime,\n      state.mouseRotation,\n      state.camera\n    );\n\n    state.camera = references.camera.update(\n      tempData.playerData.position,\n      state.mouseRotation\n    );\n\n    references.ground.update();\n  };\n\n  const unmount = () => {\n    references.player.destroy();\n    references.controllers.unmount();\n    references.ground.unmount();\n    contextManager.unmount();\n\n    ///De reference\n    references = null!;\n    contextManager = null!;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n"],"mappings":"gPAKA,OAAS,SAAAA,EAAO,SAAAC,MAAsB,QA2C/B,IAAMC,EAAkBC,GAAuC,CAEpE,GAAM,CAAE,YAAAC,EAAa,gBAAAC,EAAiB,cAAAC,CAAc,EAAIC,EAAiB,EAEnEC,EAAe,IAAIC,EACrBC,EACAC,EAGAC,EAAe,CACjB,UAAW,EACX,cAAe,CACb,IAAK,EACL,MAAO,CACT,EACA,OAAQ,CACN,SAAU,IAAIC,EAAM,EAAG,EAAG,EAAG,KAAK,CACpC,CACF,EAEIC,EAAqB,CACvB,UAAW,EACX,WAAY,IACd,EAEMC,EAAQ,IAAY,CACxBL,EAAiBM,EAAkB,EAEnC,IAAMC,EAAgCC,EAAe,EACrDD,EAAY,MAAM,CAChB,MAAO,CACL,YAAa,GACf,CACF,CAAC,EAED,IAAME,EAASC,EAAa,CAC1B,IAAKjB,EAAQ,OAAO,GACtB,CAAC,EACDgB,EAAO,OAAO,EAEd,IAAME,EAASC,EAAqB,CAClC,OAAQZ,EAAe,YAAY,QAAQ,CAC7C,CAAC,EAEKa,EAASC,EAAarB,EAAQ,MAAM,EAC1CoB,EAAO,MAAM,EAEbZ,EAAa,CAAE,OAAAQ,EAAQ,OAAAE,EAAQ,OAAAE,EAAQ,YAAAN,CAAY,CACrD,EAEMQ,EAAkB,IAAY,CAClCX,EAAS,UAAYN,EAAM,SAAS,EAE/B,MAAMM,EAAS,SAAS,IAC3BF,EAAM,UAAYE,EAAS,UAE/B,EAgCA,MAAO,CACL,MAAOC,EACP,OAhCa,IAAM,CACnBU,EAAgB,EAChBb,EAAM,cAAgBD,EAAW,YAC9B,cAAc,OAAO,GACpB,YAAY,EAChBG,EAAS,WAAaH,EAAW,OAAO,OACtCC,EAAM,UACNA,EAAM,cACNA,EAAM,MACR,EAEAA,EAAM,OAASD,EAAW,OAAO,OAC/BG,EAAS,WAAW,SACpBF,EAAM,aACR,EAEAD,EAAW,OAAO,OAAO,CAC3B,EAgBE,QAdc,IAAM,CACpBA,EAAW,OAAO,QAAQ,EAC1BA,EAAW,YAAY,QAAQ,EAC/BA,EAAW,OAAO,QAAQ,EAC1BD,EAAe,QAAQ,EAGvBC,EAAa,KACbD,EAAiB,IACnB,CAMA,CACF","names":["Clock","Euler","createGameplay","options","globalState","eventBusManager","globalStorage","getGlobalContext","clock","Clock","contextManager","references","state","Euler","tempData","mount","getThreeJsContext","controllers","getControllers","player","createPlayer","camera","createCameraControls","ground","createGround","updateDeltaTime"]}