{"version":3,"sources":["../src/graphics/gameplay/gameplay.ts"],"names":["createGameplay","options","globalState","eventBusManager","globalStorage","getGlobalContext","clock","Clock","contextManager","references","state","Euler","tempData","mount","getThreeJsContext","controllers","getControllers","player","createPlayer","camera","createCameraControls","ground","createGround","updateDeltaTime"],"mappings":"oRAgDaA,IAAAA,CAAAA,CAAkBC,CAAuC,EAAA,CAEpE,GAAM,CAAE,YAAAC,CAAa,CAAA,eAAA,CAAAC,EAAiB,aAAAC,CAAAA,CAAc,EAAIC,CAAiB,EAAA,CAEnEC,CAAe,CAAA,IAAIC,KACrBC,CAAAA,GAAAA,CACAC,EAGAC,CAAe,CAAA,CACjB,UAAW,CACX,CAAA,aAAA,CAAe,CACb,GAAK,CAAA,CAAA,CACL,KAAO,CAAA,CACT,CACA,CAAA,MAAA,CAAQ,CACN,QAAU,CAAA,IAAIC,MAAM,CAAG,CAAA,CAAA,CAAG,EAAG,KAAK,CACpC,CACF,CAAA,CAEIC,CAAqB,CAAA,CACvB,UAAW,CACX,CAAA,UAAA,CAAY,IACd,CAEMC,CAAAA,CAAAA,CAAQ,IAAY,CACxBL,GAAAA,CAAiBM,CAAkB,EAAA,CAEnC,IAAMC,CAAAA,CAAgCC,KACtCD,CAAAA,CAAAA,CAAY,MAAM,CAChB,KAAA,CAAO,CACL,WAAa,CAAA,GACf,CACF,CAAC,CAED,CAAA,IAAME,EAASC,GAAa,CAAA,CAC1B,IAAKjB,CAAQ,CAAA,MAAA,CAAO,GACtB,CAAC,CAAA,CACDgB,CAAO,CAAA,MAAA,EAEP,CAAA,IAAME,EAASC,GAAqB,CAAA,CAClC,OAAQZ,GAAe,CAAA,WAAA,CAAY,QAAQ,CAC7C,CAAC,CAEKa,CAAAA,CAAAA,CAASC,GAAarB,CAAAA,CAAAA,CAAQ,MAAM,CAC1CoB,CAAAA,CAAAA,CAAO,OAEPZ,CAAAA,CAAAA,CAAa,CAAE,MAAAQ,CAAAA,CAAAA,CAAQ,MAAAE,CAAAA,CAAAA,CAAQ,MAAAE,CAAAA,CAAAA,CAAQ,YAAAN,CAAY,EACrD,EAEMQ,CAAkB,CAAA,IAAY,CAClCX,CAAS,CAAA,SAAA,CAAYN,CAAM,CAAA,QAAA,EAEtB,CAAA,KAAA,CAAMM,EAAS,SAAS,CAAA,GAC3BF,EAAM,SAAYE,CAAAA,CAAAA,CAAS,WAE/B,CAgCA,CAAA,OAAO,CACL,KAAA,CAAOC,CACP,CAAA,MAAA,CAhCa,IAAM,CACnBU,CAAAA,GACAb,CAAM,CAAA,aAAA,CAAgBD,EAAW,WAC9B,CAAA,aAAA,CAAc,OAAO,CAAA,EACpB,WAAY,EAAA,CAChBG,EAAS,UAAaH,CAAAA,CAAAA,CAAW,OAAO,MACtCC,CAAAA,CAAAA,CAAM,UACNA,CAAM,CAAA,aAAA,CACNA,CAAM,CAAA,MACR,CAEAA,CAAAA,CAAAA,CAAM,OAASD,CAAW,CAAA,MAAA,CAAO,OAC/BG,CAAS,CAAA,UAAA,CAAW,SACpBF,CAAM,CAAA,aACR,CAEAD,CAAAA,CAAAA,CAAW,MAAO,CAAA,MAAA,GACpB,CAgBE,CAAA,OAAA,CAdc,IAAM,CACpBA,CAAAA,CAAW,OAAO,OAAQ,EAAA,CAC1BA,CAAW,CAAA,WAAA,CAAY,OAAQ,EAAA,CAC/BA,EAAW,MAAO,CAAA,OAAA,EAClBD,CAAAA,GAAAA,CAAe,OAAQ,EAAA,CAGvBC,EAAa,IACbD,CAAAA,GAAAA,CAAiB,KACnB,CAMA,CACF","file":"chunk-TKIYTNN6.js","sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\nimport {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"graphics/internal/context\";\nimport { Clock, Euler, Vector3 } from \"three\";\nimport { ControllerManger, getControllers } from \"./controllers/controller\";\nimport { CameraControls, createCameraControls } from \"./modules/camera\";\nimport { createGround, Ground, GroundProps } from \"./modules/ground\";\nimport { createPlayer, Player, PlayerProps } from \"./modules/player\";\n\nexport interface GameplayOptions {\n  player: PlayerProps;\n  ground: GroundProps;\n}\n\nexport interface Gameplay {\n  mount: () => void;\n  update: () => void;\n  unmount: () => void;\n}\n\ninterface References {\n  player: Player;\n  camera: CameraControls;\n  ground: Ground;\n  controllers: ControllerManger;\n}\n\ninterface State {\n  deltaTime: number;\n  mouseRotation: {\n    yaw: number;\n    pitch: number;\n  };\n  camera: {\n    rotation: Euler;\n  };\n}\n\ninterface TempData {\n  deltaTime: number;\n  playerData: {\n    position: Vector3;\n    rotation: Euler;\n  } | null;\n}\n\nexport const createGameplay = (options: GameplayOptions): Gameplay => {\n  //\n  const { globalState, eventBusManager, globalStorage } = getGlobalContext();\n\n  const clock: Clock = new Clock();\n  let contextManager: ThreeJsContextManager;\n  let references: References;\n\n  //Re usable state (no re-allocation)\n  let state: State = {\n    deltaTime: 0,\n    mouseRotation: {\n      yaw: 0,\n      pitch: 0,\n    },\n    camera: {\n      rotation: new Euler(0, 0, 0, \"XYZ\"),\n    },\n  };\n\n  let tempData: TempData = {\n    deltaTime: 0,\n    playerData: null,\n  };\n\n  const mount = (): void => {\n    contextManager = getThreeJsContext();\n\n    const controllers: ControllerManger = getControllers();\n    controllers.mount({\n      mouse: {\n        sensitivity: 0.01,\n      },\n    });\n\n    const player = createPlayer({\n      ids: options.player.ids,\n    });\n    player.create();\n\n    const camera = createCameraControls({\n      camera: contextManager.getProperty(\"camera\"),\n    });\n\n    const ground = createGround(options.ground);\n    ground.mount();\n\n    references = { player, camera, ground, controllers };\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime)) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n    state.mouseRotation = references.controllers\n      .getController(\"mouse\")\n      ?.getRotation()!;\n    tempData.playerData = references.player.update(\n      state.deltaTime,\n      state.mouseRotation,\n      state.camera\n    );\n\n    state.camera = references.camera.update(\n      tempData.playerData.position,\n      state.mouseRotation\n    );\n\n    references.ground.update();\n  };\n\n  const unmount = () => {\n    references.player.destroy();\n    references.controllers.unmount();\n    references.ground.unmount();\n    contextManager.unmount();\n\n    ///De reference\n    references = null!;\n    contextManager = null!;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}