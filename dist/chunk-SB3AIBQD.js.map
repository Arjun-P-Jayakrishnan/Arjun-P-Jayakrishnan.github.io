{"version":3,"sources":["../src/graphics/main.ts"],"names":["createGameManager","props","globalState","eventBusManager","getGlobalContext","engineInstance","createThreeJsInstance","scene","renderer","camera","controls","loaderInstance","createLoader","gameplay","createGameplay","_handleResize","width","height","_handleDebug","_mountWindowEventListeners","mount","_onLoad"],"mappings":"8JAiBaA,IAAAA,CAAAA,CACXC,GACsB,CACtB,GAAM,CAAE,WAAAC,CAAAA,CAAAA,CAAa,gBAAAC,CAAgB,CAAA,CAAIC,GACnCC,CAAAA,CAAAA,CAAiBC,EAAsB,CAC3C,MAAA,CAAQ,EACR,CAAA,WAAA,CAAa,aACf,CAAC,CAAA,CACK,CAAE,KAAAC,CAAAA,GAAAA,CAAO,SAAAC,CAAU,CAAA,MAAA,CAAAC,EAAQ,QAAAC,CAAAA,CAAS,EAAIL,CAExCM,CAAAA,CAAAA,CAAiBC,IAAaX,CAAM,CAAA,aAAA,CAAe,CACvD,WAAaC,CAAAA,CAAAA,CACb,eAAgBC,CAAgB,CAAA,UAAA,CAChC,QAAUK,CAAAA,CAAAA,CACV,KAAOD,CAAAA,GACT,CAAC,CAEKM,CAAAA,CAAAA,CAAqBC,IAAe,CACxC,MAAA,CAAQ,CACN,GAAK,CAAA,CACH,SAAU,QACZ,CACF,EACA,MAAQ,CAAA,CACN,IAAK,CACH,UAAA,CAAY,QACd,CACF,CACF,CAAC,CAKKC,CAAAA,CAAAA,CAAgB,IAAM,CAC1B,IAAMC,EAAQ,MAAO,CAAA,UAAA,CACfC,EAAS,MAAO,CAAA,WAAA,CAEtBR,EAAO,MAASO,CAAAA,CAAAA,CAAQC,EACxBR,CAAO,CAAA,sBAAA,GAEPD,CAAS,CAAA,OAAA,CAAQQ,EAAOC,CAAM,EAChC,CAEMC,CAAAA,CAAAA,CAAgB,CAAqB,EAAA,CACrC,EAAE,GAAI,CAAA,WAAA,KAAkB,GAAO,EAAA,CAAA,CAAE,WACnC,CAAE,CAAA,cAAA,GACFf,CAAgB,CAAA,QAAA,CAAS,KAAK,CAC5B,IAAA,CAAM,kBACN,KAAOI,CAAAA,GACT,CAAC,CAEL,EAAA,CAAA,CAKMY,EAA6B,IAAM,CAIvCJ,GAEA,CAAA,MAAA,CAAO,iBAAiB,QAAUA,CAAAA,CAAa,EAC/C,MAAO,CAAA,gBAAA,CAAiB,UAAWG,CAAY,EACjD,EAEME,CAAQ,CAAA,IAAM,CAIlBD,CAA2B,EAAA,CAC3Bd,EAAe,KAAM,EAAA,CAKrBM,CAAe,CAAA,SAAA,GACjB,CAAA,CAEMU,EAAU,IAAM,CAIpBR,EAAS,KAAM,EAAA,CAKfR,EAAe,QAASQ,CAAAA,CAAAA,CAAS,MAAM,EACzC,CAAA,CAuBA,OAAO,CACL,KAAA,CAAOO,EACP,OAdc,CAAA,IAAM,CAIpB,MAAO,CAAA,mBAAA,CAAoB,SAAUL,CAAa,CAAA,CAClD,OAAO,mBAAoB,CAAA,SAAA,CAAWG,CAAY,EACpD,CAAA,CASE,OAPa,IAAM,CACnBb,EAAe,MAAO,GACxB,EAME,IAzBW,CAAA,SAAY,CACvB,MAAMM,CAAAA,CAAe,SAErBU,CAAAA,CAAAA,GACF,CAsBA,CACF","file":"chunk-SB3AIBQD.js","sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\n\nimport { createGameplay, Gameplay } from \"./gameplay/gameplay\";\nimport { createThreeJsInstance } from \"./internal/internal\";\nimport { createLoader, LoaderOptions } from \"./loader/loader\";\n\ninterface GameManagerProps {\n  loaderOptions: LoaderOptions;\n}\n\nexport interface GameEngineManager {\n  mount: () => void;\n  unmount: () => void;\n  update: () => void;\n  load: () => Promise<void>;\n}\n\nexport const createGameManager = (\n  props: GameManagerProps\n): GameEngineManager => {\n  const { globalState, eventBusManager } = getGlobalContext();\n  const engineInstance = createThreeJsInstance({\n    camera: {},\n    domMountTag: \"game-engine\",\n  });\n  const { scene, renderer, camera, controls } = engineInstance;\n\n  const loaderInstance = createLoader(props.loaderOptions, {\n    globalState: globalState,\n    loaderEventBus: eventBusManager.loadingBus,\n    renderer: renderer,\n    scene: scene,\n  });\n\n  const gameplay: Gameplay = createGameplay({\n    player: {\n      ids: {\n        rootMesh: \"player\",\n      },\n    },\n    ground: {\n      ids: {\n        groundRoot: \"ground\",\n      },\n    },\n  });\n\n  /**\n   * @description handle resize of the canvas\n   */\n  const _handleResize = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(width, height);\n  };\n\n  const _handleDebug = (e: KeyboardEvent) => {\n    if (e.key.toLowerCase() === \"u\" && e.shiftKey) {\n      e.preventDefault();\n      eventBusManager.debugBus.emit({\n        type: \"debug:inspector\",\n        scene: scene,\n      });\n    }\n  };\n\n  /**\n   * @description creates event listeners for various tasks\n   */\n  const _mountWindowEventListeners = () => {\n    /**\n     * Primary initialization to ensure correct aspect ratios\n     */\n    _handleResize();\n\n    window.addEventListener(\"resize\", _handleResize);\n    window.addEventListener(\"keydown\", _handleDebug);\n  };\n\n  const mount = () => {\n    /**\n     * Attach Event Listeners\n     */\n    _mountWindowEventListeners();\n    engineInstance.mount();\n\n    /**\n     * load all meshes ,objects and animations as per the given props\n     */\n    loaderInstance.configure();\n  };\n\n  const _onLoad = () => {\n    /**\n     * Initialize the gameplay mechanics and then pass update logic to renderer\n     */\n    gameplay.mount();\n\n    /**\n     * Register gameplay loop\n     */\n    engineInstance.register(gameplay.update);\n  };\n\n  const load = async () => {\n    await loaderInstance.loadAll();\n\n    _onLoad();\n  };\n\n  /**\n   * @description unmount\n   */\n  const unmount = () => {\n    /**\n     * Release all event listeners to prevent memory leaks\n     */\n    window.removeEventListener(\"resize\", _handleResize);\n    window.removeEventListener(\"keydown\", _handleDebug);\n  };\n\n  const update = () => {\n    engineInstance.render();\n  };\n\n  return {\n    mount: mount,\n    unmount: unmount,\n    update: update,\n    load: load,\n  };\n};\n"]}