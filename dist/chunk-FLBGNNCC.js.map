{"version":3,"sources":["../src/gameplay/gameplay.ts"],"names":["createGameplay","globalState","eventBusManager","getGlobalContext","context","getThreeJsContext","clock","Clock","state","tempData","isMounted","roomController","createRoomController","getControllers","bind","mount","processPipelineDebugger","e","updateDeltaTime","update","unbind"],"mappings":"uOA2BaA,CAAiB,CAAA,IAAgB,CAEtC,IAAA,CAAE,WAAAC,CAAAA,CAAAA,CAAa,gBAAAC,CAAgB,CAAA,CAAIC,GACnCC,CAAUC,GACVC,KAAAA,CAAAA,CAAe,IAAIC,KAAAA,CAGrBC,IAAe,CAAE,SAAA,CAAW,CAAE,CAC9BC,CAAAA,CAAAA,CAAqB,CAAE,SAAW,CAAA,CAAE,CACpCC,CAAAA,CAAAA,CAAqB,MAGrBC,CAAiCC,CAAAA,GAAAA,GACIC,GAAAA,OAEnCC,CAAO,CAAA,IAAM,CACjBZ,CAAAA,CAAgB,WAAW,EACzB,CAAA,YAAA,CACAS,EAAe,UAAW,CAAA,KAC5B,EACAT,CAAgB,CAAA,UAAA,CAAW,EACzB,CAAA,YAAA,CACAS,EAAe,UAAW,CAAA,OAC5B,EAEAT,CAAgB,CAAA,UAAA,CAAW,GACzB,cACAS,CAAAA,CAAAA,CAAe,UAAW,CAAA,QAC5B,EACAT,CAAgB,CAAA,UAAA,CAAW,GACzB,cACAS,CAAAA,CAAAA,CAAe,WAAW,OAC5B,CAAA,CAEAT,CAAgB,CAAA,UAAA,CAAW,GACzB,WACAS,CAAAA,CAAAA,CAAe,WAAW,UAC5B,CAAA,CACAT,EAAgB,UAAW,CAAA,EAAA,CACzB,WACAS,CAAAA,CAAAA,CAAe,WAAW,OAC5B,EACF,EAEMI,CAAQ,CAAA,SAA2B,CACnCL,CAEJM,GAAAA,GAAAA,CAAwB,OAAQ,CAAA,UAAU,EAS1C,MAAML,CAAAA,CAAe,OACrBG,CAAAA,CAAAA,GACAJ,CAAY,CAAA,IAAA,CAEZ,MAAO,CAAA,gBAAA,CAAiB,QAAUO,CAAM,EAAA,CACtC,QAAQ,GAAIA,CAAAA,CAAC,EACf,CAAC,CAAA,EACH,CAEMC,CAAAA,CAAAA,CAAkB,IAAY,CAClCT,CAAAA,CAAS,UAAYH,CAAM,CAAA,QAAA,GAEvB,CAAC,KAAA,CAAMG,CAAS,CAAA,SAAS,GAAKA,CAAS,CAAA,SAAA,GAAc,SACvDD,GAAM,CAAA,SAAA,CAAYC,EAAS,SAE/B,EAAA,CAAA,CAEMU,CAAS,CAAA,IAAM,CACnBD,CAAgB,EAAA,CAEhBP,EAAe,MAAOH,CAAAA,GAAAA,CAAM,WAAa,CAAC,EAC5C,CAEMY,CAUN,OAAO,CACL,KAAA,CAAOL,EACP,MAAQI,CAAAA,CAAAA,CACR,QARc,IAAM,CACpBH,IAAwB,SAAU,CAAA,UAAU,EAE9C,CAMA,CACF","file":"chunk-FLBGNNCC.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { Clock } from \"three\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport {\n  createRoomController,\n  RoomController,\n} from \"./controller/room_controller\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport {\n  ControllerManger,\n  getControllers,\n} from \"graphics/mechanics/controllers/controller\";\n\nexport interface Gameplay {\n  mount: () => Promise<void>;\n  update: () => void;\n  unmount: () => void;\n}\n\ninterface State {\n  deltaTime: number;\n}\n\ninterface TempData {\n  deltaTime: number;\n}\n\nexport const createGameplay = (): Gameplay => {\n  //Global properties\n  const { globalState, eventBusManager } = getGlobalContext();\n  const context = getThreeJsContext();\n  const clock: Clock = new Clock();\n\n  //Re usable state (no re-allocation)\n  let state: State = { deltaTime: 0 };\n  let tempData: TempData = { deltaTime: 0 };\n  let isMounted: boolean = false;\n\n  //Controllers\n  let roomController: RoomController = createRoomController();\n  let inputControllers: ControllerManger = getControllers();\n\n  const bind = () => {\n    eventBusManager.displayBus.on(\n      \"about:show\",\n      roomController.switchRoom[\"about\"]\n    );\n    eventBusManager.displayBus.on(\n      \"about:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"project:show\",\n      roomController.switchRoom[\"projects\"]\n    );\n    eventBusManager.displayBus.on(\n      \"project:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"home:show\",\n      roomController.switchRoom[\"navigation\"]\n    );\n    eventBusManager.displayBus.on(\n      \"home:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n  };\n\n  const mount = async (): Promise<void> => {\n    if (isMounted) return;\n\n    processPipelineDebugger.onMount(\"gameplay\");\n    // inputControllers.mount({\n    //   mouse: {\n    //     sensitivity: {\n    //       yaw: 0.005,\n    //       pitch: 0.000001,\n    //     },\n    //   },\n    // });\n    await roomController.mount();\n    bind();\n    isMounted = true;\n\n    window.addEventListener(\"keyup\", (e) => {\n      console.log(e);\n    });\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime) && tempData.deltaTime !== undefined) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n\n    roomController.update(state.deltaTime ?? 0);\n  };\n\n  const unbind = () => {\n    // eventBusManager.displayBus.off(\"about:show\", rooms.navigation.setActive);\n    // eventBusManager.displayBus.off(\"about:hide\", rooms.navigation.setDeactive);\n  };\n\n  const unmount = () => {\n    processPipelineDebugger.onUnmount(\"gameplay\");\n    unbind();\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}