{"version":3,"sources":["../src/core/game_engine/main.ts"],"names":["createGameManager","globalState","eventBusManager","getGlobalContext","isMounted","engine","createThreeJsInstance","gameplay","createGameplay","context","handleResize","height","width","handleDebug","addEventListeners","removeEventListeners","initializeContext","ctx","getThreeJsContext","processPipelineDebugger","error"],"mappings":"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","file":"chunk-GOMTL3QZ.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { LifeCycle, Nullable } from \"core/lifecyle\";\nimport { createThreeJsInstance } from \"./game_engine\";\nimport { getThreeJsContext, ThreeJsContext } from \"./game_context\";\nimport { createGameplay, Gameplay } from \"gameplay/gameplay\";\nimport { processPipelineDebugger } from \"debug/debugger\";\n\nexport interface GameEngineManager extends LifeCycle {\n  update: () => void;\n  load:()=>Promise<void>\n}\n\nexport const createGameManager = (): GameEngineManager => {\n  //Reference to global managers  \n  const { globalState, eventBusManager } = getGlobalContext();\n  let isMounted:boolean= false;\n  \n\n  const engine = createThreeJsInstance({domMountId: \"game-engine\"});\n  const gameplay: Gameplay = createGameplay();\n  let context: Nullable<ThreeJsContext> = null;\n\n  /** Resises Camera and Renderer on window resise */\n  const handleResize = () => {\n    if (!context) return;\n\n    const { height, width } = {\n      height:window.innerHeight,\n      width: window.innerWidth\n    };\n    \n    console.log('resising')\n    context.camera.aspect = width / height;\n    context.camera.updateProjectionMatrix();\n    context.renderer.setSize(width, height);\n  };\n\n  const handleDebug = (e: KeyboardEvent) => {\n    if (!context || !(e.key.toLowerCase() === \"u\" && e.shiftKey)) return;\n\n    e.preventDefault();\n    eventBusManager.debugBus.emit({\n        type: \"debug:inspector\",\n        scene: context.scene,\n    });\n  };\n\n\n  /** Adds required event listeners */\n  const addEventListeners = () => {\n    /**\n     * Primary initialization to ensure correct aspect ratios\n     */\n    handleResize();\n\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"keydown\", handleDebug);\n  };\n\n   /** Release all event listeners to prevent memory leaks */\n  const removeEventListeners=()=>{\n    window.removeEventListener(\"resize\", handleResize);\n    window.removeEventListener(\"keydown\", handleDebug);\n  }\n\n  const initializeContext = () => {\n    const ctx=getThreeJsContext()\n \n    context = {\n      scene: ctx.get(\"scene\"),\n      camera: ctx.get(\"camera\"),\n      renderer: ctx.get(\"renderer\"),\n    };\n  };\n\n  const mount = () => {\n    if (isMounted) return;\n\n    engine.mount();\n    initializeContext();\n    addEventListeners();\n\n    isMounted = true;\n    processPipelineDebugger.onMount('game-engine')\n  };\n\n  const load = async () => {\n    if (!isMounted) {\n        throw new Error(`Try to load before mounting`);\n    }\n    processPipelineDebugger.onLoad('game-engine')\n    try {\n      await gameplay.mount(); // gameplay logic added after obtaining all assets\n      engine.register(gameplay.update); // pass the gameplay loop as callback to the game engine\n    } catch (error) {\n      console.error(`[Game Manager] Loading failed :${error}`);\n    }\n  };\n\n\n  const update = () => {\n    engine.render();\n  };\n\n  \n  const unmount = () => {\n    if (!isMounted) return;\n    processPipelineDebugger.onUnmount('game-engine')\n    \n    removeEventListeners();\n    \n    gameplay.unmount();\n    engine.unmount();\n\n    context = null;\n    isMounted = false;\n  };\n\n  \n  return {\n    mount: mount,\n    unmount: unmount,\n    update: update,\n    load: load,\n  };\n};\n"]}