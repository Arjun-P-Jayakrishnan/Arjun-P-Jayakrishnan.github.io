{"version":3,"sources":["../src/graphics/loader/loader.ts"],"names":["createLoader","options","context","scene","renderer","loaderEventBus","globalState","meshesMetaData","hdrMetaData","manager","LoadingManager","plugins","_configureLoadingManager","url","itemsLoaded","itemsTotal","_configurePlugins","createMeshLoader","createHDRLoader","promises","plugin"],"mappings":"kHAmCaA,IAAAA,CAAAA,CAAe,CAC1BC,CACAC,CAAAA,CAAAA,GACW,CACX,GAAM,CAAE,KAAA,CAAAC,EAAO,QAAAC,CAAAA,CAAAA,CAAU,cAAAC,CAAAA,CAAAA,CAAgB,WAAAC,CAAAA,CAAY,CAAIJ,CAAAA,CAAAA,CACnD,CAAE,cAAA,CAAAK,CAAgB,CAAA,WAAA,CAAAC,CAAY,CAAA,CAAIP,EAElCQ,CAA0B,CAAA,IAAIC,cAC9BC,CAAAA,GAAAA,CAA0B,EAAC,CAK3BC,EAA2B,IAAM,CACrCH,CAAQ,CAAA,OAAA,CAAU,CAACI,CAAAA,CAAKC,EAAaC,CAAe,GAAA,CAClDV,CAAe,CAAA,IAAA,CAAK,CAClB,IAAA,CAAM,YACN,CAAA,GAAA,CAAKQ,CACL,CAAA,MAAA,CAAQC,CACR,CAAA,KAAA,CAAOC,CACT,CAAC,EACDT,CAAY,CAAA,QAAA,CAAS,CACnB,OAAA,CAAS,CACP,MAAA,CAAQ,KACR,QAAU,CAAA,CACZ,CACF,CAAC,EACH,CAAA,CAEAG,EAAQ,UAAa,CAAA,CAACI,CAAKC,CAAAA,CAAAA,CAAaC,CAAe,GAAA,CACrDV,CAAe,CAAA,IAAA,CAAK,CAClB,IAAA,CAAM,eACN,CAAA,GAAA,CAAKQ,CACL,CAAA,MAAA,CAAQC,EACR,KAAOC,CAAAA,CACT,CAAC,CAAA,CACDT,CAAY,CAAA,QAAA,CAAS,CACnB,OAAS,CAAA,CACP,MAAQ,CAAA,IAAA,CACR,QAAUQ,CAAAA,CAAAA,CAAcC,CAC1B,CACF,CAAC,EACH,CAAA,CAEAN,CAAQ,CAAA,MAAA,CAAS,IAAM,CACrBJ,CAAe,CAAA,IAAA,CAAK,CAClB,IAAA,CAAM,eACR,CAAC,EACH,CAEAI,CAAAA,CAAAA,CAAQ,OAAWI,CAAAA,CAAAA,EAAQ,CACzBR,CAAAA,CAAe,KAAK,CAClB,IAAA,CAAM,YACN,CAAA,GAAA,CAAKQ,CACP,CAAC,EACH,EACF,CAAA,CAKMG,CAAoB,CAAA,IAAM,CAC1BT,CAAAA,CAAe,MAAS,CAAA,CAAA,EAC1BI,GAAQ,CAAA,IAAA,CACNM,CAAiB,CAAA,CACf,MAAQV,CAAAA,CAAAA,CACR,MAAOJ,CACP,CAAA,cAAA,CAAgBM,CAChB,CAAA,eAAA,CAAiBJ,CACnB,CAAC,CACH,CAG+BG,CAAAA,CAAAA,EAAgB,IAC/CG,EAAAA,GAAAA,CAAQ,IACNO,CAAAA,GAAAA,CAAgB,CACd,KAAOV,CAAAA,CAAAA,CACP,KAAOL,CAAAA,CAAAA,CACP,QAAUC,CAAAA,CAAAA,CACV,cAAgBK,CAAAA,CAAAA,CAChB,eAAiBJ,CAAAA,CACnB,CAAC,CACH,EAEJ,CAAA,CAkCA,OAAO,CACL,SAAA,CA9BiB,IAAM,CACvBO,CAAyB,EAAA,CACzBI,IACF,CAAA,CA4BE,OAvBW,CAAA,SAAiD,CAC5D,IAAMG,EAA4B,EAAC,CAEnC,OAAAR,GAAAA,CAAQ,OAASS,CAAAA,CAAAA,EAAW,CAC1BD,CAAAA,CAAS,IAAKC,CAAAA,CAAAA,CAAO,IAAK,EAAC,EAC7B,CAAC,EAED,MAAM,OAAA,CAAQ,UAAWD,CAAAA,CAAQ,CAE1B,CAAA,CACL,OAAS,CAAA,EACT,CAAA,KAAA,CAAO,EACT,CACF,CAAA,CAWE,QATc,IAAM,CACpBR,GAAQ,CAAA,OAAA,CAASS,CAAW,EAAA,CAC1BA,CAAO,CAAA,OAAA,KACT,CAAC,EACH,CAMA,CACF","file":"chunk-H7XGBN2W.js","sourcesContent":["import { createEventBus } from \"@utils/event_management/eventBus\";\nimport { LoadingEvents } from \"@utils/event_management/eventType\";\nimport { GlobalState } from \"@utils/state/globalState\";\nimport { LoadingContext } from \"@utils/state/globalStateData\";\nimport { LoadingManager, Scene, WebGLRenderer } from \"three\";\nimport { createHDRLoader } from \"./file_type_plugins/hdr_loader\";\nimport { createMeshLoader } from \"./file_type_plugins/mesh_loader\";\nimport { AssetMetaData, LoaderPlugin } from \"./loaderPlugins\";\n\nexport interface LoaderOptions {\n  meshesMetaData: AssetMetaData[];\n  hdrMetaData?: AssetMetaData;\n}\n\nexport interface LoaderContext {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loaderEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n  globalState: GlobalState;\n}\n\nexport interface Loader {\n  configure: () => void;\n  loadAll: () => Promise<{\n    success: string[];\n    error: string[];\n  }>;\n  dispose: () => void;\n}\n/**\n * @description creates a loader with the given settings\n * @param options options to change loader settings\n * @param context global context with references\n * @returns Loader\n */\nexport const createLoader = (\n  options: LoaderOptions,\n  context: LoaderContext\n): Loader => {\n  const { scene, renderer, loaderEventBus, globalState } = context;\n  const { meshesMetaData, hdrMetaData } = options;\n\n  const manager: LoadingManager = new LoadingManager();\n  const plugins: LoaderPlugin[] = [];\n\n  /**\n   * @description attaches the event bus for listening to loading changes\n   */\n  const _configureLoadingManager = () => {\n    manager.onStart = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:start\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      globalState.setState({\n        loading: {\n          active: true,\n          progress: 0,\n        } as LoadingContext,\n      });\n    };\n\n    manager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:progress\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      globalState.setState({\n        loading: {\n          active: true,\n          progress: itemsLoaded / itemsTotal,\n        } as LoadingContext,\n      });\n    };\n\n    manager.onLoad = () => {\n      loaderEventBus.emit({\n        type: \"load:complete\",\n      });\n    };\n\n    manager.onError = (url) => {\n      loaderEventBus.emit({\n        type: \"load:error\",\n        url: url,\n      });\n    };\n  };\n\n  /**\n   * @description create necessary loaders\n   */\n  const _configurePlugins = () => {\n    if (meshesMetaData.length > 0) {\n      plugins.push(\n        createMeshLoader({\n          assets: meshesMetaData,\n          scene: scene,\n          loadingManager: manager,\n          loadingEventBus: loaderEventBus,\n        })\n      );\n    }\n\n    if (hdrMetaData !== undefined && hdrMetaData !== null) {\n      plugins.push(\n        createHDRLoader({\n          asset: hdrMetaData,\n          scene: scene,\n          renderer: renderer,\n          loadingManager: manager,\n          loadingEventBus: loaderEventBus,\n        })\n      );\n    }\n  };\n\n  /**\n   * @description configuration\n   */\n  const _configure = () => {\n    _configureLoadingManager();\n    _configurePlugins();\n  };\n\n  /**\n   * @description load all types of assets\n   */\n  const load = async (): Promise<{ success: []; error: [] }> => {\n    const promises: Promise<void>[] = [];\n\n    plugins.forEach((plugin) => {\n      promises.push(plugin.load());\n    });\n\n    await Promise.allSettled(promises);\n\n    return {\n      success: [],\n      error: [],\n    };\n  };\n\n  const dispose = () => {\n    plugins.forEach((plugin) => {\n      plugin.dispose?.();\n    });\n  };\n\n  return {\n    configure: _configure,\n    loadAll: load,\n    dispose: dispose,\n  };\n};\n"]}