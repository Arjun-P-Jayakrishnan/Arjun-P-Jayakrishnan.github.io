{"version":3,"sources":["../src/gameplay/navigation/player.ts"],"names":["PLAYER_CONSTANTS","createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","getThreeJsContext","controllers","state","Vector3","tempData","objects","mount","playerRoot","player","animations","controller","getControllers","mixer","AnimationMixer","animationController","createAnimationController","fsmController","createFSMController","err","updateMouse","mouse","updateKeyboard","keyboard","deltaTime","VELOCITY_DEADZONE","inputDirection","decay","FRICTION","updateControllers","Euler"],"mappings":"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","file":"chunk-ISUFU6NS.js","sourcesContent":["import { GenericLifeCycle, Nullable } from \"@utils/types/lifecycle\";\nimport {\n  AnimationController,\n  createAnimationController,\n} from \"controllers/animation\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { createFSMController, FSMController } from \"fsm/player\";\nimport {\n  ControllerManger,\n  getControllers,\n} from \"graphics/mechanics/controllers/controller\";\nimport { KeyboardController } from \"graphics/mechanics/controllers/plugins/keyboard\";\nimport { MouseController } from \"graphics/mechanics/controllers/plugins/mouse\";\nimport { getGlobalContext } from \"managers/globalContext\";\nimport { AnimationMixer, Euler, Object3D, Scene, Vector3 } from \"three\";\n\nexport interface PlayerProps {\n  rootMeshId: string;\n}\n\nexport interface Player extends GenericLifeCycle {\n  /** Update based on controller input */\n  update: (deltaTime: number) => {\n    position: Vector3;\n    rotation: Euler;\n    rotationDelta: { yaw: number; pitch: number };\n  };\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface Controllers {\n  input: {\n    mouse: Nullable<MouseController>;\n    keyboard: Nullable<KeyboardController>;\n  };\n  animation: AnimationController;\n  fsm: FSMController;\n}\n\ninterface ObjectReferences {\n  player: Nullable<Object3D>;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let controllers: Controllers;\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n\n  let objects: ObjectReferences = { player: null };\n\n  const mount = () => {\n    try {\n      const playerRoot = globalStorage.getStorage(\"player\").retrieve(\"player\");\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${props.rootMeshId}`);\n      }\n      const player = playerRoot?.groups;\n      const animations = playerRoot?.animations;\n\n      /**Input Controllers */\n      const controller = getControllers();\n\n      /**Animation */\n      const mixer = new AnimationMixer(player);\n      const animationController = createAnimationController({\n        mixer: mixer,\n        actions: {\n          Idle: mixer.clipAction(animations[0]),\n          Walk: mixer.clipAction(animations[3]),\n          Run: mixer.clipAction(animations[1]),\n        },\n        crossFadeDuration: 0.3,\n      });\n\n      const fsmController = createFSMController({\n        animationController: animationController,\n      });\n      fsmController.mount();\n\n      objects = {\n        player: player,\n      };\n\n      controllers = {\n        input: {\n          mouse: controller.getController(\"mouse\"),\n          keyboard: controller.getController(\"keyboard\"),\n        },\n        animation: animationController,\n        fsm: fsmController,\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (mouse: Nullable<MouseController>) => {\n    if (!mouse || !objects.player!) return;\n\n    state.rotationApplied = mouse.getRotation();\n    objects.player.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (\n    keyboard: Nullable<KeyboardController>,\n    deltaTime: number\n  ) => {\n    if (!keyboard || !objects.player) return;\n    const FRICTION = 5.0;\n    const VELOCITY_DEADZONE = 0.001;\n\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n    if (keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n    if (keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n    if (keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n    if (inputDirection.length() > 0) {\n      //normalize direction\n      inputDirection.applyQuaternion(objects.player.quaternion);\n      inputDirection.normalize();\n\n      //accelerate towards the direction\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n      //ensure the velocity doesn't go over the threshold\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n      const decay = Math.exp(-FRICTION * deltaTime);\n      state.velocity.multiplyScalar(decay);\n\n      if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n        state.velocity.set(0, 0, 0);\n      }\n    }\n\n    objects.player.position.add(state.velocity);\n  };\n\n  const updateControllers = (deltaTime: number) => {\n    updateMouse(controllers.input.mouse);\n    updateKeyboard(controllers.input.keyboard, deltaTime);\n  };\n\n  const update = (deltaTime: number) => {\n    updateControllers(deltaTime);\n\n    controllers.fsm.update(deltaTime);\n\n    return {\n      position: objects.player?.position ?? new Vector3(0, 0, 0),\n      rotation: objects.player?.rotation ?? new Euler(0, 0, 0, \"XYZ\"),\n      rotationDelta: state.rotationApplied,\n    };\n  };\n\n  const activate = () => {\n    // objects.playerRoot.rotation.set(0,0,0,'XYZ')\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    try {\n      //objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}