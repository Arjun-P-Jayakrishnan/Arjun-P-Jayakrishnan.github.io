{"version":3,"sources":["../src/graphics/loader/loader.ts"],"sourcesContent":["import { createEventBus } from \"@utils/event_management/eventBus\";\r\nimport { LoadingEvents } from \"@utils/event_management/eventType\";\r\nimport { GlobalState } from \"@utils/state/globalState\";\r\nimport { LoadingContext } from \"@utils/state/globalStateData\";\r\nimport { LoadingManager, Scene, WebGLRenderer } from \"three\";\r\nimport { createHDRLoader } from \"./file_type_plugins/hdr_loader\";\r\nimport { createMeshLoader } from \"./file_type_plugins/mesh_loader\";\r\nimport { AssetMetaData, LoaderPlugin } from \"./loaderPlugins\";\r\n\r\nexport interface LoaderOptions {\r\n  meshesMetaData: AssetMetaData[];\r\n  hdrMetaData?: AssetMetaData;\r\n}\r\n\r\nexport interface LoaderContext {\r\n  scene: Scene;\r\n  renderer: WebGLRenderer;\r\n  loaderEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\r\n  globalState: GlobalState;\r\n}\r\n\r\nexport interface Loader {\r\n  configure: () => void;\r\n  loadAll: () => Promise<{\r\n    success: string[];\r\n    error: string[];\r\n  }>;\r\n  dispose: () => void;\r\n}\r\n/**\r\n * @description creates a loader with the given settings\r\n * @param options options to change loader settings\r\n * @param context global context with references\r\n * @returns Loader\r\n */\r\nexport const createLoader = (\r\n  options: LoaderOptions,\r\n  context: LoaderContext\r\n): Loader => {\r\n  const { scene, renderer, loaderEventBus, globalState } = context;\r\n  const { meshesMetaData, hdrMetaData } = options;\r\n\r\n  const manager: LoadingManager = new LoadingManager();\r\n  const plugins: LoaderPlugin[] = [];\r\n\r\n  /**\r\n   * @description attaches the event bus for listening to loading changes\r\n   */\r\n  const _configureLoadingManager = () => {\r\n    manager.onStart = (url, itemsLoaded, itemsTotal) => {\r\n      loaderEventBus.emit({\r\n        type: \"load:start\",\r\n        url: url,\r\n        loaded: itemsLoaded,\r\n        total: itemsTotal,\r\n      });\r\n      globalState.setState({\r\n        loading: {\r\n          active: true,\r\n          progress: 0,\r\n        } as LoadingContext,\r\n      });\r\n    };\r\n\r\n    manager.onProgress = (url, itemsLoaded, itemsTotal) => {\r\n      loaderEventBus.emit({\r\n        type: \"load:progress\",\r\n        url: url,\r\n        loaded: itemsLoaded,\r\n        total: itemsTotal,\r\n      });\r\n      globalState.setState({\r\n        loading: {\r\n          active: true,\r\n          progress: itemsLoaded / itemsTotal,\r\n        } as LoadingContext,\r\n      });\r\n    };\r\n\r\n    manager.onLoad = () => {\r\n      loaderEventBus.emit({\r\n        type: \"load:complete\",\r\n      });\r\n    };\r\n\r\n    manager.onError = (url) => {\r\n      loaderEventBus.emit({\r\n        type: \"load:error\",\r\n        url: url,\r\n      });\r\n    };\r\n  };\r\n\r\n  /**\r\n   * @description create necessary loaders\r\n   */\r\n  const _configurePlugins = () => {\r\n    if (meshesMetaData.length > 0) {\r\n      plugins.push(\r\n        createMeshLoader({\r\n          assets: meshesMetaData,\r\n          scene: scene,\r\n          loadingManager: manager,\r\n          loadingEventBus: loaderEventBus,\r\n        })\r\n      );\r\n    }\r\n\r\n    if (hdrMetaData !== undefined && hdrMetaData !== null) {\r\n      plugins.push(\r\n        createHDRLoader({\r\n          asset: hdrMetaData,\r\n          scene: scene,\r\n          renderer: renderer,\r\n          loadingManager: manager,\r\n          loadingEventBus: loaderEventBus,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @description configuration\r\n   */\r\n  const _configure = () => {\r\n    _configureLoadingManager();\r\n    _configurePlugins();\r\n  };\r\n\r\n  /**\r\n   * @description load all types of assets\r\n   */\r\n  const load = async (): Promise<{ success: []; error: [] }> => {\r\n    const promises: Promise<void>[] = [];\r\n\r\n    plugins.forEach((plugin) => {\r\n      promises.push(plugin.load());\r\n    });\r\n\r\n    Promise.allSettled(promises);\r\n\r\n    return {\r\n      success: [],\r\n      error: [],\r\n    };\r\n  };\r\n\r\n  const dispose = () => {\r\n    plugins.forEach((plugin) => {\r\n      plugin.dispose?.();\r\n    });\r\n  };\r\n\r\n  return {\r\n    configure: _configure,\r\n    loadAll: load,\r\n    dispose: dispose,\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;AAIA,SAAS,sBAA4C;AA+B9C,IAAM,eAAe,CAC1B,SACA,YACW;AACX,QAAM,EAAE,OAAO,UAAU,gBAAgB,YAAY,IAAI;AACzD,QAAM,EAAE,gBAAgB,YAAY,IAAI;AAExC,QAAM,UAA0B,IAAI,eAAe;AACnD,QAAM,UAA0B,CAAC;AAKjC,QAAM,2BAA2B,MAAM;AACrC,YAAQ,UAAU,CAAC,KAAK,aAAa,eAAe;AAClD,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,QACN;AAAA,QACA,QAAQ;AAAA,QACR,OAAO;AAAA,MACT,CAAC;AACD,kBAAY,SAAS;AAAA,QACnB,SAAS;AAAA,UACP,QAAQ;AAAA,UACR,UAAU;AAAA,QACZ;AAAA,MACF,CAAC;AAAA,IACH;AAEA,YAAQ,aAAa,CAAC,KAAK,aAAa,eAAe;AACrD,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,QACN;AAAA,QACA,QAAQ;AAAA,QACR,OAAO;AAAA,MACT,CAAC;AACD,kBAAY,SAAS;AAAA,QACnB,SAAS;AAAA,UACP,QAAQ;AAAA,UACR,UAAU,cAAc;AAAA,QAC1B;AAAA,MACF,CAAC;AAAA,IACH;AAEA,YAAQ,SAAS,MAAM;AACrB,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,MACR,CAAC;AAAA,IACH;AAEA,YAAQ,UAAU,CAAC,QAAQ;AACzB,qBAAe,KAAK;AAAA,QAClB,MAAM;AAAA,QACN;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAKA,QAAM,oBAAoB,MAAM;AAC9B,QAAI,eAAe,SAAS,GAAG;AAC7B,cAAQ;AAAA,QACN,iBAAiB;AAAA,UACf,QAAQ;AAAA,UACR;AAAA,UACA,gBAAgB;AAAA,UAChB,iBAAiB;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AAEA,QAAI,gBAAgB,UAAa,gBAAgB,MAAM;AACrD,cAAQ;AAAA,QACN,gBAAgB;AAAA,UACd,OAAO;AAAA,UACP;AAAA,UACA;AAAA,UACA,gBAAgB;AAAA,UAChB,iBAAiB;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAKA,QAAM,aAAa,MAAM;AACvB,6BAAyB;AACzB,sBAAkB;AAAA,EACpB;AAKA,QAAM,OAAO,YAAiD;AAC5D,UAAM,WAA4B,CAAC;AAEnC,YAAQ,QAAQ,CAAC,WAAW;AAC1B,eAAS,KAAK,OAAO,KAAK,CAAC;AAAA,IAC7B,CAAC;AAED,YAAQ,WAAW,QAAQ;AAE3B,WAAO;AAAA,MACL,SAAS,CAAC;AAAA,MACV,OAAO,CAAC;AAAA,IACV;AAAA,EACF;AAEA,QAAM,UAAU,MAAM;AACpB,YAAQ,QAAQ,CAAC,WAAW;AAC1B,aAAO,UAAU;AAAA,IACnB,CAAC;AAAA,EACH;AAEA,SAAO;AAAA,IACL,WAAW;AAAA,IACX,SAAS;AAAA,IACT;AAAA,EACF;AACF;","names":[]}