{"version":3,"sources":["../src/graphics/gameplay/camera.ts"],"sourcesContent":["import { PerspectiveCamera, Vector3 } from \"three\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n}\n\nexport interface CameraControls {\n  update: (\n    playerPosition: Vector3,\n    rotation: { yaw: number; pitch: number }\n  ) => void;\n}\n\ninterface State {\n  yaw: number;\n  pitch: number;\n}\n\nconst CAMERA_CONSTANTS = {\n  THIRD_PERSON: {\n    OFFSET: new Vector3(0, 5, -10),\n    DISTANCE: 10,\n    HEIGHT_OFFSET: 3,\n    PITCH: {\n      MIN: 0,\n      MAX: Math.PI / 3,\n    },\n    SMOOTHING: 0.1,\n  },\n  FIRST_PERSON: {\n    OFFSET: new Vector3(0, 0, 0),\n  },\n};\n\nlet tempData: {\n  position: Vector3;\n  offset: Vector3;\n  lookTarget: Vector3;\n} = {\n  position: new Vector3(0, 0, 0),\n  offset: new Vector3(0, 0, 0),\n  lookTarget: new Vector3(0, 0, 0),\n};\n\nexport const createCameraControls = (props: CameraProps): CameraControls => {\n  const { camera } = props;\n  let isThirdPerson: boolean = true;\n  let state: State = {\n    pitch: 0,\n    yaw: 0,\n  };\n\n  const offset = tempData.offset;\n  const targetPosition = tempData.position;\n  const lookTarget = tempData.lookTarget;\n  const radius: number = CAMERA_CONSTANTS.THIRD_PERSON.DISTANCE ?? 5;\n\n  /**\n   *\n   * @param yaw\n   * @param pitch\n   */\n  const applyRotationDelta = (yaw: number, pitch: number) => {\n    state.yaw += yaw;\n    state.pitch += pitch;\n\n    state.pitch = Math.max(\n      CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MIN,\n      Math.min(state.pitch, CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MAX)\n    );\n  };\n\n  const update = (\n    playerPosition: Vector3,\n    rotation: { yaw: number; pitch: number }\n  ) => {\n    if (isThirdPerson) {\n      const { yaw, pitch } = rotation;\n\n      applyRotationDelta(yaw, pitch);\n\n      //Transform position of camera\n      offset.x = radius * Math.sin(state.yaw) * Math.cos(state.pitch);\n      offset.y =\n        radius * Math.sin(state.pitch) +\n        CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      offset.z = radius * Math.cos(state.yaw) * Math.cos(state.pitch);\n\n      //Apply target position and reach there\n      targetPosition.copy(playerPosition).add(offset);\n      camera.position.lerp(\n        tempData.position,\n        CAMERA_CONSTANTS.THIRD_PERSON.SMOOTHING\n      );\n\n      //Focus\n      lookTarget.copy(playerPosition);\n      lookTarget.y+=CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      camera.lookAt(lookTarget);\n    } else {\n      /**TODO: FPV */\n    }\n  };\n\n  return {\n    update: update,\n  };\n};\n"],"mappings":"AAAA,OAA4B,WAAAA,MAAe,QAkB3C,IAAMC,EAAmB,CACvB,aAAc,CACZ,OAAQ,IAAID,EAAQ,EAAG,EAAG,GAAG,EAC7B,SAAU,GACV,cAAe,EACf,MAAO,CACL,IAAK,EACL,IAAK,KAAK,GAAK,CACjB,EACA,UAAW,EACb,EACA,aAAc,CACZ,OAAQ,IAAIA,EAAQ,EAAG,EAAG,CAAC,CAC7B,CACF,EAEIE,EAIA,CACF,SAAU,IAAIF,EAAQ,EAAG,EAAG,CAAC,EAC7B,OAAQ,IAAIA,EAAQ,EAAG,EAAG,CAAC,EAC3B,WAAY,IAAIA,EAAQ,EAAG,EAAG,CAAC,CACjC,EAEaG,EAAwBC,GAAuC,CAC1E,GAAM,CAAE,OAAAC,CAAO,EAAID,EACfE,EAAyB,GACzBC,EAAe,CACjB,MAAO,EACP,IAAK,CACP,EAEMC,EAASN,EAAS,OAClBO,EAAiBP,EAAS,SAC1BQ,EAAaR,EAAS,WACtBS,EAAiBV,EAAiB,aAAa,UAAY,EAO3DW,EAAqB,CAACC,EAAaC,IAAkB,CACzDP,EAAM,KAAOM,EACbN,EAAM,OAASO,EAEfP,EAAM,MAAQ,KAAK,IACjBN,EAAiB,aAAa,MAAM,IACpC,KAAK,IAAIM,EAAM,MAAON,EAAiB,aAAa,MAAM,GAAG,CAC/D,CACF,EAkCA,MAAO,CACL,OAjCa,CACbc,EACAC,IACG,CACH,GAAIV,EAAe,CACjB,GAAM,CAAE,IAAAO,EAAK,MAAAC,CAAM,EAAIE,EAEvBJ,EAAmBC,EAAKC,CAAK,EAG7BN,EAAO,EAAIG,EAAS,KAAK,IAAIJ,EAAM,GAAG,EAAI,KAAK,IAAIA,EAAM,KAAK,EAC9DC,EAAO,EACLG,EAAS,KAAK,IAAIJ,EAAM,KAAK,EAC7BN,EAAiB,aAAa,cAChCO,EAAO,EAAIG,EAAS,KAAK,IAAIJ,EAAM,GAAG,EAAI,KAAK,IAAIA,EAAM,KAAK,EAG9DE,EAAe,KAAKM,CAAc,EAAE,IAAIP,CAAM,EAC9CH,EAAO,SAAS,KACdH,EAAS,SACTD,EAAiB,aAAa,SAChC,EAGAS,EAAW,KAAKK,CAAc,EAC9BL,EAAW,GAAGT,EAAiB,aAAa,cAC5CI,EAAO,OAAOK,CAAU,CAC1B,CAGF,CAIA,CACF","names":["Vector3","CAMERA_CONSTANTS","tempData","createCameraControls","props","camera","isThirdPerson","state","offset","targetPosition","lookTarget","radius","applyRotationDelta","yaw","pitch","playerPosition","rotation"]}