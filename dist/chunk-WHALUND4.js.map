{"version":3,"sources":["../src/engine/core/Engine.ts"],"names":["createEngine","serviceRegistry","getServiceRegistry","logger","lifecycleScheduler","storage","input","domManager","renderManager","onInit","createDomManager","createRenderManager","onLoad","queueStep","onMount","onUpdate","onUnmount"],"mappings":"qKAiBMA,IAAAA,CAAAA,CAAe,IAAc,CACjC,IAAMC,EAAmCC,CAAmB,EAAA,CACtD,CAACC,CAAAA,CAAQC,CAAoBC,CAAAA,CAAAA,CAASC,CAAK,CAAI,CAAA,CACnDL,CAAgB,CAAA,GAAA,CAAI,QAAQ,CAAA,CAC5BA,EAAgB,GAAI,CAAA,oBAAoB,CACxCA,CAAAA,CAAAA,CAAgB,GAAI,CAAA,sBAAsB,EAC1CA,CAAgB,CAAA,GAAA,CAAI,cAAc,CACpC,CAAA,CAEIM,EACAC,CAEEC,CAAAA,CAAAA,CAAS,IAAM,CACnB,OAAQ,CAAA,GAAA,CAAI,oBAAoB,CAChCF,CAAAA,CAAAA,CAAaG,GAAiB,EAAA,CAC9BF,CAAgBG,CAAAA,GAAAA,GAEhBP,CAAmB,CAAA,QAAA,CAASC,CAAQ,CAAA,OAAO,CAC3CD,CAAAA,CAAAA,CAAmB,SAASE,CAAM,CAAA,MAAM,EACxCF,CAAmB,CAAA,QAAA,CAASG,EAAW,MAAM,CAAA,CAC7CH,CAAmB,CAAA,QAAA,CAASI,CAAc,CAAA,MAAM,EAClD,CAEMI,CAAAA,CAAAA,CAAS,IAAM,CACnBR,CAAmB,CAAA,QAAA,CAASG,EAAW,MAAM,CAAA,CAC7CH,CAAmB,CAAA,QAAA,CAASI,CAAc,CAAA,MAAM,EAChDJ,CAAmB,CAAA,QAAA,CAASS,IAAUV,CAAO,CAAA,MAAA,CAAQ,CAAE,MAAQ,CAAA,QAAS,CAAC,CAAC,EAC5E,CAAA,CAEMW,EAAU,IAAM,CACpBX,CAAO,CAAA,OAAA,CAAQ,CAAE,MAAA,CAAQ,QAAS,CAAC,CAAA,CAEnCC,CAAmB,CAAA,QAAA,CAASG,CAAW,CAAA,OAAO,EAC9CH,CAAmB,CAAA,QAAA,CAASI,EAAc,OAAO,EACnD,EAEMO,CAAW,CAAA,IAAM,CACrBR,CAAAA,CAAW,QAAS,EAAA,CACpBH,EAAmB,QAASI,CAAAA,CAAAA,CAAc,QAAQ,EACpD,CAEMQ,CAAAA,CAAAA,CAAY,IAAM,CACtBb,CAAAA,CAAO,SAAU,CAAA,CAAE,MAAQ,CAAA,QAAS,CAAC,CACrCC,CAAAA,CAAAA,CAAmB,SAASG,CAAW,CAAA,SAAS,EAChDH,CAAmB,CAAA,QAAA,CAASI,CAAc,CAAA,SAAS,CACnDJ,CAAAA,CAAAA,CAAmB,SAASE,CAAM,CAAA,SAAS,EAC7C,CAAA,CAoCA,OAAO,CACL,GA7BU,CAAA,IAAM,CAEhBG,CAAAA,EAGA,CAAA,QAAA,CAAS,iBAAiB,kBAAoB,CAAA,IAAM,CAClDG,CAAAA,GACF,CAAC,EAGD,MAAO,CAAA,gBAAA,CAAiB,OAAQ,IAAM,CACpCE,GACAC,CAAAA,CAAAA,GACF,CAAC,CAGD,CAAA,MAAA,CAAO,iBAAiB,cAAgB,CAAA,IAAM,CAC5CC,CAAAA,GACF,CAAC,EAODZ,CAAmB,CAAA,GAAA,GACrB,CAIA,CACF","file":"chunk-WHALUND4.js","sourcesContent":["import { queueStep } from \"@utils/dsl\";\nimport { createDomManager, DOMManager } from \"engine/managers/DOMManger\";\nimport {\n  createRenderManager,\n  RenderManager,\n} from \"engine/managers/RenderManager\";\nimport { ServiceRegistry } from \"types/service.types\";\nimport { getServiceRegistry } from \"./ServiceRegistry\";\n\ninterface Engine {\n  run: () => void;\n}\n/**\n * @description Orchestration Layer that acts as a link to native\n * browser events for performing updates\n * @returns {Engine}\n */\nconst createEngine = (): Engine => {\n  const serviceRegistry: ServiceRegistry = getServiceRegistry();\n  const [logger, lifecycleScheduler, storage, input] = [\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"LifecycleScheduler\"),\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"InputManager\"),\n  ];\n\n  let domManager: DOMManager;\n  let renderManager: RenderManager;\n\n  const onInit = () => {\n    console.log(\"Engine initialized\");\n    domManager = createDomManager();\n    renderManager = createRenderManager();\n\n    lifecycleScheduler.schedule(storage.inflate);\n    lifecycleScheduler.schedule(input.onInit);\n    lifecycleScheduler.schedule(domManager.onInit);\n    lifecycleScheduler.schedule(renderManager.onInit);\n  };\n\n  const onLoad = () => {\n    lifecycleScheduler.schedule(domManager.onLoad);\n    lifecycleScheduler.schedule(renderManager.onLoad);\n    lifecycleScheduler.schedule(queueStep(logger.onLoad, { origin: \"Engine\" }));\n  };\n\n  const onMount = () => {\n    logger.onMount({ origin: \"Engine\" });\n\n    lifecycleScheduler.schedule(domManager.onMount);\n    lifecycleScheduler.schedule(renderManager.onMount);\n  };\n\n  const onUpdate = () => {\n    domManager.onUpdate();\n    lifecycleScheduler.schedule(renderManager.onUpdate);\n  };\n\n  const onUnmount = () => {\n    logger.onUnmount({ origin: \"Engine\" });\n    lifecycleScheduler.schedule(domManager.onUnmount);\n    lifecycleScheduler.schedule(renderManager.onUnmount);\n    lifecycleScheduler.schedule(input.onUnmount);\n  };\n\n  const onDispose = () => {\n    logger.onDestroy({ origin: \"Engine\" });\n    lifecycleScheduler.schedule(domManager.onDestroy);\n    lifecycleScheduler.schedule(renderManager.onDestroy);\n  };\n\n  const run = () => {\n    //onLoad essentials before mounting\n    onInit();\n\n    //after dom loaded mount\n    document.addEventListener(\"DOMContentLoaded\", () => {\n      onLoad();\n    });\n\n    //after resources are achieved\n    window.addEventListener(\"load\", () => {\n      onMount();\n      onUpdate();\n    });\n\n    //unmount and dispose\n    window.addEventListener(\"beforeunload\", () => {\n      onUnmount();\n    });\n\n    //Deprecated\n    // window.addEventListener(\"unload\", () => {\n    //   onDispose();\n    // });\n\n    lifecycleScheduler.run();\n  };\n\n  return {\n    run: run,\n  };\n};\n\nexport { createEngine };\nexport type { Engine };\n"]}