{"version":3,"sources":["../src/index.ts"],"names":["bootstrap"],"mappings":"gmDAoJAA,CAAU,EAAA","file":"index.js","sourcesContent":["// import {\n//   createWebComponentManager,\n//   WebComponentManager,\n// } from \"core/components/main\";\n// import { createGameManager, GameEngineManager } from \"core/game_engine/main\";\n// import { bootstrap } from \"engine/core/Bootstrap\";\n// import { getGlobalContext, References } from \"managers/globalContext\";\n\nimport { bootstrap } from \"engine/core/Bootstrap\";\n\n// interface Managers {\n//   webComponent: WebComponentManager;\n//   gameEngine: GameEngineManager;\n// }\n\n// let references: References;\n// let managers: Managers;\n// let flags = {\n//   isPreMounted: false,\n//   isMounted: false,\n// };\n\n// /**\n//  * Pre-mount setup: Initialize references and managers\n//  */\n// const preMount = () => {\n//   try {\n//     /**\n//      * References for global access\n//      */\n//     references = getGlobalContext();\n//     /**\n//      * Managers for web components and game engine\n//      */\n//     managers = {\n//       webComponent: createWebComponentManager(),\n//       gameEngine: createGameManager(),\n//     };\n\n//     managers.webComponent.mount();\n//     managers.gameEngine.mount();\n\n//     flags.isPreMounted = true;\n//   } catch (err) {\n//     console.error(`Error during pre-mount setup : ${err}`);\n//   }\n// };\n\n// const loadData = async () => {\n//   try {\n//     console.log(\"getting data from json files\");\n//     await managers.webComponent.load();\n//   } catch (err) {\n//     console.error(`Error loading data from json ${err}`);\n//   }\n// };\n\n// const loadAssets = async () => {\n//   try {\n//     /**\n//      * Loads all models , HDR  etc\n//      */\n//     const responses = await Promise.allSettled([managers.gameEngine.load()]);\n\n//     responses.forEach((response) => {\n//       if (response.status == \"rejected\") {\n//         console.error(\n//           `Failed to load models and mount game engine ${response.reason}`\n//         );\n//       }\n//     });\n\n//     /**\n//      * @description update the game engine\n//      * (uses self recursion method for rendering so only need to call once)\n//      */\n//     managers.gameEngine.update();\n//   } catch (err) {\n//     console.error(`Error while trying to load assets : ${err}`);\n//   }\n// };\n\n// /**\n//  * helps to add all necessary mounting function\n//  */\n// const mount = () => {\n//   try {\n//     if (!managers) throw new Error(`Error while pre-mounting.`);\n//     /**\n//      * Attach references to components and then mount tha game engine\n//      */\n//     managers.webComponent.attachReferences();\n\n//     if (\"requestIdleCallback\" in window) {\n//       window.requestIdleCallback(async () => {\n//         await loadAssets();\n//         await loadData();\n//       });\n//     } else {\n//       setTimeout(async () => {\n//         await loadAssets();\n//         await loadData();\n//       }, 200);\n//     }\n\n//     flags.isMounted = true;\n//   } catch (err) {\n//     console.error(`Error while main mount due to : ${err}`);\n//   }\n// };\n\n// /**\n//  * helps to clear any unmounted objects\n//  */\n// const unmount = () => {\n//   try {\n//     if (!flags.isMounted) return;\n//     managers.webComponent.unmount();\n//     managers.gameEngine.unmount();\n//   } catch (err) {\n//     console.error(`Error while main unmount due to : ${err}`);\n//   }\n// };\n\n// /**\n//  * entry point for the whole app\n//  */\n// const main = () => {\n//   preMount();\n\n//   /**\n//    * Mounts the components when dom is fully loaded\n//    */\n//   document.addEventListener(\"DOMContentLoaded\", () => {\n//     if (flags.isPreMounted) {\n//       mount();\n//     }\n//     /**\n//      * Unmounts everything when the window is going to unload\n//      */\n//     window.addEventListener(\"beforeunload\", () => {\n//       if (flags.isMounted) {\n//         unmount();\n//       }\n//     });\n//   });\n// };\n\nbootstrap();\n"]}