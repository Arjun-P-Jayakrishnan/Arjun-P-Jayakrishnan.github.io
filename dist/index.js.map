{"version":3,"sources":["../src/index.ts"],"names":["references","managers","flags","preMount","getGlobalContext","createWebComponentManager","createGameManager","GAME_MANAGER_PROPS","err","loadData","loadAssets","response","mount","unmount","main"],"mappings":"08BAaA,IAAIA,CAAAA,CACAC,CACAC,CAAAA,CAAAA,CAAQ,CACV,YAAA,CAAc,MACd,SAAW,CAAA,KACb,CAKMC,CAAAA,CAAAA,CAAW,IAAM,CACrB,GAAI,CAIFH,CAAAA,CAAaI,CAAiB,EAAA,CAI9BH,CAAW,CAAA,CACT,YAAcI,CAAAA,GAAAA,EACd,CAAA,UAAA,CAAYC,CAAkBC,CAAAA,GAAkB,CAClD,CAAA,CAEAN,EAAS,YAAa,CAAA,eAAA,EACtBA,CAAAA,CAAAA,CAAS,UAAW,CAAA,KAAA,EAEpBC,CAAAA,CAAAA,CAAM,YAAe,CAAA,CAAA,EACvB,CAASM,MAAAA,CAAAA,CAAK,CACZ,OAAA,CAAQ,MAAM,CAAkCA,+BAAAA,EAAAA,CAAG,CAAE,CAAA,EACvD,CACF,CAAA,CAEMC,CAAW,CAAA,SAAY,CAC3B,GAAI,CACF,OAAA,CAAQ,GAAI,CAAA,8BAA8B,EAC1C,MAAMR,CAAAA,CAAS,YAAa,CAAA,QAAA,GAC9B,CAAA,MAASO,EAAK,CACZ,OAAA,CAAQ,KAAM,CAAA,CAAA,6BAAA,EAAgCA,CAAG,CAAA,CAAE,EACrD,CACF,CAAA,CAEME,CAAa,CAAA,SAAY,CAC7B,GAAI,CAIgB,CAAA,MAAM,OAAQ,CAAA,UAAA,CAAW,CAACT,CAAAA,CAAS,UAAW,CAAA,IAAA,EAAM,CAAC,CAAA,EAE7D,OAASU,CAAAA,CAAAA,EAAa,CAC1BA,CAAAA,CAAS,MAAU,EAAA,UAAA,EACrB,OAAQ,CAAA,KAAA,CACN,CAA+CA,4CAAAA,EAAAA,CAAAA,CAAS,MAAM,CAAA,CAChE,EAEJ,CAAC,CAAA,CAMDV,CAAS,CAAA,UAAA,CAAW,MAAO,GAC7B,CAASO,MAAAA,CAAAA,CAAK,CACZ,OAAA,CAAQ,KAAM,CAAA,CAAA,oCAAA,EAAuCA,CAAG,CAAA,CAAE,EAC5D,CACF,CAAA,CAKMI,CAAQ,CAAA,IAAM,CAClB,GAAI,CACF,GAAI,CAACX,CAAU,CAAA,MAAM,IAAI,KAAA,CAAM,2BAA2B,CAI1DA,CAAAA,CAAAA,CAAS,YAAa,CAAA,gBAAA,EAElB,CAAA,qBAAA,GAAyB,MAC3B,CAAA,MAAA,CAAO,mBAAoB,CAAA,SAAY,CACrC,MAAMS,CAAW,EAAA,CACjB,MAAMD,CAAS,GACjB,CAAC,CAAA,CAED,UAAW,CAAA,SAAY,CACrB,MAAMC,CAAW,EAAA,CACjB,MAAMD,CAAAA,GACR,CAAA,CAAG,GAAG,CAGRP,CAAAA,CAAAA,CAAM,SAAY,CAAA,CAAA,EACpB,CAASM,MAAAA,CAAAA,CAAK,CACZ,OAAA,CAAQ,KAAM,CAAA,CAAA,gCAAA,EAAmCA,CAAG,CAAA,CAAE,EACxD,CACF,EAKMK,CAAU,CAAA,IAAM,CACpB,GAAI,CACF,GAAI,CAACX,CAAAA,CAAM,SAAW,CAAA,OACtBD,CAAS,CAAA,YAAA,CAAa,iBAAkB,EAAA,CACxCA,EAAS,UAAW,CAAA,OAAA,GACtB,CAAA,MAASO,CAAK,CAAA,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAqCA,kCAAAA,EAAAA,CAAG,CAAE,CAAA,EAC1D,CACF,CAAA,CAKMM,EAAO,IAAM,CACjBX,CAAS,EAAA,CAKT,QAAS,CAAA,gBAAA,CAAiB,kBAAoB,CAAA,IAAM,CAC9CD,CAAAA,CAAM,YACRU,EAAAA,CAAAA,EAKF,CAAA,MAAA,CAAO,iBAAiB,cAAgB,CAAA,IAAM,CACxCV,CAAAA,CAAM,SACRW,EAAAA,CAAAA,GAEJ,CAAC,EACH,CAAC,EACH,CAAA,CAOEC,CAAK,EAAA","file":"index.js","sourcesContent":["import {\n  createWebComponentManager,\n  WebComponentManager,\n} from \"@components/main\";\nimport { getGlobalContext, References } from \"@utils/globalContext\";\nimport { GAME_MANAGER_PROPS } from \"config/assets\";\nimport { createGameManager, GameEngineManager } from \"graphics/main\";\n\ninterface Managers {\n  webComponent: WebComponentManager;\n  gameEngine: GameEngineManager;\n}\n\nlet references: References;\nlet managers: Managers;\nlet flags = {\n  isPreMounted: false,\n  isMounted: false,\n};\n\n/**\n * Pre-mount setup: Initialize references and managers\n */\nconst preMount = () => {\n  try {\n    /**\n     * References for global access\n     */\n    references = getGlobalContext();\n    /**\n     * Managers for web components and game engine\n     */\n    managers = {\n      webComponent: createWebComponentManager(),\n      gameEngine: createGameManager(GAME_MANAGER_PROPS),\n    };\n\n    managers.webComponent.mountComponents();\n    managers.gameEngine.mount();\n\n    flags.isPreMounted = true;\n  } catch (err) {\n    console.error(`Error during pre-mount setup : ${err}`);\n  }\n};\n\nconst loadData = async () => {\n  try {\n    console.log(\"getting data from json files\");\n    await managers.webComponent.loadData();\n  } catch (err) {\n    console.error(`Error loading data from json ${err}`);\n  }\n};\n\nconst loadAssets = async () => {\n  try {\n    /**\n     * Loads all models , HDR  etc\n     */\n    const responses = await Promise.allSettled([managers.gameEngine.load()]);\n\n    responses.forEach((response) => {\n      if (response.status == \"rejected\") {\n        console.error(\n          `Failed to load models and mount game engine ${response.reason}`\n        );\n      }\n    });\n\n    /**\n     * @description update the game engine\n     * (uses self recursion method for rendering so only need to call once)\n     */\n    managers.gameEngine.update();\n  } catch (err) {\n    console.error(`Error while trying to load assets : ${err}`);\n  }\n};\n\n/**\n * helps to add all necessary mounting function\n */\nconst mount = () => {\n  try {\n    if (!managers) throw new Error(`Error while pre-mounting.`);\n    /**\n     * Attach references to components and then mount tha game engine\n     */\n    managers.webComponent.attachReferences();\n\n    if (\"requestIdleCallback\" in window) {\n      window.requestIdleCallback(async () => {\n        await loadAssets();\n        await loadData();\n      });\n    } else {\n      setTimeout(async () => {\n        await loadAssets();\n        await loadData();\n      }, 200);\n    }\n\n    flags.isMounted = true;\n  } catch (err) {\n    console.error(`Error while main mount due to : ${err}`);\n  }\n};\n\n/**\n * helps to clear any unmounted objects\n */\nconst unmount = () => {\n  try {\n    if (!flags.isMounted) return;\n    managers.webComponent.unmountComponents();\n    managers.gameEngine.unmount();\n  } catch (err) {\n    console.error(`Error while main unmount due to : ${err}`);\n  }\n};\n\n/**\n * entry point for the whole app\n */\nconst main = () => {\n  preMount();\n\n  /**\n   * Mounts the components when dom is fully loaded\n   */\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    if (flags.isPreMounted) {\n      mount();\n    }\n    /**\n     * Unmounts everything when the window is going to unload\n     */\n    window.addEventListener(\"beforeunload\", () => {\n      if (flags.isMounted) {\n        unmount();\n      }\n    });\n  });\n};\n\n/**\n * IIFE function\n * (Immediately Invoked Function Expression)\n */\n(() => {\n  main();\n})();\n"]}