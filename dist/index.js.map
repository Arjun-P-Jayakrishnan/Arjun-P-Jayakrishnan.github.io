{"version":3,"sources":["../src/index.ts"],"names":["references","managers","flags","preMount","getGlobalContext","createWebComponentManager","createGameManager","err","loadData","loadAssets","response","mount","unmount","main"],"mappings":"m7CAYA,IAAIA,CAAAA,CACAC,CACAC,CAAAA,CAAAA,CAAQ,CACV,YAAA,CAAc,MACd,SAAW,CAAA,KACb,CAKMC,CAAAA,CAAAA,CAAW,IAAM,CACrB,GAAI,CAIFH,CAAAA,CAAaI,CAAiB,EAAA,CAI9BH,CAAW,CAAA,CACT,YAAcI,CAAAA,GAAAA,EACd,CAAA,UAAA,CAAYC,CAAkB,EAChC,CAEAL,CAAAA,CAAAA,CAAS,aAAa,KAAM,EAAA,CAC5BA,CAAS,CAAA,UAAA,CAAW,KAAM,EAAA,CAE1BC,CAAM,CAAA,YAAA,CAAe,CACvB,EAAA,CAAA,MAASK,CAAK,CAAA,CACZ,OAAQ,CAAA,KAAA,CAAM,kCAAkCA,CAAG,CAAA,CAAE,EACvD,CACF,CAEMC,CAAAA,CAAAA,CAAW,SAAY,CAC3B,GAAI,CACF,OAAQ,CAAA,GAAA,CAAI,8BAA8B,CAAA,CAC1C,MAAMP,CAAS,CAAA,YAAA,CAAa,IAAK,GACnC,CAASM,MAAAA,CAAAA,CAAK,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAgCA,6BAAAA,EAAAA,CAAG,CAAE,CAAA,EACrD,CACF,CAEME,CAAAA,CAAAA,CAAa,SAAY,CAC7B,GAAI,CAAA,CAIgB,MAAM,OAAA,CAAQ,UAAW,CAAA,CAACR,CAAS,CAAA,UAAA,CAAW,IAAK,EAAC,CAAC,CAE7D,EAAA,OAAA,CAASS,CAAa,EAAA,CAC1BA,CAAS,CAAA,MAAA,EAAU,UACrB,EAAA,OAAA,CAAQ,KACN,CAAA,CAAA,4CAAA,EAA+CA,CAAS,CAAA,MAAM,CAChE,CAAA,EAEJ,CAAC,CAMDT,CAAAA,CAAAA,CAAS,UAAW,CAAA,MAAA,GACtB,CAAA,MAASM,CAAK,CAAA,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAuCA,oCAAAA,EAAAA,CAAG,CAAE,CAAA,EAC5D,CACF,CAKMI,CAAAA,CAAAA,CAAQ,IAAM,CAClB,GAAI,CACF,GAAI,CAACV,CAAAA,CAAU,MAAM,IAAI,KAAM,CAAA,2BAA2B,EAI1DA,CAAS,CAAA,YAAA,CAAa,gBAAiB,EAAA,CAEnC,qBAAyB,GAAA,MAAA,CAC3B,MAAO,CAAA,mBAAA,CAAoB,SAAY,CACrC,MAAMQ,CAAAA,EACN,CAAA,MAAMD,IACR,CAAC,CAED,CAAA,UAAA,CAAW,SAAY,CACrB,MAAMC,CAAAA,EACN,CAAA,MAAMD,CAAS,GACjB,CAAG,CAAA,GAAG,EAGRN,CAAM,CAAA,SAAA,CAAY,CACpB,EAAA,CAAA,MAASK,CAAK,CAAA,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAmCA,gCAAAA,EAAAA,CAAG,CAAE,CAAA,EACxD,CACF,CAAA,CAKMK,EAAU,IAAM,CACpB,GAAI,CACF,GAAI,CAACV,EAAM,SAAW,CAAA,OACtBD,CAAS,CAAA,YAAA,CAAa,OAAQ,EAAA,CAC9BA,EAAS,UAAW,CAAA,OAAA,GACtB,CAAA,MAASM,CAAK,CAAA,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAqCA,kCAAAA,EAAAA,CAAG,CAAE,CAAA,EAC1D,CACF,CAAA,CAKMM,EAAO,IAAM,CACjBV,CAAS,EAAA,CAKT,QAAS,CAAA,gBAAA,CAAiB,kBAAoB,CAAA,IAAM,CAC9CD,CAAAA,CAAM,YACRS,EAAAA,CAAAA,EAKF,CAAA,MAAA,CAAO,iBAAiB,cAAgB,CAAA,IAAM,CACxCT,CAAAA,CAAM,SACRU,EAAAA,CAAAA,GAEJ,CAAC,EACH,CAAC,EACH,CAAA,CAOEC,CAAK,EAAA","file":"index.js","sourcesContent":["import {\n  createWebComponentManager,\n  WebComponentManager,\n} from \"core/components/main\";\nimport { createGameManager, GameEngineManager } from \"core/game_engine/main\";\nimport { getGlobalContext, References } from \"managers/globalContext\";\n\ninterface Managers {\n  webComponent: WebComponentManager;\n  gameEngine: GameEngineManager;\n}\n\nlet references: References;\nlet managers: Managers;\nlet flags = {\n  isPreMounted: false,\n  isMounted: false,\n};\n\n/**\n * Pre-mount setup: Initialize references and managers\n */\nconst preMount = () => {\n  try {\n    /**\n     * References for global access\n     */\n    references = getGlobalContext();\n    /**\n     * Managers for web components and game engine\n     */\n    managers = {\n      webComponent: createWebComponentManager(),\n      gameEngine: createGameManager(),\n    };\n\n    managers.webComponent.mount();\n    managers.gameEngine.mount();\n\n    flags.isPreMounted = true;\n  } catch (err) {\n    console.error(`Error during pre-mount setup : ${err}`);\n  }\n};\n\nconst loadData = async () => {\n  try {\n    console.log(\"getting data from json files\");\n    await managers.webComponent.load();\n  } catch (err) {\n    console.error(`Error loading data from json ${err}`);\n  }\n};\n\nconst loadAssets = async () => {\n  try {\n    /**\n     * Loads all models , HDR  etc\n     */\n    const responses = await Promise.allSettled([managers.gameEngine.load()]);\n\n    responses.forEach((response) => {\n      if (response.status == \"rejected\") {\n        console.error(\n          `Failed to load models and mount game engine ${response.reason}`\n        );\n      }\n    });\n\n    /**\n     * @description update the game engine\n     * (uses self recursion method for rendering so only need to call once)\n     */\n    managers.gameEngine.update();\n  } catch (err) {\n    console.error(`Error while trying to load assets : ${err}`);\n  }\n};\n\n/**\n * helps to add all necessary mounting function\n */\nconst mount = () => {\n  try {\n    if (!managers) throw new Error(`Error while pre-mounting.`);\n    /**\n     * Attach references to components and then mount tha game engine\n     */\n    managers.webComponent.attachReferences();\n\n    if (\"requestIdleCallback\" in window) {\n      window.requestIdleCallback(async () => {\n        await loadAssets();\n        await loadData();\n      });\n    } else {\n      setTimeout(async () => {\n        await loadAssets();\n        await loadData();\n      }, 200);\n    }\n\n    flags.isMounted = true;\n  } catch (err) {\n    console.error(`Error while main mount due to : ${err}`);\n  }\n};\n\n/**\n * helps to clear any unmounted objects\n */\nconst unmount = () => {\n  try {\n    if (!flags.isMounted) return;\n    managers.webComponent.unmount();\n    managers.gameEngine.unmount();\n  } catch (err) {\n    console.error(`Error while main unmount due to : ${err}`);\n  }\n};\n\n/**\n * entry point for the whole app\n */\nconst main = () => {\n  preMount();\n\n  /**\n   * Mounts the components when dom is fully loaded\n   */\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    if (flags.isPreMounted) {\n      mount();\n    }\n    /**\n     * Unmounts everything when the window is going to unload\n     */\n    window.addEventListener(\"beforeunload\", () => {\n      if (flags.isMounted) {\n        unmount();\n      }\n    });\n  });\n};\n\n/**\n * IIFE function\n * (Immediately Invoked Function Expression)\n */\n(() => {\n  main();\n})();\n"]}