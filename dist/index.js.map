{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\r\n  createWebComponentManager,\r\n  WebComponentManager,\r\n} from \"@components/main\";\r\nimport { getGlobalContext, References } from \"@utils/globalContext\";\r\nimport { assetMetaData } from \"config/assetMetaData\";\r\nimport { createGameManager, GameEngineManager } from \"graphics/main\";\r\n\r\ninterface Managers {\r\n  webComponent: WebComponentManager;\r\n  gameEngine: GameEngineManager;\r\n}\r\n\r\nlet references: References;\r\n\r\nlet managers: Managers;\r\n\r\nconst mountWindowEventListeners = () => {};\r\n\r\nconst preMount = () => {\r\n  /**\r\n   * References\r\n   */\r\n  references = getGlobalContext();\r\n  /**\r\n   * Managers\r\n   */\r\n  managers = {\r\n    webComponent: createWebComponentManager(),\r\n    gameEngine: createGameManager({\r\n      loaderOptions: {\r\n        meshesMetaData: assetMetaData.meshes,\r\n        hdrMetaData: assetMetaData.hdr,\r\n      },\r\n    }),\r\n  };\r\n\r\n  managers.webComponent.mountComponents();\r\n};\r\n\r\n/**\r\n * helps to add all necessary mounting function\r\n */\r\nconst mount = () => {\r\n  /**\r\n   * Add Event Manager reference to web components for interaction\r\n   */\r\n  managers.webComponent.attachReferences();\r\n\r\n  /**\r\n   * Loads all models , HDR  etc\r\n   */\r\n  Promise.allSettled([managers.gameEngine.mount()]).then((responses) => {\r\n    responses.forEach((response) => {\r\n      if (response.status == \"rejected\") {\r\n        throw new Error(\r\n          `Failed to load models and mount game engine ${response.reason}`\r\n        );\r\n      }\r\n    });\r\n\r\n    console.log(\"all components mounted\");\r\n    /**\r\n     * @description update the game engine\r\n     * (uses self recursion method for rendering so only need to call once)\r\n     */\r\n    managers.gameEngine.update();\r\n  });\r\n};\r\n\r\n/**\r\n * helps to clear any unmounted objects\r\n */\r\nconst unmount = () => {\r\n  managers.webComponent.unmountComponents();\r\n  managers.gameEngine.unmount();\r\n};\r\n\r\n/**\r\n * entry point for the whole app\r\n */\r\nconst main = () => {\r\n  preMount();\r\n\r\n  /**\r\n   * Mounts the components when dom is fully loaded\r\n   */\r\n  document.addEventListener(\"DOMContentLoaded\", () => {\r\n    mount();\r\n    mountWindowEventListeners();\r\n    /**\r\n     * Unmounts everything when the window is going to unload\r\n     */\r\n    window.addEventListener(\"beforeunload\", () => {\r\n      unmount();\r\n    });\r\n  });\r\n};\r\n\r\n/**\r\n * IIFE function\r\n * (Immediately Invoked Function Expression)\r\n */\r\n(() => {\r\n  main();\r\n})();\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAI;AAEJ,IAAI;AAEJ,IAAM,4BAA4B,MAAM;AAAC;AAEzC,IAAM,WAAW,MAAM;AAIrB,eAAa,iBAAiB;AAI9B,aAAW;AAAA,IACT,cAAc,0BAA0B;AAAA,IACxC,YAAY,kBAAkB;AAAA,MAC5B,eAAe;AAAA,QACb,gBAAgB,cAAc;AAAA,QAC9B,aAAa,cAAc;AAAA,MAC7B;AAAA,IACF,CAAC;AAAA,EACH;AAEA,WAAS,aAAa,gBAAgB;AACxC;AAKA,IAAM,QAAQ,MAAM;AAIlB,WAAS,aAAa,iBAAiB;AAKvC,UAAQ,WAAW,CAAC,SAAS,WAAW,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,cAAc;AACpE,cAAU,QAAQ,CAAC,aAAa;AAC9B,UAAI,SAAS,UAAU,YAAY;AACjC,cAAM,IAAI;AAAA,UACR,+CAA+C,SAAS,MAAM;AAAA,QAChE;AAAA,MACF;AAAA,IACF,CAAC;AAED,YAAQ,IAAI,wBAAwB;AAKpC,aAAS,WAAW,OAAO;AAAA,EAC7B,CAAC;AACH;AAKA,IAAM,UAAU,MAAM;AACpB,WAAS,aAAa,kBAAkB;AACxC,WAAS,WAAW,QAAQ;AAC9B;AAKA,IAAM,OAAO,MAAM;AACjB,WAAS;AAKT,WAAS,iBAAiB,oBAAoB,MAAM;AAClD,UAAM;AACN,8BAA0B;AAI1B,WAAO,iBAAiB,gBAAgB,MAAM;AAC5C,cAAQ;AAAA,IACV,CAAC;AAAA,EACH,CAAC;AACH;AAAA,CAMC,MAAM;AACL,OAAK;AACP,GAAG;","names":[]}