{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  createWebComponentManager,\n  WebComponentManager,\n} from \"@components/main\";\nimport { getGlobalContext, References } from \"@utils/globalContext\";\nimport { assetMetaData } from \"config/assetMetaData\";\nimport { createGameManager, GameEngineManager } from \"graphics/main\";\n\ninterface Managers {\n  webComponent: WebComponentManager;\n  gameEngine: GameEngineManager;\n}\n\nlet references: References;\nlet managers: Managers;\n\nconst preMount = () => {\n  /**\n   * References\n   */\n  references = getGlobalContext();\n  /**\n   * Managers\n   */\n  managers = {\n    webComponent: createWebComponentManager(),\n    gameEngine: createGameManager({\n      loaderOptions: {\n        meshesMetaData: assetMetaData.meshes,\n        hdrMetaData: assetMetaData.hdr,\n      },\n    }),\n  };\n\n  managers.webComponent.mountComponents();\n};\n\n/**\n * helps to add all necessary mounting function\n */\nconst mount = () => {\n  /**\n   * Add Event Manager reference to web components for interaction\n   */\n  managers.webComponent.attachReferences();\n  managers.gameEngine.mount();\n\n  /**\n   * Loads all models , HDR  etc\n   */\n  Promise.allSettled([managers.gameEngine.load()]).then((responses) => {\n    responses.forEach((response) => {\n      if (response.status == \"rejected\") {\n        throw new Error(\n          `Failed to load models and mount game engine ${response.reason}`\n        );\n      }\n    });\n\n    /**\n     * @description update the game engine\n     * (uses self recursion method for rendering so only need to call once)\n     */\n    managers.gameEngine.update();\n  });\n};\n\n/**\n * helps to clear any unmounted objects\n */\nconst unmount = () => {\n  managers.webComponent.unmountComponents();\n  managers.gameEngine.unmount();\n};\n\n/**\n * entry point for the whole app\n */\nconst main = () => {\n  preMount();\n\n  /**\n   * Mounts the components when dom is fully loaded\n   */\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    mount();\n    /**\n     * Unmounts everything when the window is going to unload\n     */\n    window.addEventListener(\"beforeunload\", () => {\n      unmount();\n    });\n  });\n};\n\n/**\n * IIFE function\n * (Immediately Invoked Function Expression)\n */\n(() => {\n  main();\n})();\n"],"mappings":"4uBAaA,IAAIA,EACAC,EAEEC,EAAW,IAAM,CAIrBF,EAAaG,EAAiB,EAI9BF,EAAW,CACT,aAAcG,EAA0B,EACxC,WAAYC,EAAkB,CAC5B,cAAe,CACb,eAAgBC,EAAc,OAC9B,YAAaA,EAAc,GAC7B,CACF,CAAC,CACH,EAEAL,EAAS,aAAa,gBAAgB,CACxC,EAKMM,EAAQ,IAAM,CAIlBN,EAAS,aAAa,iBAAiB,EACvCA,EAAS,WAAW,MAAM,EAK1B,QAAQ,WAAW,CAACA,EAAS,WAAW,KAAK,CAAC,CAAC,EAAE,KAAMO,GAAc,CACnEA,EAAU,QAASC,GAAa,CAC9B,GAAIA,EAAS,QAAU,WACrB,MAAM,IAAI,MACR,+CAA+CA,EAAS,MAAM,EAChE,CAEJ,CAAC,EAMDR,EAAS,WAAW,OAAO,CAC7B,CAAC,CACH,EAKMS,EAAU,IAAM,CACpBT,EAAS,aAAa,kBAAkB,EACxCA,EAAS,WAAW,QAAQ,CAC9B,EAKMU,EAAO,IAAM,CACjBT,EAAS,EAKT,SAAS,iBAAiB,mBAAoB,IAAM,CAClDK,EAAM,EAIN,OAAO,iBAAiB,eAAgB,IAAM,CAC5CG,EAAQ,CACV,CAAC,CACH,CAAC,CACH,EAOEC,EAAK","names":["references","managers","preMount","getGlobalContext","createWebComponentManager","createGameManager","assetMetaData","mount","responses","response","unmount","main"]}