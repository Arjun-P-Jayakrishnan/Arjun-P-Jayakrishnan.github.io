{"version":3,"sources":["../src/graphics/gameplay/gameplay.ts"],"sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\nimport {\n  Clock,\n  Euler,\n  PerspectiveCamera,\n  Scene,\n  Vector3,\n  WebGLRenderer,\n} from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { CameraControls, createCameraControls } from \"./camera\";\nimport { ControllerManger, getControllers } from \"./controllers/controller\";\nimport { createPlayer, Player, PlayerProps } from \"./player\";\n\nexport interface GameplayOptions {\n  player: PlayerProps;\n}\n\nexport interface ThreeJSContext {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  camera: PerspectiveCamera;\n  controls: OrbitControls;\n}\n\nexport interface Gameplay {\n  mount: (context: ThreeJSContext) => void;\n  update: () => void;\n  unmount: () => void;\n}\n\ninterface References {\n  player: Player;\n  camera: CameraControls;\n  controllers: ControllerManger;\n}\n\ninterface State {\n  deltaTime: number;\n  mouseRotation: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface TempData {\n  deltaTime: number;\n  playerData: {\n    position: Vector3;\n    rotation: Euler;\n  } | null;\n}\n\nexport const createGameplay = (options: GameplayOptions): Gameplay => {\n  //\n  const { globalState, eventBusManager, globalStorage } = getGlobalContext();\n\n  const clock: Clock = new Clock();\n  let context: ThreeJSContext;\n  let references: References;\n\n  //Re usable state (no re-allocation)\n  let state: State = {\n    deltaTime: 0,\n    mouseRotation: {\n      yaw: 0,\n      pitch: 0,\n    },\n  };\n\n  let tempData: TempData = {\n    deltaTime: 0,\n    playerData: null,\n  };\n\n  const mount = (_context: ThreeJSContext): void => {\n    context = _context;\n\n    const controllers: ControllerManger = getControllers();\n    controllers.mount({\n      mouse: {\n        sensitivity: 0.01,\n      },\n    });\n\n    const player = createPlayer(\n      {\n        ids: options.player.ids,\n      },\n      {\n        scene: _context.scene,\n      }\n    );\n    player.create();\n\n    const camera = createCameraControls({\n      camera: _context.camera,\n    });\n\n    references = { player, camera, controllers };\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime)) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n    state.mouseRotation = references.controllers\n      .getController(\"mouse\")\n      ?.getRotation()!;\n    tempData.playerData = references.player.update(\n      state.deltaTime,\n      state.mouseRotation\n    );\n\n    references.camera.update(tempData.playerData.position, state.mouseRotation);\n  };\n\n  const unmount = () => {\n    references.player.destroy();\n    references.controllers.unmount();\n\n    ///De reference\n    references = null!;\n    context = null!;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n"],"mappings":"gKACA,OACE,SAAAA,MAMK,QA6CA,IAAMC,EAAkBC,GAAuC,CAEpE,GAAM,CAAE,YAAAC,EAAa,gBAAAC,EAAiB,cAAAC,CAAc,EAAIC,EAAiB,EAEnEC,EAAe,IAAIC,EACrBC,EACAC,EAGAC,EAAe,CACjB,UAAW,EACX,cAAe,CACb,IAAK,EACL,MAAO,CACT,CACF,EAEIC,EAAqB,CACvB,UAAW,EACX,WAAY,IACd,EAEMC,EAASC,GAAmC,CAChDL,EAAUK,EAEV,IAAMC,EAAgCC,EAAe,EACrDD,EAAY,MAAM,CAChB,MAAO,CACL,YAAa,GACf,CACF,CAAC,EAED,IAAME,EAASC,EACb,CACE,IAAKhB,EAAQ,OAAO,GACtB,EACA,CACE,MAAOY,EAAS,KAClB,CACF,EACAG,EAAO,OAAO,EAEd,IAAME,EAASC,EAAqB,CAClC,OAAQN,EAAS,MACnB,CAAC,EAEDJ,EAAa,CAAE,OAAAO,EAAQ,OAAAE,EAAQ,YAAAJ,CAAY,CAC7C,EAEMM,EAAkB,IAAY,CAClCT,EAAS,UAAYL,EAAM,SAAS,EAE/B,MAAMK,EAAS,SAAS,IAC3BD,EAAM,UAAYC,EAAS,UAE/B,EAwBA,MAAO,CACL,MAAOC,EACP,OAxBa,IAAM,CACnBQ,EAAgB,EAChBV,EAAM,cAAgBD,EAAW,YAC9B,cAAc,OAAO,GACpB,YAAY,EAChBE,EAAS,WAAaF,EAAW,OAAO,OACtCC,EAAM,UACNA,EAAM,aACR,EAEAD,EAAW,OAAO,OAAOE,EAAS,WAAW,SAAUD,EAAM,aAAa,CAC5E,EAcE,QAZc,IAAM,CACpBD,EAAW,OAAO,QAAQ,EAC1BA,EAAW,YAAY,QAAQ,EAG/BA,EAAa,KACbD,EAAU,IACZ,CAMA,CACF","names":["Clock","createGameplay","options","globalState","eventBusManager","globalStorage","getGlobalContext","clock","Clock","context","references","state","tempData","mount","_context","controllers","getControllers","player","createPlayer","camera","createCameraControls","updateDeltaTime"]}