{"version":3,"sources":["../../../src/materials/grid/grid-fragment.ts","../../../src/materials/grid/grid-vertex.ts","../../../src/materials/grid/grid-material.ts"],"names":["GridFragment","GridVertex","createGridMaterial","props","mat","ShaderMaterial","cameraPos"],"mappings":"mCAAO,IAAMA,CAAe,CAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;ACArB,CAAA,CAAA,IAAMC,CAAa,CAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;ECebC,IAAAA,CAAAA,CAAsBC,CAA6B,EAAA,CAC9D,IAAMC,CAAAA,CAAsB,IAAIC,cAAe,CAAA,CAC7C,QAAU,CAAA,CACR,IAAM,CAAA,CAAE,MAAO,CAAE,CAAA,CACjB,SAAW,CAAA,CAAE,KAAOF,CAAAA,CAAAA,CAAM,MAAO,CAAA,QAAS,CAC1C,CAAA,QAAA,CAAU,CAAE,KAAA,CAAOA,CAAM,CAAA,QAAS,EAClC,OAAS,CAAA,CAAE,KAAOA,CAAAA,CAAAA,CAAM,OAAQ,CAClC,EACA,YAAcF,CAAAA,CAAAA,CACd,cAAgBD,CAAAA,CAClB,CAAC,CAAA,CAMD,OAAO,CACL,GAAA,CAAKI,CACL,CAAA,MAAA,CANcE,CAAuB,EAAA,CACrCF,CAAI,CAAA,QAAA,CAAS,SAAU,CAAA,KAAA,CAAQE,EACjC,CAKA,CACF","file":"grid-material.js","sourcesContent":["export const GridFragment = `\n    precision highp float;\n\n    varying vec2 vUV;\n\n    float line(vec2 uv,float lineWidth){\n\n       \n        float lineAA=fwidth(uv.x);\n \n        float lineUV=1.0-abs(fract(uv.x)*2.0-1.0);\n\n        return smoothstep(lineWidth+lineAA,lineWidth-lineAA,lineUV);\n    }  \n\n    float grid(vec2 uv,float lineWidth){\n\n        vec2 uvDeriv=fwidth(uv);\n        vec2 drawWidth=max(vec2(lineWidth),uvDeriv);\n        vec2 lineAA=uvDeriv*1.5;\n \n        vec2 gridUV=1.0-abs(fract(uv)*2.0-1.0);\n\n        vec2 gridLines=smoothstep(drawWidth+lineAA,drawWidth-lineAA,gridUV);\n        gridLines*=clamp(lineWidth/drawWidth,0.0,1.0);\n\n        return mix(gridLines.x,1.0,gridLines.y);\n    } \n\n    void main(){\n        vec2 st=vUV*1500.0;\n       \n        gl_FragColor = vec4(vec3(grid(st,0.01)),1.0);\n    }\n\n`;\n","export const GridVertex = `\n    precision highp float;\n\n    \n\n    varying vec2 vUV;\n    varying vec4 vWorldPos; \n\n    void main(){\n        vUV=uv;\n        vWorldPos=modelViewMatrix*vec4(position,1.0);\n\n        gl_Position = projectionMatrix*modelViewMatrix*vec4(position,1.0);\n    }\n\n`;\n","import { PerspectiveCamera, ShaderMaterial, Vector3 } from \"three\";\nimport { GridFragment } from \"./grid-fragment\";\nimport { GridVertex } from \"./grid-vertex\";\n\nexport interface GridMaterialProps {\n  camera: PerspectiveCamera;\n  fadeNear: number;\n  fadeFar: number;\n}\n\nexport interface GridMaterial {\n  mat: ShaderMaterial;\n  update: (cameraPos: Vector3) => void;\n}\n\nexport const createGridMaterial = (props: GridMaterialProps) => {\n  const mat: ShaderMaterial = new ShaderMaterial({\n    uniforms: {\n      time: { value: 1 },\n      cameraPos: { value: props.camera.position },\n      fadeNear: { value: props.fadeNear },\n      fadeFar: { value: props.fadeFar },\n    },\n    vertexShader: GridVertex,\n    fragmentShader: GridFragment,\n  });\n\n  const update = (cameraPos: Vector3) => {\n    mat.uniforms.cameraPos.value = cameraPos;\n  };\n\n  return {\n    mat: mat,\n    update: update,\n  };\n};\n"]}