{"version":3,"sources":["../src/graphics/gameplay/modules/player.ts"],"sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\nimport { getThreeJsContext } from \"graphics/internal/context\";\nimport { AnimationMixer, Euler, Object3D, Scene, Vector3 } from \"three\";\nimport { getControllers } from \"../controllers/controller\";\n\nexport interface PlayerProps {\n  ids: {\n    rootMesh: string;\n  };\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  create: () => void;\n  update: (\n    deltaTime: number,\n    rotation: {\n      yaw: number;\n      pitch: number;\n    },\n    camera: {\n      rotation: Euler;\n    }\n  ) => {\n    position: Vector3;\n    rotation: Euler;\n  };\n  destroy: () => void;\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n  let inputs = getControllers();\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const create = () => {\n    try {\n      let playerRoot = contextManager\n        .getProperty(\"scene\")\n        .getObjectByName(props.ids.rootMesh);\n\n      // const playerRoot=scene.getObjectByName(props.ids.rootMesh) as Object3D;\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${props.ids.rootMesh}`\n        );\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (\n    mouse: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    state.rotationApplied = mouse;\n    objects.playerRoot.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (deltaTime: number) => {\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"w\")) {\n      inputDirection.z += 1;\n    }\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"s\")) {\n      inputDirection.z -= 1;\n    }\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"a\")) {\n      inputDirection.x += 1;\n    }\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"d\")) {\n      inputDirection.x -= 1;\n    }\n\n    if (inputDirection.length() > 0) {\n      inputDirection.normalize();\n    }\n\n    if (inputDirection.length() > 0) {\n      //accelerate towards the direction\n\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (state.velocity.length() > 0) {\n      state.velocity.multiplyScalar(\n        1 - PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n      );\n    }\n\n    objects.playerRoot.position.add(state.velocity);\n  };\n\n  const updateControllers = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    updateMouse(rotation, camera);\n    updateKeyboard(deltaTime);\n  };\n\n  const updateAnimation = (deltaTime: number) => {\n    animations.mixer!.update(deltaTime);\n  };\n\n  const update = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    if (animations.mixer) {\n      updateAnimation(deltaTime);\n    }\n\n    updateControllers(deltaTime, rotation, camera);\n\n    return {\n      position: objects.playerRoot.position,\n      rotation: objects.playerRoot.rotation,\n    };\n  };\n\n  const destroy = () => {\n    try {\n      objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    create: create,\n    update: update,\n    destroy: destroy,\n  };\n};\n"],"mappings":"wHAEA,OAAS,kBAAAA,EAAwC,WAAAC,MAAe,QAgDhE,IAAMC,EAAmB,CACvB,sBAAuB,IACvB,aAAc,GAChB,EAMaC,EAAgBC,GAA+B,CAC1D,GAAM,CAAE,gBAAAC,EAAiB,YAAAC,EAAa,cAAAC,CAAc,EAAIC,EAAiB,EACnEC,EAAiBC,EAAkB,EAErCC,EAAqB,CACvB,UAAW,IAAIC,EAAQ,EAAG,EAAG,EAAE,EAC/B,SAAU,IAAIA,EAAQ,EAAG,EAAG,CAAC,EAC7B,gBAAiB,CACf,MAAO,EACP,IAAK,CACP,CACF,EACIC,EAAqB,CACvB,eAAgB,IAAID,EAAQ,EAAG,EAAG,CAAC,CACrC,EACIE,EAASC,EAAe,EAExBC,EACAC,EAEEC,EAAS,IAAM,CACnB,GAAI,CACF,IAAIC,EAAaV,EACd,YAAY,OAAO,EACnB,gBAAgBL,EAAM,IAAI,QAAQ,EAIrC,GAAI,CAACe,EACH,MAAM,IAAI,MACR,mCAAmCf,EAAM,IAAI,QAAQ,EACvD,EAIFY,EAAU,CACR,WAAYG,CACd,EAEAF,EAAa,CACX,MAAO,IAAIG,EAAeD,CAAU,CACtC,CACF,OAASE,EAAK,CACZ,QAAQ,MAAM,iCAAiCA,CAAG,EAAE,CACtD,CACF,EAEMC,EAAc,CAClBC,EACAC,IACG,CACHb,EAAM,gBAAkBY,EACxBP,EAAQ,WAAW,SAAS,GAAKL,EAAM,gBAAgB,GACzD,EAEMc,EAAkBC,GAAsB,CAC5C,GAAM,CAAE,eAAAC,CAAe,EAAId,EAC3Bc,EAAe,IAAI,EAAG,EAAG,CAAC,EAEtBb,EAAO,cAAc,UAAU,EAAG,aAAa,GAAG,IACpDa,EAAe,GAAK,GAGlBb,EAAO,cAAc,UAAU,EAAG,aAAa,GAAG,IACpDa,EAAe,GAAK,GAGlBb,EAAO,cAAc,UAAU,EAAG,aAAa,GAAG,IACpDa,EAAe,GAAK,GAGlBb,EAAO,cAAc,UAAU,EAAG,aAAa,GAAG,IACpDa,EAAe,GAAK,GAGlBA,EAAe,OAAO,EAAI,GAC5BA,EAAe,UAAU,EAGvBA,EAAe,OAAO,EAAI,GAG5BhB,EAAM,SAAS,IACbgB,EAAe,eACbzB,EAAiB,sBAAwBwB,CAC3C,CACF,EAEAf,EAAM,SAAS,YAAY,EAAGT,EAAiB,YAAY,GAClDS,EAAM,SAAS,OAAO,EAAI,GACnCA,EAAM,SAAS,eACb,EAAIT,EAAiB,sBAAwBwB,CAC/C,EAGFV,EAAQ,WAAW,SAAS,IAAIL,EAAM,QAAQ,CAChD,EAEMiB,EAAoB,CACxBF,EACAG,EACAL,IACG,CACHF,EAAYO,EAAUL,CAAM,EAC5BC,EAAeC,CAAS,CAC1B,EAEMI,EAAmBJ,GAAsB,CAC7CT,EAAW,MAAO,OAAOS,CAAS,CACpC,EA2BA,MAAO,CACL,OAAQR,EACR,OA3Ba,CACbQ,EACAG,EACAL,KAEIP,EAAW,OACba,EAAgBJ,CAAS,EAG3BE,EAAkBF,EAAWG,EAAUL,CAAM,EAEtC,CACL,SAAUR,EAAQ,WAAW,SAC7B,SAAUA,EAAQ,WAAW,QAC/B,GAcA,QAXc,IAAM,CACpB,GAAI,CACFA,EAAQ,WAAW,MAAM,CAC3B,OAASK,EAAK,CACZ,QAAQ,MAAM,8BAA8BA,CAAG,EAAE,CACnD,CACF,CAMA,CACF","names":["AnimationMixer","Vector3","PLAYER_CONSTANTS","createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","contextManager","getThreeJsContext","state","Vector3","tempData","inputs","getControllers","objects","animations","create","playerRoot","AnimationMixer","err","updateMouse","mouse","camera","updateKeyboard","deltaTime","inputDirection","updateControllers","rotation","updateAnimation"]}