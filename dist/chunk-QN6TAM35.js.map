{"version":3,"sources":["../src/graphics/gameplay/modules/player.ts"],"names":["PLAYER_CONSTANTS","createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","contextManager","getThreeJsContext","state","Vector3","tempData","inputs","getControllers","objects","animations","create","playerRoot","AnimationMixer","err","updateMouse","mouse","camera","updateKeyboard","deltaTime","inputDirection","updateControllers","rotation","updateAnimation"],"mappings":"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","file":"chunk-QN6TAM35.js","sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\nimport { getThreeJsContext } from \"graphics/internal/context\";\nimport { AnimationMixer, Euler, Object3D, Scene, Vector3 } from \"three\";\nimport { getControllers } from \"../controllers/controller\";\n\nexport interface PlayerProps {\n  ids: {\n    rootMesh: string;\n  };\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  create: () => void;\n  update: (\n    deltaTime: number,\n    rotation: {\n      yaw: number;\n      pitch: number;\n    },\n    camera: {\n      rotation: Euler;\n    }\n  ) => {\n    position: Vector3;\n    rotation: Euler;\n  };\n  destroy: () => void;\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n  let inputs = getControllers();\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const create = () => {\n    try {\n      let playerRoot = contextManager\n        .getProperty(\"scene\")\n        .getObjectByName(props.ids.rootMesh);\n\n      // const playerRoot=scene.getObjectByName(props.ids.rootMesh) as Object3D;\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${props.ids.rootMesh}`\n        );\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (\n    mouse: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    state.rotationApplied = mouse;\n    objects.playerRoot.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (deltaTime: number) => {\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"w\")) {\n      inputDirection.z += 1;\n    }\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"s\")) {\n      inputDirection.z -= 1;\n    }\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"a\")) {\n      inputDirection.x += 1;\n    }\n\n    if (inputs.getController(\"keyboard\")!.isKeyPressed(\"d\")) {\n      inputDirection.x -= 1;\n    }\n\n    if (inputDirection.length() > 0) {\n      inputDirection.normalize();\n    }\n\n    if (inputDirection.length() > 0) {\n      //accelerate towards the direction\n\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (state.velocity.length() > 0) {\n      state.velocity.multiplyScalar(\n        1 - PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n      );\n    }\n\n    objects.playerRoot.position.add(state.velocity);\n  };\n\n  const updateControllers = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    updateMouse(rotation, camera);\n    updateKeyboard(deltaTime);\n  };\n\n  const updateAnimation = (deltaTime: number) => {\n    animations.mixer!.update(deltaTime);\n  };\n\n  const update = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    if (animations.mixer) {\n      updateAnimation(deltaTime);\n    }\n\n    updateControllers(deltaTime, rotation, camera);\n\n    return {\n      position: objects.playerRoot.position,\n      rotation: objects.playerRoot.rotation,\n    };\n  };\n\n  const destroy = () => {\n    try {\n      objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    create: create,\n    update: update,\n    destroy: destroy,\n  };\n};\n"]}