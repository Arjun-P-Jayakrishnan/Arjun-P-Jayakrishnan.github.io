{"version":3,"sources":["../src/plugins/fsm/player/controller.ts"],"names":["createPlayerFSMController","inputs","animationUnit","keyboard","shiftPressed","states","Idle","Walk","Run","state","currentState","update","deltaTime","playerFSM","isMoving","isShiftPressed","_getState","stateId","changeState","newState","mount"],"mappings":"+CA2BA,IAAMA,CAA4B,CAAA,CAAC,CACjC,MAAA,CAAAC,IACA,aAAAC,CAAAA,CACF,CAAiC,GAAA,KACzB,CAAS,QAAA,CAAAC,CAAS,CAAI,CAAA,CAC1B,KAAOF,CAAAA,GAAAA,CAAO,cAAc,OAAO,CAAA,CACnC,QAAUA,CAAAA,GAAAA,CAAO,cAAc,UAAU,CAC3C,CAEIG,CACEC,EAAgD,CACpD,IAAA,CAAMC,CAAK,CAAA,CACT,cAAeJ,CACf,CAAA,OAAA,CAAS,MACX,CAAC,EACD,IAAMK,CAAAA,GAAAA,CAAK,CACT,aAAA,CAAeL,EACf,OAAS,CAAA,MACX,CAAC,CAAA,CACD,IAAKM,CAAI,CAAA,CACP,aAAeN,CAAAA,CAAAA,CACf,QAAS,KACX,CAAC,CACH,CAAA,CAEIO,EAAwBJ,CAAO,CAAA,IAAA,CAC/BK,CAA8B,CAAA,MAAA,CAE5BC,EAAUC,CAAsB,EAAA,CACpCH,CAAM,CAAA,OAAA,CAAQI,CAAS,CACvBX,CAAAA,CAAAA,CAAc,MAAOU,CAAAA,CAAS,EAChC,CAEME,CAAAA,CAAAA,CAAW,IAEb,CAAA,EAAAX,CAAU,EAAA,YAAA,CAAa,GAAG,CAAA,EAC1BA,GAAU,YAAa,CAAA,GAAG,CAC1BA,EAAAA,CAAAA,EAAU,aAAa,GAAG,CAAA,EAC1BA,CAAU,EAAA,YAAA,CAAa,GAAG,CAQxBY,CAAAA,CAAAA,CAAAA,CAAiB,IACdZ,CAAAA,EAAU,aAAa,OAAO,CAAA,EAAK,KAGtCa,CAAAA,CAAAA,CAAaC,GACVZ,CAAOY,CAAAA,CAAO,CAGjBC,CAAAA,GAAAA,CAAeC,GAA4B,CAC3CT,CAAAA,GAAiBS,CACnBT,GAAAA,CAAAA,CAAeS,EACfV,CAAM,CAAA,IAAA,CAAKI,CAAS,CAAA,CACpBJ,EAAQO,CAAUG,CAAAA,CAAQ,CAC1BV,CAAAA,CAAAA,CAAM,MAAMI,CAAS,CAAA,EAEzB,CAEMO,CAAAA,CAAAA,CAAQ,IAAM,CAClBX,CAAAA,CAAM,KAAMI,CAAAA,CAAS,EACvB,CAEMA,CAAAA,CAAAA,CAAuB,CAC3B,WAAA,CAAaK,IACb,QAAUJ,CAAAA,CAAAA,CACV,cAAgBC,CAAAA,CAClB,EAIA,OAAO,CACL,KAAOK,CAAAA,CAAAA,CACP,OAAQT,CACR,CAAA,OAAA,CALc,IAAM,EAMtB,CACF","file":"chunk-VYXMJFI3.js","sourcesContent":["import { AnimationUnit } from \"engine/managers/animation/AnimationUnit\";\nimport { InputManager } from \"engine/managers/InputManager\";\nimport { PlayerStateId } from \"types/fsm.types\";\nimport { GenericFSM } from \"types/plugin.types\";\nimport { Idle, PlayerFSMState, Run, Walk } from \"./states\";\n\n/** Maineted internally by fsm controller */\ninterface PlayerFSM extends GenericFSM<PlayerStateId> {\n  /** helper to check if moving or stationary*/\n  isMoving: () => boolean;\n\n  /** helper to check if need to run or be in current state if not running */\n  isShiftPressed: () => boolean;\n}\n\ninterface FSMOptions {\n  inputs: InputManager;\n  animationUnit: AnimationUnit<PlayerStateId>;\n}\n\n/**Controls the animations */\ninterface FSMController {\n  mount: () => void;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\nconst createPlayerFSMController = ({\n  inputs,\n  animationUnit,\n}: FSMOptions): FSMController => {\n  const { mouse, keyboard } = {\n    mouse: inputs.getController(\"mouse\"),\n    keyboard: inputs.getController(\"keyboard\"),\n  };\n\n  let shiftPressed: boolean;\n  const states: Record<PlayerStateId, PlayerFSMState> = {\n    Idle: Idle({\n      animationUnit: animationUnit,\n      stateId: \"Idle\",\n    }),\n    Walk: Walk({\n      animationUnit: animationUnit,\n      stateId: \"Walk\",\n    }),\n    Run: Run({\n      animationUnit: animationUnit,\n      stateId: \"Run\",\n    }),\n  };\n\n  let state: PlayerFSMState = states.Idle;\n  let currentState: PlayerStateId = \"Idle\";\n\n  const update = (deltaTime: number) => {\n    state.execute(playerFSM);\n    animationUnit.update(deltaTime);\n  };\n\n  const isMoving = () => {\n    if (\n      keyboard?.isKeyPressed(\"w\") ||\n      keyboard?.isKeyPressed(\"a\") ||\n      keyboard?.isKeyPressed(\"s\") ||\n      keyboard?.isKeyPressed(\"d\")\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isShiftPressed = () => {\n    return keyboard?.isKeyPressed(\"shift\") ?? false;\n  };\n\n  const _getState = (stateId: PlayerStateId) => {\n    return states[stateId];\n  };\n\n  const changeState = (newState: PlayerStateId) => {\n    if (currentState !== newState) {\n      currentState = newState;\n      state.exit(playerFSM);\n      state = _getState(newState);\n      state.enter(playerFSM);\n    }\n  };\n\n  const mount = () => {\n    state.enter(playerFSM);\n  };\n\n  const playerFSM: PlayerFSM = {\n    changeState: changeState,\n    isMoving: isMoving,\n    isShiftPressed: isShiftPressed,\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n\nexport { createPlayerFSMController };\nexport type { FSMController, FSMOptions, PlayerFSM };\n"]}