{"version":3,"sources":["../src/core/game_engine/main.ts"],"names":["createGameManager","globalState","eventBusManager","getGlobalContext","isMounted","engine","createThreeJsInstance","gameplay","createGameplay","context","handleResize","height","width","handleDebug","addEventListeners","removeEventListeners","initializeContext","ctx","getThreeJsContext","processPipelineDebugger","error"],"mappings":"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","file":"chunk-HNJOBEY6.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { createThreeJsInstance } from \"./game_engine\";\nimport { getThreeJsContext, ThreeJsContext } from \"./game_context\";\nimport { createGameplay, Gameplay } from \"gameplay/gameplay\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { LifeCycle, Nullable } from \"@utils/types/lifecycle\";\n\nexport interface GameEngineManager extends LifeCycle {\n  update: () => void;\n  load: () => Promise<void>;\n}\n\nexport const createGameManager = (): GameEngineManager => {\n  //Reference to global managers\n  const { globalState, eventBusManager } = getGlobalContext();\n  let isMounted: boolean = false;\n\n  const engine = createThreeJsInstance({ domMountId: \"game-engine\" });\n  const gameplay: Gameplay = createGameplay();\n  let context: Nullable<ThreeJsContext> = null;\n\n  /** Resises Camera and Renderer on window resise */\n  const handleResize = () => {\n    if (!context) return;\n\n    const { height, width } = {\n      height: window.innerHeight,\n      width: window.innerWidth,\n    };\n\n    console.log(\"resising\");\n    context.camera.aspect = width / height;\n    context.camera.updateProjectionMatrix();\n    context.renderer.setSize(width, height);\n  };\n\n  const handleDebug = (e: KeyboardEvent) => {\n    if (!context || !(e.key.toLowerCase() === \"u\" && e.shiftKey)) return;\n\n    e.preventDefault();\n    eventBusManager.debugBus.emit({\n      type: \"debug:inspector\",\n      scene: context.scene,\n    });\n  };\n\n  /** Adds required event listeners */\n  const addEventListeners = () => {\n    /**\n     * Primary initialization to ensure correct aspect ratios\n     */\n    handleResize();\n\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"keydown\", handleDebug);\n  };\n\n  /** Release all event listeners to prevent memory leaks */\n  const removeEventListeners = () => {\n    window.removeEventListener(\"resize\", handleResize);\n    window.removeEventListener(\"keydown\", handleDebug);\n  };\n\n  const initializeContext = () => {\n    const ctx = getThreeJsContext();\n\n    context = {\n      scene: ctx.get(\"scene\"),\n      camera: ctx.get(\"camera\"),\n      renderer: ctx.get(\"renderer\"),\n      orbit: ctx.get(\"orbit\"),\n    };\n  };\n\n  const mount = () => {\n    if (isMounted) return;\n\n    engine.mount();\n    initializeContext();\n    addEventListeners();\n\n    isMounted = true;\n    processPipelineDebugger.onMount(\"game-engine\");\n  };\n\n  const load = async () => {\n    if (!isMounted) {\n      throw new Error(`Try to load before mounting`);\n    }\n    processPipelineDebugger.onLoad(\"game-engine\");\n    try {\n      await gameplay.mount(); // gameplay logic added after obtaining all assets\n      engine.register(gameplay.update); // pass the gameplay loop as callback to the game engine\n    } catch (error) {\n      console.error(`[Game Manager] Loading failed :${error}`);\n    }\n  };\n\n  const update = () => {\n    engine.render();\n  };\n\n  const unmount = () => {\n    if (!isMounted) return;\n    processPipelineDebugger.onUnmount(\"game-engine\");\n\n    removeEventListeners();\n\n    gameplay.unmount();\n    engine.unmount();\n\n    context = null;\n    isMounted = false;\n  };\n\n  return {\n    mount: mount,\n    unmount: unmount,\n    update: update,\n    load: load,\n  };\n};\n"]}