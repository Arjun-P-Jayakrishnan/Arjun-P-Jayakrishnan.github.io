{"version":3,"sources":["../src/gameplay/rooms/about/player.ts"],"names":["createPlayer","logger","reference","scene","storage","objects","animations","castShadow","player","child","playerRoot","AnimationMixer","err"],"mappings":"mCAgDO,IAAMA,EAAe,CAAC,CAC3B,MAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CAAAA,CACA,KAAAC,CAAAA,CAAAA,CACA,QAAAC,CACF,CAAA,GAA2B,CACzB,IAAIC,CACAC,CAAAA,CAAAA,CAEEC,CAAcC,CAAAA,CAAAA,EAAuC,CACzDA,CAAO,CAAA,QAAA,CAAUC,CAAU,EAAA,CACzBA,CAAM,CAAA,UAAA,CAAa,KACrB,CAAC,EACH,CA0CA,CAAA,OAAO,CACL,KAAA,CAzCY,IAAM,CAClB,GAAI,CACFR,EAAO,OAAQ,CAAA,CAAE,MAAQ,CAAA,mBAAoB,CAAC,CAAA,CAC9C,IAAIS,CAAAA,CAAaP,EAAM,eAAgBD,CAAAA,CAAAA,CAAU,EAAE,CAAA,CAEnD,GAAI,CAACQ,CACH,CAAA,MAAM,IAAI,KAAM,CAAA,CAAA,gCAAA,EAAmCR,CAAU,CAAA,EAAE,CAAE,CAAA,CAAA,CAInEG,CAAU,CAAA,CACR,WAAYK,CACd,CAAA,CAEAJ,CAAa,CAAA,CACX,KAAO,CAAA,IAAIK,cAAeD,CAAAA,CAAU,CACtC,EACF,CAAA,MAASE,CAAK,CAAA,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAiCA,8BAAAA,EAAAA,CAAG,EAAE,EACtD,CACF,CAsBE,CAAA,QAAA,CApBe,IAAM,CACjBP,CAAQ,CAAA,UAAA,GACVA,EAAQ,UAAW,CAAA,QAAA,CAAS,GAAI,CAAA,CAAA,CAAG,CAAC,IAAA,CAAK,EAAK,CAAA,CAAA,CAAG,EAAG,KAAK,CAAA,CACzDA,CAAQ,CAAA,UAAA,CAAW,UAAa,CAAA,IAAA,CAChCE,CAAWF,CAAAA,CAAAA,CAAQ,UAAU,CAE7BA,CAAAA,CAAAA,CAAQ,UAAW,CAAA,QAAA,CAAS,GAAI,CAAA,GAAA,CAAK,CAAG,CAAA,CAAC,GAE7C,CAaE,CAAA,UAAA,CAXiB,IAAM,EAYvB,CAAA,OAAA,CAVc,IAAM,CAChBA,EAAQ,UACVA,EAAAA,CAAAA,CAAQ,UAAW,CAAA,QAAA,CAAS,IAAI,GAAK,CAAA,CAAA,CAAG,CAAC,EAE7C,CAOA,CACF","file":"chunk-6LVG7XKN.js","sourcesContent":["import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  AnimationMixer,\n  Object3D,\n  Object3DEventMap,\n  Scene,\n  Vector3,\n} from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  logger: Logger;\n  storage: GlobalStorageManager;\n  scene: Scene;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = ({\n  logger,\n  reference,\n  scene,\n  storage,\n}: PlayerProps): Player => {\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      logger.onMount({ origin: \"about-room-player\" });\n      let playerRoot = scene.getObjectByName(reference.id);\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${reference.id}`);\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, -Math.PI / 4, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n"]}