{"version":3,"sources":["../src/core/loader/plugins/glb_loader.ts"],"names":["createGLBLoader","props","assets","scene","loadingManager","loadingEventBus","globalStorage","getGlobalContext","gltfLoader","GLTFLoader","dracoLoader","DRACOLoader","_loadMesh","metaData","model","err","promises","asset"],"mappings":"0KAgBaA,IAAAA,CAAAA,CAAmBC,CAAwC,EAAA,CACtE,GAAM,CAAE,OAAAC,CAAQ,CAAA,KAAA,CAAAC,CAAO,CAAA,cAAA,CAAAC,CAAgB,CAAA,eAAA,CAAAC,CAAgB,CAAA,CAAIJ,EACrD,CAAE,aAAA,CAAAK,CAAc,CAAA,CAAIC,CAAiB,EAAA,CAErCC,CAAyB,CAAA,IAAIC,WAAWL,CAAc,CAAA,CACtDM,CAAc,CAAA,IAAIC,WACxBD,CAAAA,CAAAA,CAAY,cAAe,CAAA,gBAAgB,EAC3CF,CAAW,CAAA,cAAA,CAAeE,CAAW,CAAA,CAMrC,IAAME,CAAAA,CAAY,MAAOC,CAAAA,EAAmC,CAC1D,GAAI,CACF,IAAMC,CAAAA,CAAQ,MAAMN,CAAAA,CAAW,SAAUK,CAAAA,CAAAA,CAAS,IAAI,CAEtDA,CAAAA,CAAAA,CAAS,SAAY,IAAA,CAErBP,EAAc,UAAWO,CAAAA,CAAAA,CAAS,IAAI,CAAA,CAAE,MAAMA,CAAS,CAAA,IAAA,CAAM,CAC3D,UAAA,CAAYC,CAAM,CAAA,UAAA,CAClB,MAAQA,CAAAA,CAAAA,CAAM,MACd,IAAM,CAAA,EACR,CAAC,CAAA,CAEDX,CAAM,CAAA,GAAA,CAAIW,CAAM,CAAA,KAAK,EAEvB,CAASC,MAAAA,CAAAA,CAAK,CACZ,MAAAF,CAAS,CAAA,OAAA,GAAUE,CAAY,CAAA,CAC/BV,EAAgB,IAAK,CAAA,CAAE,IAAM,CAAA,YAAA,CAAc,IAAKQ,CAAS,CAAA,IAAK,CAAC,CAAA,CAC/D,QAAQ,KAAME,CAAAA,CAAG,CACXA,CAAAA,CACR,CACF,CAAA,CAaA,OAAO,CACL,KAZW,SAAY,CACvB,IAAMC,CAAAA,CAA4B,EAAC,CACnCd,CAAO,CAAA,OAAA,CAASe,GAAU,CACxBD,CAAAA,CAAS,IAAKJ,CAAAA,CAAAA,CAAUK,CAAK,CAAC,EAChC,CAAC,EAED,MAAM,OAAA,CAAQ,UAAWD,CAAAA,CAAQ,EACnC,CAME,CAAA,OAAA,CAJc,IAAM,EAKtB,CACF","file":"chunk-QVHCH2K5.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { AnimationMixer, Scene } from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport type { LoadingManager } from \"three/src/loaders/LoadingManager.js\";\nimport { createEventBus } from \"@managers/events/eventBus\";\nimport { LoadingEvents } from \"@managers/events/eventType\";\nimport { LoaderPlugin, ModelAssetDescriptor } from \"@utils/types/loading\";\n\nexport interface GLBLoaderProps {\n  assets: ModelAssetDescriptor[];\n  scene: Scene;\n  loadingManager: LoadingManager;\n  loadingEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n}\n\nexport const createGLBLoader = (props: GLBLoaderProps): LoaderPlugin => {\n  const { assets, scene, loadingManager, loadingEventBus } = props;\n  const { globalStorage } = getGlobalContext();\n\n  const gltfLoader: GLTFLoader = new GLTFLoader(loadingManager);\n  const dracoLoader = new DRACOLoader();\n  dracoLoader.setDecoderPath(\"/public/draco/\");\n  gltfLoader.setDRACOLoader(dracoLoader);\n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: ModelAssetDescriptor) => {\n    try {\n      const model = await gltfLoader.loadAsync(metaData.path);\n\n      metaData.onSuccess?.();\n\n      globalStorage.getStorage(metaData.name).store(metaData.name, {\n        animations: model.animations,\n        groups: model.scene,\n        type: \"\",\n      });\n\n      scene.add(model.scene);\n      //model.scene.position.set(0, 0, 0);\n    } catch (err) {\n      metaData.onError?.(err as Error);\n      loadingEventBus.emit({ type: \"load:error\", url: metaData.path });\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const load = async () => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  const dispose = () => {};\n\n  return {\n    load: load,\n    dispose: dispose,\n  };\n};\n"]}