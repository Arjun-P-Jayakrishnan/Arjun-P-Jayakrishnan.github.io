{"version":3,"sources":["../src/gameplay/projects/player.ts"],"names":["createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","getThreeJsContext","Vector3","inputs","objects","mixers","castShadow","player","child","processPipelineDebugger","playerRoot","animations","mixer","AnimationMixer","anim","err","deltaTime"],"mappings":"8JAuDaA,IAAAA,CAAAA,CAAgBC,GAA+B,CAC1D,IAAM,CAAE,eAAAC,CAAAA,CAAAA,CAAiB,YAAAC,CAAa,CAAA,aAAA,CAAAC,CAAc,CAAIC,CAAAA,CAAAA,GACjCC,CAAAA,IAGE,CAAE,eAAgB,IAAIC,OAAAA,CAAQ,EAAG,CAAG,CAAA,CAAC,CAAE,EAC5DC,KAEAC,EAEAC,GAAAA,CAA2B,EAEzBC,CAAAA,CAAAA,CAAcC,GAAuC,CACzDA,CAAAA,CAAO,SAAUC,CAAU,EAAA,CACzBA,EAAM,UAAa,CAAA,KACrB,CAAC,EACH,EAuDA,OAAO,CACL,KAAA,CAtDY,IAAM,CAClB,GAAI,CACFC,GAAwB,CAAA,OAAA,CAAQ,mBAAmB,CACnD,CAAA,IAAIC,EAAaX,CACd,CAAA,UAAA,CAAW,QAAQ,CACnB,CAAA,QAAA,CAAS,QAAQ,CAAG,EAAA,MAAA,CACnBY,EAAWZ,CACZ,CAAA,UAAA,CAAW,QAAQ,CACnB,CAAA,QAAA,CAAS,QAAQ,CAAG,EAAA,UAAA,EAAc,EAIrC,CAAA,GAAI,CAACW,CACH,CAAA,MAAM,IAAI,KAAA,CAAM,CAAmCd,gCAAAA,EAAAA,CAAAA,CAAM,UAAU,CAAE,CAAA,CAAA,CAEvE,QAAQ,GAAI,CAAA,QAAA,CAAUc,CAAU,CAChC,CAAA,OAAA,CAAQ,IAAI,mBAAqBC,CAAAA,CAAU,EAE3CP,CAAU,CAAA,CACR,WAAYM,CACd,CAAA,CAGA,IAAME,CAAM,CAAA,IAAIC,eAAeH,CAAU,CAAA,CACzCC,EAAW,OAASG,CAAAA,CAAAA,EAAO,CACvBF,CAAM,CAAA,UAAA,CAAWE,CAAI,CAAE,CAAA,IAAA,GAC3B,CAAC,CAAA,CAEDT,IAAO,IAAKO,CAAAA,CAAK,EAEnB,CAASG,MAAAA,CAAAA,CAAK,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAiCA,8BAAAA,EAAAA,CAAG,CAAE,CAAA,EACtD,CACF,CAsBE,CAAA,QAAA,CApBe,IAAM,CACjBX,CAAAA,CAAQ,aACVA,CAAQ,CAAA,UAAA,CAAW,SAAS,GAAI,CAAA,CAAA,CAAG,EAAG,CAAG,CAAA,KAAK,EAC9CA,CAAQ,CAAA,UAAA,CAAW,WAAa,IAChCE,CAAAA,CAAAA,CAAWF,EAAQ,UAAU,CAAA,EAEjC,EAeE,MAbcY,CAAAA,CAAAA,EAAsB,CACpCX,GAAO,CAAA,OAAA,CAASO,GAAU,CACxBA,CAAAA,CAAM,OAAOI,CAAS,EACxB,CAAC,EACH,CAAA,CAUE,WARiB,IAAM,GASvB,OAPc,CAAA,IAAM,EAQtB,CACF","file":"chunk-CVDWBSZQ.js","sourcesContent":["import { getGlobalContext } from \"@managers/globalContext\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { Nullable } from \"core/lifecyle\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { getControllers } from \"graphics/mechanics/controllers/controller\";\nimport { KeyboardController } from \"graphics/mechanics/controllers/plugins/keyboard\";\nimport { MouseController } from \"graphics/mechanics/controllers/plugins/mouse\";\nimport {\n  AnimationMixer,\n  Bone,\n  Euler,\n  Group,\n  Mesh,\n  Object3D,\n  Object3DEventMap,\n  Scene,\n  Vector3,\n} from \"three\";\n\nexport interface PlayerProps {\n  storageId: string;\n  rootMeshId: string;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {};\n  let tempData: TempData = { inputDirection: new Vector3(0, 0, 0) };\n  let inputs: Nullable<MouseController>;\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n  let mixers: AnimationMixer[] = [];\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      processPipelineDebugger.onMount(\"about-room-player\");\n      let playerRoot = globalStorage\n        .getStorage(\"player\")\n        .retrieve(\"player\")?.groups;\n      let animations=globalStorage\n        .getStorage(\"player\")\n        .retrieve(\"player\")?.animations ?? [];\n\n     \n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${props.rootMeshId}`);\n      }\n      console.log(\"player\", playerRoot);\n      console.log(\"animations loaded\", animations);\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n     \n      // console.log('armature',armature)\n      const mixer=new AnimationMixer(playerRoot);\n      animations.forEach((anim)=>{\n          mixer.clipAction(anim).play()\n      })  \n\n      mixers.push(mixer)\n     \n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, 0, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n    }\n  };\n\n  const update = (deltaTime: number) => {\n    mixers.forEach((mixer) => {\n      mixer.update(deltaTime);\n    });\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n"]}