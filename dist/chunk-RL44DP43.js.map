{"version":3,"sources":["../src/gameplay/modules/fsm/player.ts"],"names":["Idle","props","player","Walk","Run","createFSMController","inputs","animationController","keyboard","shiftPressed","idle","walk","run","state","currentState","update","deltaTime","playerFSM","isMoving","isShiftPressed","_getState","newState","changeState","mount"],"mappings":"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","file":"chunk-RL44DP43.js","sourcesContent":["import { InputManager } from \"engine/managers/InputManager\";\nimport { AnimationController } from \"../animation\";\n\ntype States = \"Idle\" | \"Walk\" | \"Run\";\n\ninterface PlayerFSM {\n  changeState: (state: States) => void;\n  isMoving: () => boolean;\n  isShiftPressed: () => boolean;\n}\n\ninterface StateProps {\n  animationId: string;\n  animationController: AnimationController;\n}\n\ninterface State {\n  enter: (player: PlayerFSM) => void;\n  execute: (player: PlayerFSM) => void;\n  exit: (player: PlayerFSM) => void;\n}\n\nconst Idle = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter idle\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (player.isMoving()) {\n      if (player.isShiftPressed()) {\n        player.changeState(\"Run\");\n      } else {\n        player.changeState(\"Walk\");\n      }\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit idle\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Walk = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter walk\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (player.isShiftPressed()) {\n      player.changeState(\"Run\");\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit walk\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Run = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter run\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (!player.isShiftPressed()) {\n      player.changeState(\"Walk\");\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit run\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nexport interface FSMOptions {\n  inputs: InputManager;\n  animationController: AnimationController;\n}\n\nexport interface FSMController {\n  mount: () => void;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\nexport const createFSMController = ({\n  inputs,\n  animationController,\n}: FSMOptions): FSMController => {\n  const { mouse, keyboard } = {\n    mouse: inputs.getController(\"mouse\"),\n    keyboard: inputs.getController(\"keyboard\"),\n  };\n\n  let shiftPressed: boolean;\n  const { idle, walk, run } = {\n    idle: Idle({\n      animationController: animationController,\n      animationId: \"Idle\",\n    }),\n    walk: Walk({\n      animationController: animationController,\n      animationId: \"Walk\",\n    }),\n    run: Run({\n      animationController: animationController,\n      animationId: \"Run\",\n    }),\n  };\n  let state: State = idle;\n  let currentState: States = \"Idle\";\n\n  const update = (deltaTime: number) => {\n    state.execute(playerFSM);\n    animationController.update(deltaTime);\n  };\n\n  const isMoving = () => {\n    if (\n      keyboard?.isKeyPressed(\"w\") ||\n      keyboard?.isKeyPressed(\"a\") ||\n      keyboard?.isKeyPressed(\"s\") ||\n      keyboard?.isKeyPressed(\"d\")\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isShiftPressed = () => {\n    return keyboard?.isKeyPressed(\"shift\") ?? false;\n  };\n\n  const _getState = (newState: States) => {\n    switch (newState) {\n      case \"Idle\":\n        return idle;\n      case \"Walk\":\n        return walk;\n      case \"Run\":\n        return run;\n      default:\n        return idle;\n    }\n  };\n\n  const changeState = (newState: States) => {\n    if (currentState !== newState) {\n      currentState = newState;\n      state.exit(playerFSM);\n      state = _getState(newState);\n      state.enter(playerFSM);\n    }\n  };\n\n  const mount = () => {\n    state.enter(playerFSM);\n  };\n\n  const playerFSM: PlayerFSM = {\n    changeState: changeState,\n    isMoving: isMoving,\n    isShiftPressed: isShiftPressed,\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}