{"version":3,"sources":["../src/graphics/loader/file_type_plugins/hdr_loader.ts"],"sourcesContent":["import { createEventBus } from \"@utils/event_management/eventBus\";\nimport type { LoadingEvents } from \"@utils/event_management/eventType\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\nimport type { AssetMetaData, LoaderPlugin } from \"../loaderPlugins\";\nimport { DataTexture, LoadingManager, PMREMGenerator, Scene, WebGLRenderer } from \"three\";\n\nexport interface HDRTextureLoaderProps {\n  asset: AssetMetaData;\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loadingManager: LoadingManager;\n  loadingEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n}\n\n/**\n * @description loads .hdr files and illuminates scene\n * @param props hdr loading properties\n * @returns HDR loader plugin\n */\nexport const createHDRLoader = (props: HDRTextureLoaderProps): LoaderPlugin => {\n  const { asset, scene, renderer, loadingManager, loadingEventBus } = props;\n\n  const pmremGenerator: PMREMGenerator = new PMREMGenerator(renderer);\n  const rgbeLoader: RGBELoader = new RGBELoader(loadingManager);\n\n  /**\n   * @description loads a hdr file\n   * @param metaData meta-data for loading hdr\n   */\n  const _loadHDRTexture = async (metaData: AssetMetaData): Promise<void> => {\n    return new Promise((reject, resolve) => {\n      rgbeLoader.load(\n        metaData.path,\n        (data: DataTexture, texData: object) => {\n          const envMap = pmremGenerator.fromEquirectangular(data).texture;\n          data.dispose();\n          scene.environment = envMap;\n          metaData.onSuccess?.();\n          resolve();\n        },\n        undefined,\n        (err) => {\n          metaData.onError?.(err as Error);\n          loadingEventBus.emit({ type: \"load:error\", url: metaData.path });\n          reject();\n        }\n      );\n    });\n  };\n\n  const load = async () => {\n    await _loadHDRTexture(asset);\n  };\n\n  const dispose = () => {\n    pmremGenerator.dispose();\n  };\n\n  return {\n    load: load,\n    dispose: dispose,\n  };\n};\n"],"mappings":"AAEA,OAAS,cAAAA,MAAkB,2CAE3B,OAAsC,kBAAAC,MAA4C,QAe3E,IAAMC,EAAmBC,GAA+C,CAC7E,GAAM,CAAE,MAAAC,EAAO,MAAAC,EAAO,SAAAC,EAAU,eAAAC,EAAgB,gBAAAC,CAAgB,EAAIL,EAE9DM,EAAiC,IAAIR,EAAeK,CAAQ,EAC5DI,EAAyB,IAAIV,EAAWO,CAAc,EAMtDI,EAAkB,MAAOC,GACtB,IAAI,QAAQ,CAACC,EAAQC,IAAY,CACtCJ,EAAW,KACTE,EAAS,KACT,CAACG,EAAmBC,IAAoB,CACtC,IAAMC,EAASR,EAAe,oBAAoBM,CAAI,EAAE,QACxDA,EAAK,QAAQ,EACbV,EAAM,YAAcY,EACpBL,EAAS,YAAY,EACrBE,EAAQ,CACV,EACA,OACCI,GAAQ,CACPN,EAAS,UAAUM,CAAY,EAC/BV,EAAgB,KAAK,CAAE,KAAM,aAAc,IAAKI,EAAS,IAAK,CAAC,EAC/DC,EAAO,CACT,CACF,CACF,CAAC,EAWH,MAAO,CACL,KATW,SAAY,CACvB,MAAMF,EAAgBP,CAAK,CAC7B,EAQE,QANc,IAAM,CACpBK,EAAe,QAAQ,CACzB,CAKA,CACF","names":["RGBELoader","PMREMGenerator","createHDRLoader","props","asset","scene","renderer","loadingManager","loadingEventBus","pmremGenerator","rgbeLoader","_loadHDRTexture","metaData","reject","resolve","data","texData","envMap","err"]}