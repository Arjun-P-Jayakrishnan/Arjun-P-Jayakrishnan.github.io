{"version":3,"sources":["../src/gameplay/projects/room.ts"],"names":["createProjectRoom","groundId","playerId","storageId","globalStorage","getGlobalContext","context","getThreeJsContext","scene","camera","orbit","components","createCameraManager","createPlayer","createGround","createLighting","group","processPipelineDebugger","deltaTime"],"mappings":"+RA2BaA,IAAAA,CAAAA,CAAoB,CAAC,CAChC,QAAA,CAAAC,EACA,QAAAC,CAAAA,CAAAA,CACA,SAAAC,CAAAA,CACF,CAA8B,GAAA,CAE5B,GAAM,CAAE,aAAA,CAAAC,CAAc,CAAIC,CAAAA,CAAAA,GACpBC,CAAiCC,CAAAA,CAAAA,EACjC,CAAA,CAAE,KAAAC,CAAAA,CAAAA,CAAO,OAAAC,CAAQ,CAAA,KAAA,CAAAC,GAAM,CAAI,CAAA,CAC/B,MAAOJ,CAAQ,CAAA,GAAA,CAAI,OAAO,CAAA,CAC1B,MAAQA,CAAAA,CAAAA,CAAQ,IAAI,QAAQ,CAAA,CAC5B,MAAOA,CAAQ,CAAA,GAAA,CAAI,OAAO,CAC5B,CAAA,CAGMK,CAAyB,CAAA,CAC7B,MAAQC,CAAAA,GAAAA,CAAoB,CAAE,MAAQH,CAAAA,CAAAA,CAAQ,MAAOD,CAAO,CAAA,KAAA,CAAOE,GAAM,CAAC,CAAA,CAC1E,MAAQG,CAAAA,GAAAA,CAAa,CAAE,SAAA,CAAWV,EAAW,UAAYD,CAAAA,CAAS,CAAC,CACnE,CAAA,MAAA,CAAQY,IAAa,CAAE,QAAA,CAAUb,CAAU,CAAA,SAAA,CAAWE,CAAU,CAAC,EACjE,QAAUY,CAAAA,GAAAA,EACZ,CACIC,CAAAA,CAAAA,CAA2C,KA8C/C,OAAO,CACL,KA7CY,CAAA,IAAM,CAClBC,GAAAA,CAAwB,QAAQ,eAAe,CAAA,CAC/CN,CAAW,CAAA,MAAA,CAAO,KAAM,EAAA,CACxBA,EAAW,MAAO,CAAA,KAAA,EAClBA,CAAAA,CAAAA,CAAW,MAAO,CAAA,KAAA,GAClBA,CAAW,CAAA,QAAA,CAAS,OAEpBK,CAAAA,CAAAA,CACEZ,EAAc,UAAWD,CAAAA,CAAS,CAAE,CAAA,QAAA,CAASA,CAAS,CAAA,EAAG,QAAU,KACvE,CAAA,CAqCE,UAnCe,IAAM,CACjBa,IAAOA,CAAM,CAAA,OAAA,CAAU,IAE3BC,CAAAA,CAAAA,GAAAA,CAAwB,MAAO,CAAA,oBAAoB,EACnDN,CAAW,CAAA,MAAA,CAAO,UAClBA,CAAAA,CAAAA,CAAW,OAAO,QAAS,EAAA,CAC3BA,CAAW,CAAA,QAAA,CAAS,QAAS,EAAA,CAC7BA,EAAW,MAAO,CAAA,QAAA,GACpB,CAAA,CA4BE,MA1BcO,CAAAA,CAAAA,EAAsB,CAEpCP,CAAW,CAAA,MAAA,CAAO,MAAOO,CAAAA,CAAS,CAClCP,CAAAA,CAAAA,CAAW,OAAO,MAAOO,CAAAA,CAAS,EAEpC,CAsBE,CAAA,WAAA,CApBiB,IAAM,CACnBF,CAAAA,GAAOA,CAAM,CAAA,OAAA,CAAU,KAE3BL,CAAAA,CAAAA,CAAAA,CAAW,OAAO,UAAW,EAAA,CAC7BA,EAAW,MAAO,CAAA,UAAA,GAClBA,CAAW,CAAA,QAAA,CAAS,UAAW,EAAA,CAC/BA,CAAW,CAAA,MAAA,CAAO,aACpB,CAAA,CAcE,QAZc,IAAM,CACpBA,EAAW,MAAO,CAAA,OAAA,EAClBA,CAAAA,CAAAA,CAAW,MAAO,CAAA,OAAA,GAClBA,CAAW,CAAA,QAAA,CAAS,OAAQ,EAAA,CAC5BA,CAAW,CAAA,MAAA,CAAO,UACpB,CAAA,CAQE,QAAU,CAAA,KACZ,CACF","file":"chunk-QI2MCI4D.js","sourcesContent":["import {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"core/game_engine/game_context\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { createPlayer, Player } from \"./player\";\nimport { createGround, Ground } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { getGlobalContext } from \"@managers/globalContext\";\nimport { Group, Object3DEventMap } from \"three\";\nimport { Room } from \"@utils/types/room\";\nimport { Nullable } from \"@utils/types/lifecycle\";\n\nexport interface ProjectRoomProps {\n  storageId: string;\n  playerId: string;\n  groundId: string;\n}\n\ninterface Components {\n  camera: CameraManager;\n  player: Player;\n  ground: Ground;\n  lighting: Lighting;\n}\n\nexport const createProjectRoom = ({\n  groundId,\n  playerId,\n  storageId,\n}: ProjectRoomProps): Room => {\n  //====References===\n  const { globalStorage } = getGlobalContext();\n  const context: ThreeJsContextManager = getThreeJsContext();\n  const { scene, camera, orbit } = {\n    scene: context.get(\"scene\"),\n    camera: context.get(\"camera\"),\n    orbit: context.get(\"orbit\"),\n  };\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({ camera: camera, scene: scene, orbit: orbit }),\n    player: createPlayer({ storageId: storageId, rootMeshId: playerId }),\n    ground: createGround({ groundId: groundId, storageId: storageId }),\n    lighting: createLighting(),\n  };\n  let group: Nullable<Group<Object3DEventMap>> = null;\n\n  const mount = () => {\n    processPipelineDebugger.onMount(\"projects-room\");\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n\n    group =\n      globalStorage.getStorage(storageId).retrieve(storageId)?.groups ?? null;\n  };\n\n  const activate = () => {\n    if (group) group.visible = true;\n\n    processPipelineDebugger.onInit(\"projects-room-init\");\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n  };\n\n  const update = (deltaTime: number) => {\n    // components.camera.update(deltaTime);\n    components.player.update(deltaTime);\n    components.camera.update(deltaTime);\n    //orbit.update();\n  };\n\n  const deactivate = () => {\n    if (group) group.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded: false,\n  };\n};\n"]}