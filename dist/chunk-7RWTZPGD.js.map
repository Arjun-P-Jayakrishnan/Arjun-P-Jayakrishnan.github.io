{"version":3,"sources":["../src/gameplay/rooms/navigation/room.ts"],"names":["createNavigationRoom","player","ground","serviceRegistry","getServiceRegistry","logger","storage","eventBusManager","InputManager","contextManager","components","createCameraManager","createPlayer","createGround","state","room","isMounted","Vector3","Euler","deltaTime"],"mappings":"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","file":"chunk-7RWTZPGD.js","sourcesContent":["import { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { InputManager } from \"engine/managers/InputManager\";\nimport { Euler, Vector3 } from \"three\";\nimport { ObjectStorageUnit } from \"types/managers.types\";\nimport { ModelIdentifier, Room } from \"types/rooms.types\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { createGround, Ground } from \"./ground\";\nimport { createPlayer, Player } from \"./player\";\n\nexport interface NavigationRoomProps {\n  player: ModelIdentifier;\n  ground: ModelIdentifier;\n}\n\ninterface Entities {\n  player: Player;\n  ground: Ground;\n  camera: CameraManager;\n  inputs: InputManager;\n}\n\ninterface InternalState {\n  player: {\n    position: Vector3;\n    rotation: Euler;\n    rotationDelta: { yaw: number; pitch: number };\n  };\n}\n\ninterface TempData {}\n\nexport const createNavigationRoom = ({\n  player,\n  ground,\n}: NavigationRoomProps): Room => {\n  //External dependencies\n  const serviceRegistry = getServiceRegistry();\n\n  const [logger, storage, eventBusManager, InputManager, contextManager] = [\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"InputManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n  ];\n\n  //Internal\n  let components: Nullable<Entities> = {\n    camera: createCameraManager({ camera: contextManager.get(\"camera\")! }),\n    player: createPlayer({\n      reference: player,\n      InputManager: InputManager,\n      storage: storage,\n    }),\n    ground: createGround({\n      camera: contextManager.get(\"camera\")!,\n      logger: logger,\n      references: ground,\n      storage: storage,\n    }),\n    inputs: InputManager,\n  };\n\n  //TODO:no idea on what to add yet\n  let state: Nullable<InternalState> = null;\n  //TODO: no idea what temporary data to add yet\n  let tempData: Nullable<TempData> = null;\n\n  let room: Nullable<ObjectStorageUnit> = null;\n  let isMounted: boolean = false;\n\n  const activate = () => {\n    if (!room || !components) return;\n    room.groups.visible = true;\n    contextManager.get(\"orbit\")!.enabled = false;\n\n    components.camera.activate();\n    components.ground.activate();\n    components.player.activate();\n  };\n\n  const deactivate = () => {\n    if (!room || !components) return;\n    room.groups.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.player.deactivate();\n  };\n\n  const mount = () => {\n    if (isMounted || !components) return;\n\n    logger.onMount({ origin: \"Navigation Room\" });\n    state = {\n      player: {\n        position: new Vector3(0, 0, 0),\n        rotation: new Euler(0, 0, 0),\n        rotationDelta: { yaw: 0, pitch: 0 },\n      },\n    };\n\n    //get base root i.e group so that it can be used to toggle visibility\n    room = storage.getStorage(\"model\").retrieve(ground.storageId) ?? null;\n\n    components.player.mount();\n    components.ground.mount();\n    components.camera.mount();\n\n    isMounted = true;\n  };\n\n  const update = (deltaTime: number) => {\n    if (!isMounted || !components || !state) return;\n    contextManager.get(\"orbit\")!.update();\n    state.player = components.player.update(deltaTime);\n    components.camera.update({\n      playerPosition: state.player.position,\n      rotationDelta: state.player.rotationDelta,\n    });\n\n    //entities.ground.update();\n  };\n\n  const unmount = () => {\n    if (!isMounted || !components) return;\n\n    logger.onUnmount({ origin: \"Navigation Room\" });\n\n    components.player.unmount();\n    components.ground.unmount();\n\n    components = null;\n    room = null;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n    setActive: activate,\n    setDeactive: deactivate,\n    isLoaded: false,\n  };\n};\n"]}