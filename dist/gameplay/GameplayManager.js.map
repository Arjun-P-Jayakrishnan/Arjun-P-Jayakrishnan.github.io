{"version":3,"sources":["../../src/engine/core/ServiceRegistry.ts","../../src/config/asset_manifest.ts","../../src/config/rooms.ts","../../src/plugins/loader/fbx_loader.ts","../../src/plugins/loader/glb_loader.ts","../../src/plugins/loader/hdr_loader.ts","../../src/engine/core/LoadingManager.ts","../../src/gameplay/rooms/about/camera.ts","../../src/gameplay/rooms/about/ground.ts","../../src/gameplay/rooms/about/lights.ts","../../src/gameplay/rooms/about/player.ts","../../src/gameplay/rooms/about/room.ts","../../src/gameplay/rooms/navigation/camera.ts","../../src/materials/grid/grid-material.ts","../../src/materials/grid/grid-fragment.ts","../../src/materials/grid/grid-vertex.ts","../../src/gameplay/rooms/navigation/ground.ts","../../src/gameplay/modules/animation.ts","../../src/gameplay/modules/fsm/player.ts","../../src/gameplay/rooms/navigation/player.ts","../../src/gameplay/rooms/navigation/room.ts","../../src/gameplay/rooms/projects/camera.ts","../../src/gameplay/rooms/projects/ground.ts","../../src/gameplay/rooms/projects/lights.ts","../../src/gameplay/rooms/projects/player.ts","../../src/gameplay/rooms/projects/room.ts","../../src/gameplay/RoomManager.ts","../../src/gameplay/GameplayManager.ts"],"names":["createServiceRegistry","services","name","service","serviceRegistry","getServiceRegistry","FILE_CONSTANTS","PLAYER_ASSET","NAVIGATION_ROOM_ASSETS","ABOUT_ROOM_ASSETS","PROJECTS_ROOM_ASSETS","NAVIGATION_ROOM_OPTIONS","ABOUT_ROOM_OPTIONS","PROJECTS_ROOM_OPTIONS","createFBXLoader","loadingManager","scene","storageManager","fbxLoader","FBXLoader","_loadMesh","metaData","model","err","assets","promises","asset","createGLBLoader","gltfLoader","GLTFLoader","dracoLoader","DRACOLoader","createHDRLoader","renderer","pmremGenerator","PMREMGenerator","rgbeLoader","RGBELoader","_loadHDRTexture","reject","resolve","data","texData","envMap","load","createLoader","loaderEventBus","stateManager","manager","LoadingManager","isConfigured","glbLoader","hdrLoader","assetQueue","_configureLoadingManager","url","itemsLoaded","itemsTotal","pushToRespectiveLoaderQueue","_configurePlugins","createCameraManager","props","camera","target","Vector3","createGround","logger","reference","storage","ground","createLighting","dirLight","ambientLight","DirectionalLight","AmbientLight","PCFShadowMap","createPlayer","objects","animations","castShadow","player","child","playerRoot","AnimationMixer","createAboutRoom","context","orbit","components","group","deltaTime","TPV_CONFIG","tempPosition","tempOffset","tempLookTarget","clampRotation","yaw","pitch","MathUtils","computeThirdPersonOffset","spherical","lerpVector","from","to","alpha","isThirdPerson","state","Spherical","setCamera","mode","mount","activate","updateRotation","delta","clamped","updateThirdPerson","info","updateFirstPerson","playerPos","GridFragment","GridVertex","createGridMaterial","mat","ShaderMaterial","cameraPos","references","gridMat","createAnimationController","mixer","actions","crossFadeDuration","currentAnimation","blendTime","currentAction","animationName","blendDuration","nextAction","Idle","Walk","Run","createFSMController","inputs","animationController","keyboard","idle","walk","run","currentState","update","playerFSM","isMoving","isShiftPressed","_getState","newState","changeState","PLAYER_CONSTANTS","InputManager","controllers","tempData","fsmController","updateMouse","mouse","updateKeyboard","FRICTION","VELOCITY_DEADZONE","inputDirection","decay","updateControllers","Euler","createNavigationRoom","eventBusManager","contextManager","room","isMounted","points","camPath","CatmullRomCurve3","t","isComplete","position","lookAt","groups","excludeShadow","mixers","createProjectRoom","createRoomController","loader","rooms","roomAssets","activeRoom","activeRoomKey","initializeLoader","instantiateRoom","key","loadRoom","loadItems","switchRoom","unmount","transitionRooms","deactivateRoom","createGameplayManager","input","clock","Clock","roomController","bind","e","updateDeltaTime"],"mappings":"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","file":"GameplayManager.js","sourcesContent":["import {\n  ServiceKey,\n  ServiceMap,\n  ServiceRegistry,\n  ServiceType,\n} from \"types/service.types\";\n\nconst createServiceRegistry = (): ServiceRegistry => {\n  const services: Map<ServiceKey, ServiceType> = new Map<\n    ServiceKey,\n    ServiceType\n  >();\n\n  const register = <K extends ServiceKey>(\n    name: K,\n    service: ServiceMap[K]\n  ): void => {\n    if (services.has(name)) {\n      throw new Error(`Error : Redefining the service [${name}]`);\n    }\n    services.set(name, service);\n  };\n\n  const get = <K extends ServiceKey>(name: K): ServiceMap[K] => {\n    const service = services.get(name);\n    if (!service) {\n      throw new Error(\n        `Error : Trying to obtain value of an unregistered service ${name}`\n      );\n    }\n    return service as ServiceMap[K];\n  };\n\n  const has = (name: ServiceKey): boolean => {\n    return services.has(name);\n  };\n\n  return {\n    register: register,\n    get: get,\n    has: has,\n  };\n};\n\nlet serviceRegistry: ServiceRegistry | undefined = undefined;\n\nconst getServiceRegistry = () => {\n  if (!serviceRegistry) {\n    serviceRegistry = createServiceRegistry();\n  }\n\n  return serviceRegistry;\n};\n\nexport { getServiceRegistry };\n","import { ModelAssetDescriptor } from \"types/loader.types\";\nimport { RoomAsset } from \"types/rooms.types\";\n\nconst FILE_CONSTANTS = {\n  PATH_TO_MODELS: \"/assets/Models/\",\n  PATH_TO_HDR: \"/assets/HDR/\",\n  PATH_TO_ANIMATIONS: \"../../assets/Animations/\",\n};\n\nexport const PLAYER_ASSET: ModelAssetDescriptor = {\n  id: \"player\",\n  path: FILE_CONSTANTS.PATH_TO_MODELS + \"player.glb\",\n  type: \"glb\",\n};\n\nexport const NAVIGATION_ROOM_ASSETS: RoomAsset = {\n  meshes: [\n    {\n      id: \"navigation\",\n      path: FILE_CONSTANTS.PATH_TO_MODELS + \"room.glb\",\n      type: \"glb\",\n    },\n  ],\n  hdr: {\n    id: \"environment_hdr\",\n    path: FILE_CONSTANTS.PATH_TO_HDR + \"environment.hdr\",\n    type: \"hdr\",\n  },\n};\n\nexport const ABOUT_ROOM_ASSETS: RoomAsset = {\n  meshes: [\n    {\n      id: \"about\",\n      path: FILE_CONSTANTS.PATH_TO_MODELS + \"about.glb\",\n      type: \"glb\",\n    },\n  ],\n};\n\nexport const PROJECTS_ROOM_ASSETS: RoomAsset = {\n  meshes: [\n    {\n      id: \"projects\",\n      path: FILE_CONSTANTS.PATH_TO_MODELS + \"projects.glb\",\n      type: \"glb\",\n    },\n  ],\n};\n","import { AboutRoomProps } from \"gameplay/rooms/about/room\";\nimport { NavigationRoomProps } from \"gameplay/rooms/navigation/room\";\nimport { ProjectRoomProps } from \"gameplay/rooms/projects/room\";\n\nexport const NAVIGATION_ROOM_OPTIONS: NavigationRoomProps = {\n  player: {\n    id: \"RootNode\",\n    storageId: \"player\",\n  },\n  ground: {\n    id: \"ground\",\n    storageId: \"navigation\",\n  },\n};\n\nexport const ABOUT_ROOM_OPTIONS: AboutRoomProps = {\n  player: {\n    id: \"RootNode\",\n    storageId: \"player\",\n  },\n  ground: {\n    id: \"ground\",\n    storageId: \"about\",\n  },\n};\n\nexport const PROJECTS_ROOM_OPTIONS: ProjectRoomProps = {\n  player: {\n    id: \"RootNode\",\n    storageId: \"player\",\n  },\n  ground: {\n    id: \"ground\",\n    storageId: \"projects\",\n  },\n};\n","import { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { Scene } from \"three\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\nimport type { LoadingManager } from \"three/src/loaders/LoadingManager.js\";\nimport { ModelAssetDescriptor } from \"types/loader.types\";\nimport { LoaderPlugin } from \"types/plugin.types\";\n\nexport interface FBXLoaderProps {\n  scene: Scene;\n  loadingManager: LoadingManager;\n  storageManager: GlobalStorageManager;\n}\n\nexport const createFBXLoader = ({\n  loadingManager,\n  scene,\n  storageManager,\n}: FBXLoaderProps): LoaderPlugin => {\n  const fbxLoader: FBXLoader = new FBXLoader(loadingManager);\n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: ModelAssetDescriptor) => {\n    try {\n      const model = await fbxLoader.loadAsync(metaData.path);\n      storageManager.getStorage(\"model\").store(metaData.id, {\n        animations: model.animations,\n        groups: model,\n      });\n      scene.add(model);\n    } catch (err) {\n      throw new Error(`Error while loading fbx file : ${err}`);\n    }\n  };\n\n  const load = async (assets: ModelAssetDescriptor[]) => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  return {\n    load: load,\n  };\n};\n","import { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { LoadingManager, Scene } from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport { ModelAssetDescriptor } from \"types/loader.types\";\nimport { LoaderPlugin } from \"types/plugin.types\";\n\nexport interface GLBLoaderProps {\n  scene: Scene;\n  loadingManager: LoadingManager;\n  storageManager: GlobalStorageManager;\n}\n\nexport const createGLBLoader = ({\n  scene,\n  loadingManager,\n  storageManager,\n}: GLBLoaderProps): LoaderPlugin => {\n  const gltfLoader: GLTFLoader = new GLTFLoader(loadingManager);\n  const dracoLoader = new DRACOLoader();\n  dracoLoader.setDecoderPath(\"/public/draco/\");\n  gltfLoader.setDRACOLoader(dracoLoader);\n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: ModelAssetDescriptor) => {\n    try {\n      const model = await gltfLoader.loadAsync(metaData.path);\n      storageManager.getStorage(\"model\").store(metaData.id, {\n        animations: model.animations,\n        groups: model.scene,\n      });\n      scene.add(model.scene);\n    } catch (err) {\n      throw new Error(`Errr occuerd while loading a glb file : ${err}`);\n    }\n  };\n\n  const load = async (assets: ModelAssetDescriptor[]) => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  return {\n    load: load,\n  };\n};\n","import { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  DataTexture,\n  LoadingManager,\n  PMREMGenerator,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\nimport { ModelAssetDescriptor } from \"types/loader.types\";\nimport { LoaderPlugin } from \"types/plugin.types\";\n\nexport interface HDRTextureLoaderProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loadingManager: LoadingManager;\n  storageManager: GlobalStorageManager;\n}\n\n/**\n * @description loads .hdr files and illuminates scene\n * @param props hdr loading properties\n * @returns HDR loader plugin\n */\nexport const createHDRLoader = ({\n  loadingManager,\n  renderer,\n  scene,\n}: HDRTextureLoaderProps): LoaderPlugin => {\n  const pmremGenerator: PMREMGenerator = new PMREMGenerator(renderer);\n  const rgbeLoader: RGBELoader = new RGBELoader(loadingManager);\n\n  /**\n   * @description loads a hdr file\n   * @param metaData meta-data for loading hdr\n   */\n  const _loadHDRTexture = async (\n    metaData: ModelAssetDescriptor\n  ): Promise<void> => {\n    return new Promise((reject, resolve) => {\n      console.log(\"path\", metaData.path);\n      rgbeLoader.load(\n        metaData.path,\n        (data: DataTexture, texData: object) => {\n          const envMap = pmremGenerator.fromEquirectangular(data).texture;\n          data.dispose();\n          scene.environment = envMap;\n          resolve();\n        },\n        undefined,\n        (err) => {\n          reject();\n        }\n      );\n    });\n  };\n\n  const load = async (assets: ModelAssetDescriptor[]) => {\n    const promises: Promise<void>[] = [];\n\n    assets.forEach(async (asset) => {\n      promises.push(_loadHDRTexture(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  const dispose = () => {\n    pmremGenerator.dispose();\n  };\n\n  return {\n    load: load,\n  };\n};\n","import { EventBus } from \"@events/eventBus\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { LoadingManager, Scene, WebGLRenderer } from \"three\";\nimport { LoadingEvents } from \"types/eventType\";\nimport { LoadOptions, ModelAssetDescriptor } from \"types/loader.types\";\nimport { createFBXLoader } from \"../../plugins/loader/fbx_loader\";\nimport { createGLBLoader } from \"../../plugins/loader/glb_loader\";\nimport { createHDRLoader } from \"../../plugins/loader/hdr_loader\";\nimport { GlobalStateManager, LoadingContext } from \"./state/stateType\";\n\nexport interface LoaderProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loaderEventBus: EventBus<LoadingEvents>;\n  stateManager: GlobalStateManager;\n  storageManager: GlobalStorageManager;\n}\n\nexport interface Loader {\n  configure: () => void;\n  load: (assets: ModelAssetDescriptor[]) => Promise<{\n    success: string[];\n    error: string[];\n  }>;\n  dispose: () => void;\n}\n/**\n * @description creates a loader with the given settings\n * @param options options to change loader settings\n * @param context global context with references\n * @returns Loader\n */\nexport const createLoader = ({\n  scene,\n  renderer,\n  loaderEventBus,\n  stateManager,\n  storageManager,\n}: LoaderProps): Loader => {\n  const manager: LoadingManager = new LoadingManager();\n  let isConfigured: boolean = false;\n  const [glbLoader, fbxLoader, hdrLoader] = [\n    createGLBLoader({\n      scene,\n      loadingManager: manager,\n      storageManager,\n    }),\n    createFBXLoader({\n      scene,\n      loadingManager: manager,\n      storageManager,\n    }),\n    createHDRLoader({\n      scene,\n      loadingManager: manager,\n      renderer,\n      storageManager,\n    }),\n  ];\n  const assetQueue: {\n    glb: ModelAssetDescriptor[];\n    fbx: ModelAssetDescriptor[];\n    hdr: ModelAssetDescriptor[];\n  } = {\n    glb: [],\n    fbx: [],\n    hdr: [],\n  };\n\n  /**\n   * @description attaches the event bus for listening to loading changes\n   */\n  const _configureLoadingManager = () => {\n    manager.onStart = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:start\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      stateManager.loading.setState({\n        loading: { active: true, progress: 0 } as LoadingContext,\n      });\n    };\n\n    manager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:progress\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      stateManager.loading.setState({\n        loading: {\n          active: true,\n          progress: itemsLoaded / itemsTotal,\n        } as LoadingContext,\n      });\n    };\n\n    manager.onLoad = () => {\n      loaderEventBus.emit({\n        type: \"load:complete\",\n      });\n    };\n\n    manager.onError = (url) => {\n      loaderEventBus.emit({\n        type: \"load:error\",\n        url: url,\n      });\n    };\n\n    isConfigured = true;\n  };\n\n  const pushToRespectiveLoaderQueue = (model: ModelAssetDescriptor) => {\n    switch (model.type) {\n      case \"glb\":\n        assetQueue.glb.push(model);\n        break;\n      case \"fbx\":\n        assetQueue.fbx.push(model);\n        break;\n      case \"hdr\":\n        assetQueue.hdr.push(model);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * @description create necessary loaders\n   */\n  const _configurePlugins = (assets: ModelAssetDescriptor[]) => {\n    assets.forEach((asset) => {\n      pushToRespectiveLoaderQueue(asset);\n    });\n  };\n\n  /**\n   * @description configuration\n   */\n  const _configure = () => {\n    _configureLoadingManager();\n  };\n\n  /**\n   * @description load all types of assets\n   */\n  const load = async (\n    assets: LoadOptions\n  ): Promise<{ success: []; error: [] }> => {\n    if (!isConfigured)\n      throw new Error(\n        `Error: Trying to load from loader before configuring it`\n      );\n\n    const promises: Promise<void>[] = [];\n    _configurePlugins(assets);\n\n    promises.push(glbLoader.load(assetQueue.glb));\n    promises.push(fbxLoader.load(assetQueue.fbx));\n    promises.push(hdrLoader.load(assetQueue.hdr));\n\n    await Promise.allSettled(promises);\n    assetQueue.fbx = [];\n    assetQueue.glb = [];\n    assetQueue.hdr = [];\n\n    return {\n      success: [],\n      error: [],\n    };\n  };\n\n  const dispose = () => {};\n\n  return {\n    configure: _configure,\n    load: load,\n    dispose: dispose,\n  };\n};\n","import { PerspectiveCamera, Scene, Vector3 } from \"three\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n  scene: Scene;\n}\n\nexport interface CameraManager {\n  mount: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createCameraManager = (props: CameraProps): CameraManager => {\n  const { camera, scene } = props;\n  const target = new Vector3(0, 1, 2);\n  const mount = () => {};\n\n  const activate = () => {\n    camera.position.set(target.x, 1, target.z);\n    camera.rotation.set(0, 0, 0, \"XYZ\");\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { Material, Mesh, MeshStandardMaterial } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface GroundProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  logger: Logger;\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = ({\n  logger,\n  reference,\n  storage,\n}: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n\n  const mount = () => {\n    ground = storage\n      .getStorage(\"model\")\n      .retrieve(reference.storageId)\n      ?.groups.getObjectByName(reference.id) as Mesh;\n\n    if (!ground) {\n      console.error(`Cant get ground mesh from the id : ${reference.id}`);\n      return;\n    }\n    ground.material = (ground.material as Material).clone();\n    ground.receiveShadow = true;\n\n    (ground.material as Material).needsUpdate = true;\n    (ground.material as MeshStandardMaterial).opacity = 0.15;\n    (ground.material as MeshStandardMaterial).transparent = true;\n\n    logger.onMount({ origin: \"about-ground\" });\n  };\n\n  const activate = () => {};\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import {\n  AmbientLight,\n  DirectionalLight,\n  PCFShadowMap,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\n\nexport interface LightingProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n}\n\nexport interface Lighting {\n  mount: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createLighting = ({\n  renderer,\n  scene,\n}: LightingProps): Lighting => {\n  let dirLight: Nullable<DirectionalLight>;\n  let ambientLight: Nullable<AmbientLight>;\n\n  const mount = () => {\n    dirLight = new DirectionalLight(0xffffff, 5);\n    dirLight.castShadow = true;\n    dirLight.position.set(0, 2, 0);\n    dirLight.target.position.set(0, 1, 0);\n\n    dirLight.shadow.mapSize.width = 1024;\n    dirLight.shadow.mapSize.height = 1024;\n    dirLight.shadow.camera.near = 0.1;\n    dirLight.shadow.camera.far = 50;\n    dirLight.shadow.camera.left = -10;\n    dirLight.shadow.camera.right = 10;\n    dirLight.shadow.camera.top = 10;\n    dirLight.shadow.camera.bottom = -10;\n\n    ambientLight = new AmbientLight(0xffffff);\n\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = PCFShadowMap;\n  };\n\n  const activate = () => {\n    if (dirLight) scene.add(dirLight);\n    if (ambientLight) scene.add(ambientLight);\n  };\n\n  const deactivate = () => {\n    if (dirLight) scene.remove(dirLight);\n    if (ambientLight) scene.remove(ambientLight);\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  AnimationMixer,\n  Object3D,\n  Object3DEventMap,\n  Scene,\n  Vector3,\n} from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  logger: Logger;\n  storage: GlobalStorageManager;\n  scene: Scene;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = ({\n  logger,\n  reference,\n  scene,\n  storage,\n}: PlayerProps): Player => {\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      logger.onMount({ origin: \"about-room-player\" });\n      let playerRoot = scene.getObjectByName(reference.id);\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${reference.id}`);\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, -Math.PI / 4, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Group, Object3DEventMap } from \"three\";\n\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { ModelIdentifier, Room } from \"types/rooms.types\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { createGround, Ground } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { createPlayer, Player } from \"./player\";\n\nexport interface AboutRoomProps {\n  player: ModelIdentifier;\n  ground: ModelIdentifier;\n}\n\ninterface Components {\n  camera: CameraManager;\n  player: Player;\n  ground: Ground;\n  lighting: Lighting;\n}\n\nexport const createAboutRoom = ({ ground, player }: AboutRoomProps): Room => {\n  //====References====\n  const serviceRegistry = getServiceRegistry();\n  const [storage, logger, context] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n  ];\n\n  const { scene, camera, orbit, renderer } = {\n    scene: context.get(\"scene\")!,\n    camera: context.get(\"camera\")!,\n    orbit: context.get(\"orbit\")!,\n    renderer: context.get(\"renderer\")!,\n  };\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({ camera: camera, scene: scene }),\n    player: createPlayer({ logger, reference: player, scene, storage }),\n    ground: createGround({ logger, reference: ground, storage }),\n    lighting: createLighting({ renderer, scene }),\n  };\n\n  let group: Nullable<Group<Object3DEventMap>> = null;\n\n  const mount = () => {\n    logger.onMount({ origin: \"about-room\" });\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n    group =\n      storage.getStorage(\"model\").retrieve(ground.storageId)?.groups ?? null;\n  };\n\n  const activate = () => {\n    if (group) group.visible = true;\n\n    orbit.enabled = false;\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n  };\n\n  const update = (deltaTime: number) => {\n    // components.camera.update(deltaTime);\n  };\n\n  const deactivate = () => {\n    if (group) group.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded: false,\n  };\n};\n","import { Euler, MathUtils, PerspectiveCamera, Spherical, Vector3 } from \"three\";\nimport { GenericLifeCycle } from \"types/rooms.types\";\n\nexport type CameraMode = \"firstPerson\" | \"thirdPerson\";\n\nexport interface CameraProps {\n  /**Main Camera */\n  camera: PerspectiveCamera;\n}\n\n/** Contains the Updated info about player */\nexport type UpdatedInfo = {\n  playerPosition: Vector3;\n  rotationDelta: { yaw: number; pitch: number };\n};\n\n/** Controls to manage camera */\nexport interface CameraManager extends GenericLifeCycle {\n  /** Updates the camera to look the player */\n  update: (info: UpdatedInfo) => { rotation: Euler };\n\n  /**sets the mode of camera */\n  setMode: (mode: CameraMode) => void;\n}\n\n//Third Person Config\nconst TPV_CONFIG = {\n  DISTANCE: 3,\n  HEIGHT_OFFSET: 2,\n  PITCH_MIN: 0,\n  PITH_MAX: Math.PI / 2,\n  SMOOTHING: 0.1,\n} as const;\n\n//Temporary Variables\n\nlet tempPosition = new Vector3(0, 0, 0);\nlet tempOffset = new Vector3(0, 0, 0);\nlet tempLookTarget = new Vector3(0, 0, 0);\n\n/**\n *\n * @param yaw the yaw angle\n * @param pitch the pitch angle\n * @returns restricted angles\n */\nfunction clampRotation(\n  yaw: number,\n  pitch: number\n): { yaw: number; pitch: number } {\n  return {\n    yaw: MathUtils.euclideanModulo(yaw, Math.PI * 2),\n    pitch: MathUtils.clamp(pitch, TPV_CONFIG.PITCH_MIN, TPV_CONFIG.PITH_MAX),\n  };\n}\n\n/**\n *\n * @param spherical the spherical coordinates\n * @returns the Vector based on spherical coordinates\n */\nfunction computeThirdPersonOffset(spherical: Spherical): Vector3 {\n  tempOffset.set(0, 0, 0);\n  tempOffset.setFromSpherical(spherical);\n  tempOffset.y += TPV_CONFIG.HEIGHT_OFFSET;\n\n  return tempOffset;\n}\n\n/**\n * Smoothly interpolate value between from and to vectors based on alpha\n */\nfunction lerpVector(from: Vector3, to: Vector3, alpha: number) {\n  return from.lerp(to, alpha);\n}\n\ninterface InternalState {\n  mode: CameraMode;\n  rotation: { yaw: number; pitch: number };\n  spherical: Spherical;\n}\n\nexport const createCameraManager = ({ camera }: CameraProps): CameraManager => {\n  let isThirdPerson: boolean = true;\n  let state: InternalState = {\n    mode: \"thirdPerson\",\n    rotation: { pitch: Math.PI / 2, yaw: 0 },\n    spherical: new Spherical(TPV_CONFIG.DISTANCE, Math.PI / 2, 0),\n  };\n\n  const setCamera = (mode: CameraMode) => {\n    state.mode = mode;\n  };\n\n  const mount = () => {};\n\n  const activate = () => {\n    camera.position.set(1, 2, 3);\n  };\n\n  /**\n   *\n   * @param yaw\n   * @param pitch\n   */\n  const updateRotation = (delta: { yaw: number; pitch: number }) => {\n    state.rotation.yaw += delta.yaw;\n    state.rotation.pitch += delta.pitch;\n\n    const clamped = clampRotation(state.rotation.yaw, state.rotation.pitch);\n    state.rotation.yaw = clamped.yaw;\n    state.rotation.pitch = clamped.pitch;\n  };\n\n  const updateThirdPerson = (info: UpdatedInfo) => {\n    state.spherical.theta = state.rotation.yaw;\n    state.spherical.phi = state.rotation.pitch;\n\n    //Calculate offset\n    tempOffset.copy(computeThirdPersonOffset(state.spherical));\n\n    //Calculate target position and camera lerp smoothly\n    tempPosition.copy(info.playerPosition).add(tempOffset);\n    camera.position.copy(\n      lerpVector(camera.position, tempPosition, TPV_CONFIG.SMOOTHING)\n    );\n\n    tempLookTarget.copy(info.playerPosition);\n    tempLookTarget.y += TPV_CONFIG.HEIGHT_OFFSET;\n    camera.lookAt(tempLookTarget);\n  };\n\n  const updateFirstPerson = (playerPos: Vector3) => {\n    camera.position.copy(playerPos);\n    camera.rotation.set(state.rotation.pitch, state.rotation.yaw, 0);\n  };\n\n  const update = (info: UpdatedInfo): { rotation: Euler } => {\n    updateRotation(info.rotationDelta);\n\n    if (state.mode === \"thirdPerson\") {\n      updateThirdPerson(info);\n    } else {\n      updateFirstPerson(info.playerPosition);\n    }\n\n    return {\n      rotation: camera.rotation,\n    };\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    setMode: setCamera,\n    update: update,\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { PerspectiveCamera, ShaderMaterial, Vector3 } from \"three\";\nimport { GridFragment } from \"./grid-fragment\";\nimport { GridVertex } from \"./grid-vertex\";\n\nexport interface GridMaterialProps {\n  camera: PerspectiveCamera;\n  fadeNear: number;\n  fadeFar: number;\n}\n\nexport interface GridMaterial {\n  mat: ShaderMaterial;\n  update: (cameraPos: Vector3) => void;\n}\n\nexport const createGridMaterial = (props: GridMaterialProps) => {\n  const mat: ShaderMaterial = new ShaderMaterial({\n    uniforms: {\n      time: { value: 1 },\n      cameraPos: { value: props.camera.position },\n      fadeNear: { value: props.fadeNear },\n      fadeFar: { value: props.fadeFar },\n    },\n    vertexShader: GridVertex,\n    fragmentShader: GridFragment,\n  });\n\n  const update = (cameraPos: Vector3) => {\n    mat.uniforms.cameraPos.value = cameraPos;\n  };\n\n  return {\n    mat: mat,\n    update: update,\n  };\n};\n","export const GridFragment = `\n    precision highp float;\n\n    varying vec2 vUV;\n\n    float line(vec2 uv,float lineWidth){\n\n       \n        float lineAA=fwidth(uv.x);\n \n        float lineUV=1.0-abs(fract(uv.x)*2.0-1.0);\n\n        return smoothstep(lineWidth+lineAA,lineWidth-lineAA,lineUV);\n    }  \n\n    float grid(vec2 uv,float lineWidth){\n\n        vec2 uvDeriv=fwidth(uv);\n        vec2 drawWidth=max(vec2(lineWidth),uvDeriv);\n        vec2 lineAA=uvDeriv*1.5;\n \n        vec2 gridUV=1.0-abs(fract(uv)*2.0-1.0);\n\n        vec2 gridLines=smoothstep(drawWidth+lineAA,drawWidth-lineAA,gridUV);\n        gridLines*=clamp(lineWidth/drawWidth,0.0,1.0);\n\n        return mix(gridLines.x,1.0,gridLines.y);\n    } \n\n    void main(){\n        vec2 st=vUV*1500.0;\n       \n        gl_FragColor = vec4(vec3(grid(st,0.01)),1.0);\n    }\n\n`;\n","export const GridVertex = `\n    precision highp float;\n\n    \n\n    varying vec2 vUV;\n    varying vec4 vWorldPos; \n\n    void main(){\n        vUV=uv;\n        vWorldPos=modelViewMatrix*vec4(position,1.0);\n\n        gl_Position = projectionMatrix*modelViewMatrix*vec4(position,1.0);\n    }\n\n`;\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { createGridMaterial, GridMaterial } from \"materials/grid/grid-material\";\nimport { Mesh, PerspectiveCamera } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface GroundProps {\n  references: ModelIdentifier;\n  storage: GlobalStorageManager;\n  logger: Logger;\n  camera: PerspectiveCamera;\n}\n\nexport interface Ground {\n  mount: () => void;\n  update: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = ({\n  logger,\n  references,\n  storage,\n  camera,\n}: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n  let gridMat: Nullable<GridMaterial> = null;\n\n  const mount = () => {\n    ground =\n      (storage\n        .getStorage(\"model\")\n        .retrieve(references.storageId)\n        ?.groups.getObjectByName(references.id) as Mesh) ?? null;\n\n    if (!ground) {\n      console.error(\n        `Cant get ground mesh from the id : ${references.id} ${references.storageId}`\n      );\n      return;\n    }\n\n    gridMat = createGridMaterial({\n      camera: camera,\n      fadeNear: 0.1,\n      fadeFar: 1,\n    });\n\n    ground.material = gridMat.mat;\n    logger.onMount({ origin: \"Navigation-Ground\" });\n  };\n\n  const update = () => {\n    gridMat?.update(camera.position);\n  };\n\n  const activate = () => {};\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update: update,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { AnimationAction, AnimationMixer } from \"three\";\n\nexport interface AnimationControllerProps {\n  mixer: AnimationMixer;\n  actions: Record<string, AnimationAction>;\n  crossFadeDuration: 0.3;\n}\n\nexport interface AnimationController {\n  play: (animationName: string, blendDuration?: number) => void;\n  stop: () => void;\n  getCurrentAnimation: () => string | null;\n  update: (deltaTime: number) => void;\n}\n\nexport const createAnimationController = ({\n  mixer,\n  actions,\n  crossFadeDuration = 0.3,\n}: AnimationControllerProps): AnimationController => {\n  let currentAnimation: Nullable<string> = null;\n  let blendTime: number = 0;\n  let currentAction: Nullable<AnimationAction> = null;\n\n  const play = (animationName: string, blendDuration = 0) => {\n    if (currentAnimation === animationName) return;\n\n    const nextAction = actions[animationName];\n    if (!nextAction) return;\n    nextAction.reset();\n    nextAction.play();\n\n    if (currentAction != null) {\n      (currentAction as AnimationAction).crossFadeTo(\n        nextAction,\n        crossFadeDuration,\n        false\n      );\n    }\n\n    currentAction = nextAction;\n    currentAnimation = animationName;\n  };\n\n  const stop = () => {};\n\n  const getCurrentAnimation = () => {\n    return currentAnimation;\n  };\n\n  const update = (deltaTime: number) => {\n    if (deltaTime !== undefined) mixer.update(deltaTime);\n  };\n\n  return {\n    play: play,\n    getCurrentAnimation: getCurrentAnimation,\n    stop: stop,\n    update: update,\n  };\n};\n","import { InputManager } from \"engine/managers/InputManager\";\nimport { AnimationController } from \"../animation\";\n\ntype States = \"Idle\" | \"Walk\" | \"Run\";\n\ninterface PlayerFSM {\n  changeState: (state: States) => void;\n  isMoving: () => boolean;\n  isShiftPressed: () => boolean;\n}\n\ninterface StateProps {\n  animationId: string;\n  animationController: AnimationController;\n}\n\ninterface State {\n  enter: (player: PlayerFSM) => void;\n  execute: (player: PlayerFSM) => void;\n  exit: (player: PlayerFSM) => void;\n}\n\nconst Idle = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter idle\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (player.isMoving()) {\n      if (player.isShiftPressed()) {\n        player.changeState(\"Run\");\n      } else {\n        player.changeState(\"Walk\");\n      }\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit idle\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Walk = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter walk\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (player.isShiftPressed()) {\n      player.changeState(\"Run\");\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit walk\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Run = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter run\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (!player.isShiftPressed()) {\n      player.changeState(\"Walk\");\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit run\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nexport interface FSMOptions {\n  inputs: InputManager;\n  animationController: AnimationController;\n}\n\nexport interface FSMController {\n  mount: () => void;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\nexport const createFSMController = ({\n  inputs,\n  animationController,\n}: FSMOptions): FSMController => {\n  const { mouse, keyboard } = {\n    mouse: inputs.getController(\"mouse\"),\n    keyboard: inputs.getController(\"keyboard\"),\n  };\n\n  let shiftPressed: boolean;\n  const { idle, walk, run } = {\n    idle: Idle({\n      animationController: animationController,\n      animationId: \"Idle\",\n    }),\n    walk: Walk({\n      animationController: animationController,\n      animationId: \"Walk\",\n    }),\n    run: Run({\n      animationController: animationController,\n      animationId: \"Run\",\n    }),\n  };\n  let state: State = idle;\n  let currentState: States = \"Idle\";\n\n  const update = (deltaTime: number) => {\n    state.execute(playerFSM);\n    animationController.update(deltaTime);\n  };\n\n  const isMoving = () => {\n    if (\n      keyboard?.isKeyPressed(\"w\") ||\n      keyboard?.isKeyPressed(\"a\") ||\n      keyboard?.isKeyPressed(\"s\") ||\n      keyboard?.isKeyPressed(\"d\")\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isShiftPressed = () => {\n    return keyboard?.isKeyPressed(\"shift\") ?? false;\n  };\n\n  const _getState = (newState: States) => {\n    switch (newState) {\n      case \"Idle\":\n        return idle;\n      case \"Walk\":\n        return walk;\n      case \"Run\":\n        return run;\n      default:\n        return idle;\n    }\n  };\n\n  const changeState = (newState: States) => {\n    if (currentState !== newState) {\n      currentState = newState;\n      state.exit(playerFSM);\n      state = _getState(newState);\n      state.enter(playerFSM);\n    }\n  };\n\n  const mount = () => {\n    state.enter(playerFSM);\n  };\n\n  const playerFSM: PlayerFSM = {\n    changeState: changeState,\n    isMoving: isMoving,\n    isShiftPressed: isShiftPressed,\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n","import { InputManager } from \"engine/managers/InputManager\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  AnimationController,\n  createAnimationController,\n} from \"gameplay/modules/animation\";\nimport {\n  createFSMController,\n  FSMController,\n} from \"gameplay/modules/fsm/player\";\nimport { KeyboardInput } from \"plugins/input/keyboard\";\nimport { MouseInput } from \"plugins/input/mouse\";\nimport { AnimationMixer, Euler, Object3D, Vector3 } from \"three\";\nimport { GenericLifeCycle, ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  InputManager: InputManager;\n}\n\nexport interface Player extends GenericLifeCycle {\n  /** Update based on controller input */\n  update: (deltaTime: number) => {\n    position: Vector3;\n    rotation: Euler;\n    rotationDelta: { yaw: number; pitch: number };\n  };\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface Controllers {\n  input: {\n    mouse: Nullable<MouseInput>;\n    keyboard: Nullable<KeyboardInput>;\n  };\n  animation: AnimationController;\n  fsm: FSMController;\n}\n\ninterface ObjectReferences {\n  player: Nullable<Object3D>;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = ({\n  reference,\n  storage,\n  InputManager,\n}: PlayerProps): Player => {\n  let controllers: Controllers;\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n\n  let objects: ObjectReferences = { player: null };\n\n  const mount = () => {\n    try {\n      const playerRoot = storage\n        .getStorage(\"model\")\n        .retrieve(reference.storageId);\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${reference.storageId}`\n        );\n      }\n      const player = playerRoot?.groups;\n      const animations = playerRoot?.animations;\n\n      /**Animation */\n      const mixer = new AnimationMixer(player);\n      const animationController = createAnimationController({\n        mixer: mixer,\n        actions: {\n          Idle: mixer.clipAction(animations[0]),\n          Walk: mixer.clipAction(animations[3]),\n          Run: mixer.clipAction(animations[1]),\n        },\n        crossFadeDuration: 0.3,\n      });\n\n      const fsmController = createFSMController({\n        animationController: animationController,\n        inputs: InputManager,\n      });\n      fsmController.mount();\n\n      objects = {\n        player: player,\n      };\n\n      controllers = {\n        input: {\n          mouse: InputManager.getController(\"mouse\"),\n          keyboard: InputManager.getController(\"keyboard\"),\n        },\n        animation: animationController,\n        fsm: fsmController,\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (mouse: Nullable<MouseInput>) => {\n    if (!mouse || !objects.player!) return;\n\n    state.rotationApplied = mouse.getRotation();\n    objects.player.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (\n    keyboard: Nullable<KeyboardInput>,\n    deltaTime: number\n  ) => {\n    if (!keyboard || !objects.player) return;\n    const FRICTION = 5.0;\n    const VELOCITY_DEADZONE = 0.001;\n\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n    if (keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n    if (keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n    if (keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n    if (inputDirection.length() > 0) {\n      //normalize direction\n      inputDirection.applyQuaternion(objects.player.quaternion);\n      inputDirection.normalize();\n\n      //accelerate towards the direction\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n      //ensure the velocity doesn't go over the threshold\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n      const decay = Math.exp(-FRICTION * deltaTime);\n      state.velocity.multiplyScalar(decay);\n\n      if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n        state.velocity.set(0, 0, 0);\n      }\n    }\n\n    objects.player.position.add(state.velocity);\n  };\n\n  const updateControllers = (deltaTime: number) => {\n    updateMouse(controllers.input.mouse);\n    updateKeyboard(controllers.input.keyboard, deltaTime);\n  };\n\n  const update = (deltaTime: number) => {\n    updateControllers(deltaTime);\n\n    controllers.fsm.update(deltaTime);\n\n    return {\n      position: objects.player?.position ?? new Vector3(0, 0, 0),\n      rotation: objects.player?.rotation ?? new Euler(0, 0, 0, \"XYZ\"),\n      rotationDelta: state.rotationApplied,\n    };\n  };\n\n  const activate = () => {\n    // objects.playerRoot.rotation.set(0,0,0,'XYZ')\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    try {\n      //objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    update: update,\n    unmount: unmount,\n  };\n};\n","import { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { InputManager } from \"engine/managers/InputManager\";\nimport { Euler, Vector3 } from \"three\";\nimport { ObjectStorageUnit } from \"types/managers.types\";\nimport { ModelIdentifier, Room } from \"types/rooms.types\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { createGround, Ground } from \"./ground\";\nimport { createPlayer, Player } from \"./player\";\n\nexport interface NavigationRoomProps {\n  player: ModelIdentifier;\n  ground: ModelIdentifier;\n}\n\ninterface Entities {\n  player: Player;\n  ground: Ground;\n  camera: CameraManager;\n  inputs: InputManager;\n}\n\ninterface InternalState {\n  player: {\n    position: Vector3;\n    rotation: Euler;\n    rotationDelta: { yaw: number; pitch: number };\n  };\n}\n\ninterface TempData {}\n\nexport const createNavigationRoom = ({\n  player,\n  ground,\n}: NavigationRoomProps): Room => {\n  //External dependencies\n  const serviceRegistry = getServiceRegistry();\n\n  const [logger, storage, eventBusManager, InputManager, contextManager] = [\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"InputManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n  ];\n\n  //Internal\n  let components: Nullable<Entities> = {\n    camera: createCameraManager({ camera: contextManager.get(\"camera\")! }),\n    player: createPlayer({\n      reference: player,\n      InputManager: InputManager,\n      storage: storage,\n    }),\n    ground: createGround({\n      camera: contextManager.get(\"camera\")!,\n      logger: logger,\n      references: ground,\n      storage: storage,\n    }),\n    inputs: InputManager,\n  };\n\n  //TODO:no idea on what to add yet\n  let state: Nullable<InternalState> = null;\n  //TODO: no idea what temporary data to add yet\n  let tempData: Nullable<TempData> = null;\n\n  let room: Nullable<ObjectStorageUnit> = null;\n  let isMounted: boolean = false;\n\n  const activate = () => {\n    if (!room || !components) return;\n    room.groups.visible = true;\n    contextManager.get(\"orbit\")!.enabled = false;\n\n    components.camera.activate();\n    components.ground.activate();\n    components.player.activate();\n  };\n\n  const deactivate = () => {\n    if (!room || !components) return;\n    room.groups.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.player.deactivate();\n  };\n\n  const mount = () => {\n    if (isMounted || !components) return;\n\n    logger.onMount({ origin: \"Navigation Room\" });\n    state = {\n      player: {\n        position: new Vector3(0, 0, 0),\n        rotation: new Euler(0, 0, 0),\n        rotationDelta: { yaw: 0, pitch: 0 },\n      },\n    };\n\n    //get base root i.e group so that it can be used to toggle visibility\n    room = storage.getStorage(\"model\").retrieve(ground.storageId) ?? null;\n\n    components.player.mount();\n    components.ground.mount();\n    components.camera.mount();\n\n    isMounted = true;\n  };\n\n  const update = (deltaTime: number) => {\n    if (!isMounted || !components || !state) return;\n    contextManager.get(\"orbit\")!.update();\n    state.player = components.player.update(deltaTime);\n    components.camera.update({\n      playerPosition: state.player.position,\n      rotationDelta: state.player.rotationDelta,\n    });\n\n    //entities.ground.update();\n  };\n\n  const unmount = () => {\n    if (!isMounted || !components) return;\n\n    logger.onUnmount({ origin: \"Navigation Room\" });\n\n    components.player.unmount();\n    components.ground.unmount();\n\n    components = null;\n    room = null;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n    setActive: activate,\n    setDeactive: deactivate,\n    isLoaded: false,\n  };\n};\n","import { EventBusManager } from \"@events/EventBusManager\";\nimport { CatmullRomCurve3, PerspectiveCamera, Scene, Vector3 } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n  scene: Scene;\n  orbit: OrbitControls;\n  eventBusManager: EventBusManager;\n}\n\nexport interface CameraManager {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createCameraManager = ({\n  camera,\n  eventBusManager,\n  orbit,\n  scene,\n}: CameraProps): CameraManager => {\n  const points: Vector3[] = [\n    new Vector3(0, 2, 10),\n    new Vector3(0, 2, 5),\n    new Vector3(0, 2, 3),\n    new Vector3(0, 2, 2),\n    new Vector3(0, 2, 1),\n    new Vector3(0, 2, 0),\n    new Vector3(0, 2, -1),\n    new Vector3(0, 1, -1),\n    new Vector3(0, 1, -1.5),\n    new Vector3(0, 1, -2),\n  ];\n\n  const camPath = new CatmullRomCurve3(points);\n  let t = 0;\n  let isComplete: boolean = false;\n\n  const mount = () => {\n    t = 0;\n  };\n\n  const activate = () => {\n    orbit.enabled = false;\n    camera.position.set(0, 2.5, 10);\n    camera.near = 0.001;\n    camera.far = 1000;\n  };\n\n  const update = (deltaTime: number) => {\n    if (!isComplete && t > 1) {\n      isComplete = true;\n      orbit.enabled = true;\n      eventBusManager.viewBus.emit({\n        type: \"project-screen:show\",\n        elementId: \"project-screen\",\n      });\n      console.log(\"event emitted view event\");\n    }\n\n    if (!isComplete) {\n      t += deltaTime * 0.1;\n\n      if (t <= 0.9) {\n        const position = camPath.getPointAt(t);\n        const lookAt = camPath.getPointAt(t + 0.1);\n        lookAt.z -= 0.1;\n        camera.position.copy(position);\n        camera.lookAt(lookAt);\n      }\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { Material, Mesh, MeshStandardMaterial } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface GroundProps {\n  reference: ModelIdentifier;\n  logger: Logger;\n  storage: GlobalStorageManager;\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = ({\n  reference,\n  logger,\n  storage,\n}: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n\n  const mount = () => {\n    const groups = storage\n      .getStorage(\"model\")\n      .retrieve(reference.storageId)?.groups;\n    ground = groups?.getObjectByName(reference.id) as Mesh;\n\n    if (!ground) {\n      console.error(`Cant get ground mesh from the id : ${reference.id}`);\n      return;\n    }\n    ground.material = (ground.material as Material).clone();\n    ground.receiveShadow = true;\n\n    (ground.material as Material).needsUpdate = true;\n    (ground.material as MeshStandardMaterial).opacity = 1;\n    (ground.material as MeshStandardMaterial).transparent = true;\n    const excludeShadow = [\"sky\", \"ground\"];\n\n    groups?.traverse((child) => {\n      if (!excludeShadow.includes(child.name)) {\n        child.castShadow = true;\n      }\n    });\n\n    logger.onMount({ origin: \"about-ground\" });\n  };\n\n  const activate = () => {};\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import {\n  AmbientLight,\n  DirectionalLight,\n  PCFShadowMap,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\n\nexport interface LightingProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n}\n\nexport interface Lighting {\n  mount: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createLighting = ({\n  renderer,\n  scene,\n}: LightingProps): Lighting => {\n  let dirLight: Nullable<DirectionalLight>;\n  let ambientLight: Nullable<AmbientLight>;\n\n  const mount = () => {\n    dirLight = new DirectionalLight(0xffffff, 5);\n    dirLight.castShadow = true;\n    dirLight.position.set(0, 1, 0.5);\n    dirLight.target.position.set(0, 0, 0);\n\n    dirLight.shadow.mapSize.width = 1024;\n    dirLight.shadow.mapSize.height = 1024;\n    dirLight.shadow.camera.near = 0.1;\n    dirLight.shadow.camera.far = 50;\n    dirLight.shadow.camera.left = -10;\n    dirLight.shadow.camera.right = 10;\n    dirLight.shadow.camera.top = 10;\n    dirLight.shadow.camera.bottom = -10;\n\n    ambientLight = new AmbientLight(0xffffff);\n\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = PCFShadowMap;\n  };\n\n  const activate = () => {\n    if (dirLight) scene.add(dirLight);\n    if (ambientLight) scene.add(ambientLight);\n  };\n\n  const deactivate = () => {\n    if (dirLight) scene.remove(dirLight);\n    if (ambientLight) scene.remove(ambientLight);\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { AnimationMixer, Object3D, Object3DEventMap, Scene } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  logger: Logger;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\nexport const createPlayer = ({\n  logger,\n  reference,\n  storage,\n}: PlayerProps): Player => {\n  let objects: ObjectReferences;\n  let mixers: AnimationMixer[] = [];\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      let playerRoot = storage\n        .getStorage(\"model\")\n        .retrieve(reference.storageId)?.groups;\n      let animations =\n        storage.getStorage(\"model\").retrieve(reference.storageId)?.animations ??\n        [];\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${reference.storageId}`\n        );\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      // console.log('armature',armature)\n      const mixer = new AnimationMixer(playerRoot);\n      mixer.clipAction(animations[2]).play();\n\n      mixers.push(mixer);\n      logger.onMount({ origin: \"Project-Room-Player\" });\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, 0, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n    }\n  };\n\n  const update = (deltaTime: number) => {\n    mixers.forEach((mixer) => {\n      mixer.update(deltaTime);\n    });\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n","import { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { Group, Object3DEventMap } from \"three\";\nimport { ModelIdentifier, Room, RoomProps } from \"types/rooms.types\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { createGround, Ground } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { createPlayer, Player } from \"./player\";\n\nexport interface ProjectRoomProps extends RoomProps {\n  player: ModelIdentifier;\n  ground: ModelIdentifier;\n}\n\ninterface Components {\n  camera: CameraManager;\n  player: Player;\n  ground: Ground;\n  lighting: Lighting;\n}\n\nexport const createProjectRoom = ({\n  player,\n  ground,\n}: ProjectRoomProps): Room => {\n  //====References===\n  const serviceRegistry = getServiceRegistry();\n  const [storage, context, eventBusManager, logger] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"Logger\"),\n  ];\n\n  const { scene, camera, orbit, renderer } = {\n    scene: context.get(\"scene\")!,\n    camera: context.get(\"camera\")!,\n    orbit: context.get(\"orbit\")!,\n    renderer: context.get(\"renderer\")!,\n  };\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({\n      camera,\n      eventBusManager,\n      orbit,\n      scene,\n    }),\n    player: createPlayer({ logger, reference: player, storage }),\n    ground: createGround({ logger, reference: ground, storage }),\n    lighting: createLighting({ renderer, scene }),\n  };\n  let group: Nullable<Group<Object3DEventMap>> = null;\n\n  const mount = () => {\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n\n    group =\n      storage.getStorage(\"model\").retrieve(ground.storageId)?.groups ?? null;\n\n    logger.onMount({ origin: \"Projects\" });\n  };\n\n  const activate = () => {\n    if (group) group.visible = true;\n\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n  };\n\n  const update = (deltaTime: number) => {\n    components.player.update(deltaTime);\n    components.camera.update(deltaTime);\n  };\n\n  const deactivate = () => {\n    if (group) group.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded: false,\n  };\n};\n","import {\n  ABOUT_ROOM_ASSETS,\n  NAVIGATION_ROOM_ASSETS,\n  PLAYER_ASSET,\n  PROJECTS_ROOM_ASSETS,\n} from \"config/asset_manifest\";\nimport {\n  ABOUT_ROOM_OPTIONS,\n  NAVIGATION_ROOM_OPTIONS,\n  PROJECTS_ROOM_OPTIONS,\n} from \"config/rooms\";\nimport { createLoader, Loader } from \"engine/core/LoadingManager\";\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { createAboutRoom } from \"gameplay/rooms/about/room\";\nimport { createNavigationRoom } from \"gameplay/rooms/navigation/room\";\nimport { createProjectRoom } from \"gameplay/rooms/projects/room\";\nimport { Room, RoomAsset } from \"types/rooms.types\";\n\nexport interface RoomController {\n  mount: () => Promise<void>;\n  switchRoom: Record<RoomKey | \"default\", () => void>;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\ntype RoomKey = \"navigation\" | \"about\" | \"projects\";\n\ntype RoomMap = {\n  [key in RoomKey]: Nullable<Room>;\n};\n\ntype RoomAssetsMap = {\n  [key in RoomKey]: RoomAsset;\n};\n\nexport const createRoomController = (): RoomController => {\n  const serviceRegistry = getServiceRegistry();\n  const [storage, logger, eventBusManager, contextManager, stateManager] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n    serviceRegistry.get(\"GlobalStateManager\"),\n  ];\n\n  let loader: Nullable<Loader> = null;\n  let rooms: RoomMap = { navigation: null, about: null, projects: null };\n  let roomAssets: RoomAssetsMap = {\n    navigation: NAVIGATION_ROOM_ASSETS,\n    about: ABOUT_ROOM_ASSETS,\n    projects: PROJECTS_ROOM_ASSETS,\n  };\n  let activeRoom: Nullable<Room> = null;\n  let activeRoomKey: Nullable<RoomKey> = null;\n\n  const initializeLoader = (): void => {\n    try {\n      loader = createLoader({\n        storageManager: storage,\n        stateManager: stateManager,\n        loaderEventBus: eventBusManager.loadingBus,\n        renderer: contextManager.get(\"renderer\")!,\n        scene: contextManager.get(\"scene\")!,\n      });\n      loader?.configure();\n    } catch (err) {\n      throw new Error(\n        `[Gameplay] Couldnt create and initailize the loader due to ${err}`\n      );\n    }\n  };\n\n  const instantiateRoom = (key: RoomKey): Room => {\n    switch (key) {\n      case \"navigation\":\n        rooms[key] = createNavigationRoom(NAVIGATION_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"about\":\n        rooms[key] = createAboutRoom(ABOUT_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"projects\":\n        rooms[key] = createProjectRoom(PROJECTS_ROOM_OPTIONS);\n        return rooms[key]!;\n      default:\n        throw new Error(`Unknown Room key ${key}`);\n    }\n  };\n\n  const loadRoom = async (key: RoomKey) => {\n    if (!loader) return;\n\n    const assets = roomAssets[key];\n    if (!assets)\n      throw new Error(\n        \"[Room Controller] sufficient asset meta data is not given.\"\n      );\n\n    if (!rooms[key]) {\n      const room: Room = instantiateRoom(key);\n\n      console.log(\"load room\", roomAssets[key]);\n\n      const loadItems = [...roomAssets[key].meshes];\n      if (roomAssets[key].hdr) loadItems.push(roomAssets[key].hdr);\n\n      //Load only once\n      await loader.load(loadItems);\n\n      if (room) {\n        room.mount();\n        room.isLoaded = true;\n        activeRoom = room;\n      }\n    }\n  };\n\n  const switchRoom = async (key: RoomKey): Promise<void> => {\n    if (activeRoomKey === key) return;\n\n    if (activeRoomKey != null) {\n      if (rooms[activeRoomKey] != null) rooms[activeRoomKey]!.setDeactive();\n    }\n\n    await loadRoom(key);\n\n    if (rooms[key]) rooms[key].setActive();\n    activeRoomKey = key;\n  };\n\n  const mount = async (): Promise<void> => {\n    logger.onMount({ origin: \"Room Controller\" });\n    initializeLoader();\n    await loader?.load([PLAYER_ASSET]);\n    await loadRoom(\"navigation\");\n    await switchRoom(\"navigation\");\n  };\n\n  const update = (deltaTime: number) => {\n    activeRoom?.update(deltaTime);\n  };\n\n  const unmount = (): void => {\n    loader?.dispose();\n\n    Object.values(rooms).forEach((room) => {\n      room?.unmount();\n    });\n\n    logger.onUnmount({ origin: \"room-controller\" });\n  };\n\n  const transitionRooms = (key: RoomKey) => {\n    eventBusManager.loadingBus.emit({\n      type: \"load:start\",\n      loaded: 0,\n      total: 0,\n      url: \"\",\n    });\n\n    Promise.allSettled([switchRoom(key)]).then(() => {\n      eventBusManager.loadingBus.emit({ type: \"load:complete\" });\n    });\n  };\n\n  const deactivateRoom = () => {\n    if (!activeRoomKey) return;\n\n    activeRoom?.setDeactive();\n  };\n\n  return {\n    mount: mount,\n    switchRoom: {\n      navigation: () => transitionRooms(\"navigation\"),\n      about: () => transitionRooms(\"about\"),\n      projects: () => transitionRooms(\"projects\"),\n      default: () => deactivateRoom(),\n    },\n    update: update,\n    unmount: unmount,\n  };\n};\n","import { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { Clock } from \"three\";\nimport { createRoomController, RoomController } from \"./RoomManager\";\n\nexport interface GameplayManager {\n  onMount: () => Promise<void>;\n  update: () => void;\n  onUnmount: () => void;\n}\n\ninterface State {\n  deltaTime: number;\n}\n\ninterface TempData {\n  deltaTime: number;\n}\n\nexport const createGameplayManager = (): GameplayManager => {\n  const serviceRegistry = getServiceRegistry();\n\n  //Global properties\n  const [eventBusManager, logger, input] = [\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"InputManager\"),\n  ];\n  const clock: Clock = new Clock();\n\n  //Re usable state (no re-allocation)\n  let state: State = { deltaTime: 0 };\n  let tempData: TempData = { deltaTime: 0 };\n  let isMounted: boolean = false;\n\n  //Controllers\n  let roomController: RoomController = createRoomController();\n\n  const bind = () => {\n    eventBusManager.displayBus.on(\n      \"about:show\",\n      roomController.switchRoom[\"about\"]\n    );\n    eventBusManager.displayBus.on(\n      \"about:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"projects:show\",\n      roomController.switchRoom[\"projects\"]\n    );\n    eventBusManager.displayBus.on(\n      \"projects:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"home:show\",\n      roomController.switchRoom[\"navigation\"]\n    );\n    eventBusManager.displayBus.on(\n      \"home:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n  };\n\n  const mount = async (): Promise<void> => {\n    if (isMounted) return;\n\n    await roomController.mount();\n    bind();\n    isMounted = true;\n\n    window.addEventListener(\"keyup\", (e) => {\n      console.log(e);\n    });\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime) && tempData.deltaTime !== undefined) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n\n    roomController.update(state.deltaTime ?? 0);\n  };\n\n  const unbind = () => {\n    // eventBusManager.displayBus.off(\"about:show\", rooms.navigation.setActive);\n    // eventBusManager.displayBus.off(\"about:hide\", rooms.navigation.setDeactive);\n  };\n\n  const unmount = () => {\n    unbind();\n  };\n\n  return {\n    onMount: mount,\n    update: update,\n    onUnmount: unmount,\n  };\n};\n"]}