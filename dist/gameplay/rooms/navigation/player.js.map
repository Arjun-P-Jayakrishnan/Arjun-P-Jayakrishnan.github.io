{"version":3,"sources":["../../../../src/gameplay/modules/animation.ts","../../../../src/gameplay/modules/fsm/player.ts","../../../../src/gameplay/rooms/navigation/player.ts"],"names":["createAnimationController","mixer","actions","crossFadeDuration","currentAnimation","blendTime","currentAction","animationName","blendDuration","nextAction","deltaTime","Idle","props","player","Walk","Run","createFSMController","inputs","animationController","keyboard","idle","walk","run","state","currentState","update","playerFSM","isMoving","isShiftPressed","_getState","newState","changeState","mount","PLAYER_CONSTANTS","createPlayer","reference","storage","InputManager","controllers","Vector3","tempData","objects","playerRoot","animations","AnimationMixer","fsmController","err","updateMouse","mouse","updateKeyboard","VELOCITY_DEADZONE","inputDirection","decay","updateControllers","Euler"],"mappings":"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","file":"player.js","sourcesContent":["import { AnimationAction, AnimationMixer } from \"three\";\n\nexport interface AnimationControllerProps {\n  mixer: AnimationMixer;\n  actions: Record<string, AnimationAction>;\n  crossFadeDuration: 0.3;\n}\n\nexport interface AnimationController {\n  play: (animationName: string, blendDuration?: number) => void;\n  stop: () => void;\n  getCurrentAnimation: () => string | null;\n  update: (deltaTime: number) => void;\n}\n\nexport const createAnimationController = ({\n  mixer,\n  actions,\n  crossFadeDuration = 0.3,\n}: AnimationControllerProps): AnimationController => {\n  let currentAnimation: Nullable<string> = null;\n  let blendTime: number = 0;\n  let currentAction: Nullable<AnimationAction> = null;\n\n  const play = (animationName: string, blendDuration = 0) => {\n    if (currentAnimation === animationName) return;\n\n    const nextAction = actions[animationName];\n    if (!nextAction) return;\n    nextAction.reset();\n    nextAction.play();\n\n    if (currentAction != null) {\n      (currentAction as AnimationAction).crossFadeTo(\n        nextAction,\n        crossFadeDuration,\n        false\n      );\n    }\n\n    currentAction = nextAction;\n    currentAnimation = animationName;\n  };\n\n  const stop = () => {};\n\n  const getCurrentAnimation = () => {\n    return currentAnimation;\n  };\n\n  const update = (deltaTime: number) => {\n    if (deltaTime !== undefined) mixer.update(deltaTime);\n  };\n\n  return {\n    play: play,\n    getCurrentAnimation: getCurrentAnimation,\n    stop: stop,\n    update: update,\n  };\n};\n","import { InputManager } from \"engine/managers/InputManager\";\nimport { AnimationController } from \"../animation\";\n\ntype States = \"Idle\" | \"Walk\" | \"Run\";\n\ninterface PlayerFSM {\n  changeState: (state: States) => void;\n  isMoving: () => boolean;\n  isShiftPressed: () => boolean;\n}\n\ninterface StateProps {\n  animationId: string;\n  animationController: AnimationController;\n}\n\ninterface State {\n  enter: (player: PlayerFSM) => void;\n  execute: (player: PlayerFSM) => void;\n  exit: (player: PlayerFSM) => void;\n}\n\nconst Idle = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter idle\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (player.isMoving()) {\n      if (player.isShiftPressed()) {\n        player.changeState(\"Run\");\n      } else {\n        player.changeState(\"Walk\");\n      }\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit idle\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Walk = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter walk\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (player.isShiftPressed()) {\n      player.changeState(\"Run\");\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit walk\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nconst Run = (props: StateProps): State => {\n  const enter = (player: PlayerFSM) => {\n    console.log(\"enter run\");\n    props.animationController.play(props.animationId);\n  };\n\n  const execute = (player: PlayerFSM) => {\n    if (!player.isMoving()) {\n      player.changeState(\"Idle\");\n    } else if (!player.isShiftPressed()) {\n      player.changeState(\"Walk\");\n    }\n  };\n\n  const exit = (player: PlayerFSM) => {\n    console.log(\"exit run\");\n  };\n\n  return {\n    enter: enter,\n    execute: execute,\n    exit: exit,\n  };\n};\n\nexport interface FSMOptions {\n  inputs: InputManager;\n  animationController: AnimationController;\n}\n\nexport interface FSMController {\n  mount: () => void;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\nexport const createFSMController = ({\n  inputs,\n  animationController,\n}: FSMOptions): FSMController => {\n  const { mouse, keyboard } = {\n    mouse: inputs.getController(\"mouse\"),\n    keyboard: inputs.getController(\"keyboard\"),\n  };\n\n  let shiftPressed: boolean;\n  const { idle, walk, run } = {\n    idle: Idle({\n      animationController: animationController,\n      animationId: \"Idle\",\n    }),\n    walk: Walk({\n      animationController: animationController,\n      animationId: \"Walk\",\n    }),\n    run: Run({\n      animationController: animationController,\n      animationId: \"Run\",\n    }),\n  };\n  let state: State = idle;\n  let currentState: States = \"Idle\";\n\n  const update = (deltaTime: number) => {\n    state.execute(playerFSM);\n    animationController.update(deltaTime);\n  };\n\n  const isMoving = () => {\n    if (\n      keyboard?.isKeyPressed(\"w\") ||\n      keyboard?.isKeyPressed(\"a\") ||\n      keyboard?.isKeyPressed(\"s\") ||\n      keyboard?.isKeyPressed(\"d\")\n    ) {\n      return true;\n    }\n\n    return false;\n  };\n\n  const isShiftPressed = () => {\n    return keyboard?.isKeyPressed(\"shift\") ?? false;\n  };\n\n  const _getState = (newState: States) => {\n    switch (newState) {\n      case \"Idle\":\n        return idle;\n      case \"Walk\":\n        return walk;\n      case \"Run\":\n        return run;\n      default:\n        return idle;\n    }\n  };\n\n  const changeState = (newState: States) => {\n    if (currentState !== newState) {\n      currentState = newState;\n      state.exit(playerFSM);\n      state = _getState(newState);\n      state.enter(playerFSM);\n    }\n  };\n\n  const mount = () => {\n    state.enter(playerFSM);\n  };\n\n  const playerFSM: PlayerFSM = {\n    changeState: changeState,\n    isMoving: isMoving,\n    isShiftPressed: isShiftPressed,\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n","import { InputManager } from \"engine/managers/InputManager\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  AnimationController,\n  createAnimationController,\n} from \"gameplay/modules/animation\";\nimport {\n  createFSMController,\n  FSMController,\n} from \"gameplay/modules/fsm/player\";\nimport { KeyboardInput } from \"plugins/input/keyboard\";\nimport { MouseInput } from \"plugins/input/mouse\";\nimport { AnimationMixer, Euler, Object3D, Vector3 } from \"three\";\nimport { GenericLifeCycle, ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  InputManager: InputManager;\n}\n\nexport interface Player extends GenericLifeCycle {\n  /** Update based on controller input */\n  update: (deltaTime: number) => {\n    position: Vector3;\n    rotation: Euler;\n    rotationDelta: { yaw: number; pitch: number };\n  };\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface Controllers {\n  input: {\n    mouse: Nullable<MouseInput>;\n    keyboard: Nullable<KeyboardInput>;\n  };\n  animation: AnimationController;\n  fsm: FSMController;\n}\n\ninterface ObjectReferences {\n  player: Nullable<Object3D>;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = ({\n  reference,\n  storage,\n  InputManager,\n}: PlayerProps): Player => {\n  let controllers: Controllers;\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n\n  let objects: ObjectReferences = { player: null };\n\n  const mount = () => {\n    try {\n      const playerRoot = storage\n        .getStorage(\"model\")\n        .retrieve(reference.storageId);\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${reference.storageId}`\n        );\n      }\n      const player = playerRoot?.groups;\n      const animations = playerRoot?.animations;\n\n      /**Animation */\n      const mixer = new AnimationMixer(player);\n      const animationController = createAnimationController({\n        mixer: mixer,\n        actions: {\n          Idle: mixer.clipAction(animations[0]),\n          Walk: mixer.clipAction(animations[3]),\n          Run: mixer.clipAction(animations[1]),\n        },\n        crossFadeDuration: 0.3,\n      });\n\n      const fsmController = createFSMController({\n        animationController: animationController,\n        inputs: InputManager,\n      });\n      fsmController.mount();\n\n      objects = {\n        player: player,\n      };\n\n      controllers = {\n        input: {\n          mouse: InputManager.getController(\"mouse\"),\n          keyboard: InputManager.getController(\"keyboard\"),\n        },\n        animation: animationController,\n        fsm: fsmController,\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (mouse: Nullable<MouseInput>) => {\n    if (!mouse || !objects.player!) return;\n\n    state.rotationApplied = mouse.getRotation();\n    objects.player.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (\n    keyboard: Nullable<KeyboardInput>,\n    deltaTime: number\n  ) => {\n    if (!keyboard || !objects.player) return;\n    const FRICTION = 5.0;\n    const VELOCITY_DEADZONE = 0.001;\n\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n    if (keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n    if (keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n    if (keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n    if (inputDirection.length() > 0) {\n      //normalize direction\n      inputDirection.applyQuaternion(objects.player.quaternion);\n      inputDirection.normalize();\n\n      //accelerate towards the direction\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n      //ensure the velocity doesn't go over the threshold\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n      const decay = Math.exp(-FRICTION * deltaTime);\n      state.velocity.multiplyScalar(decay);\n\n      if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n        state.velocity.set(0, 0, 0);\n      }\n    }\n\n    objects.player.position.add(state.velocity);\n  };\n\n  const updateControllers = (deltaTime: number) => {\n    updateMouse(controllers.input.mouse);\n    updateKeyboard(controllers.input.keyboard, deltaTime);\n  };\n\n  const update = (deltaTime: number) => {\n    updateControllers(deltaTime);\n\n    controllers.fsm.update(deltaTime);\n\n    return {\n      position: objects.player?.position ?? new Vector3(0, 0, 0),\n      rotation: objects.player?.rotation ?? new Euler(0, 0, 0, \"XYZ\"),\n      rotationDelta: state.rotationApplied,\n    };\n  };\n\n  const activate = () => {\n    // objects.playerRoot.rotation.set(0,0,0,'XYZ')\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    try {\n      //objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}