{"version":3,"sources":["../../../../src/materials/grid/grid-fragment.ts","../../../../src/materials/grid/grid-vertex.ts","../../../../src/materials/grid/grid-material.ts","../../../../src/gameplay/rooms/navigation/ground.ts"],"names":["GridFragment","GridVertex","createGridMaterial","props","mat","ShaderMaterial","cameraPos","createGround","logger","references","storage","camera","ground","gridMat"],"mappings":"mCAAO,IAAMA,CAAe,CAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;ACArB,CAAA,CAAA,IAAMC,CAAa,CAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;ACenB,CAAA,CAAA,IAAMC,CAAsBC,CAAAA,CAAAA,EAA6B,CAC9D,IAAMC,EAAsB,IAAIC,cAAAA,CAAe,CAC7C,QAAA,CAAU,CACR,IAAM,CAAA,CAAE,KAAO,CAAA,CAAE,EACjB,SAAW,CAAA,CAAE,KAAOF,CAAAA,CAAAA,CAAM,OAAO,QAAS,CAAA,CAC1C,QAAU,CAAA,CAAE,MAAOA,CAAM,CAAA,QAAS,CAClC,CAAA,OAAA,CAAS,CAAE,KAAOA,CAAAA,CAAAA,CAAM,OAAQ,CAClC,EACA,YAAcF,CAAAA,CAAAA,CACd,cAAgBD,CAAAA,CAClB,CAAC,CAMD,CAAA,OAAO,CACL,GAAA,CAAKI,EACL,MANcE,CAAAA,CAAAA,EAAuB,CACrCF,CAAAA,CAAI,SAAS,SAAU,CAAA,KAAA,CAAQE,EACjC,CAKA,CACF,CCdO,CAAA,IAAMC,CAAe,CAAA,CAAC,CAC3B,MAAAC,CAAAA,CAAAA,CACA,UAAAC,CAAAA,CAAAA,CACA,QAAAC,CACA,CAAA,MAAA,CAAAC,CACF,CAAA,GAA2B,CACzB,IAAIC,CAAAA,CAAyB,IACzBC,CAAAA,CAAAA,CAAkC,KAmCtC,OAAO,CACL,KAlCY,CAAA,IAAM,CAOlB,GANAD,CAAAA,CACGF,CACE,CAAA,UAAA,CAAW,OAAO,CAClB,CAAA,QAAA,CAASD,CAAW,CAAA,SAAS,GAC5B,MAAO,CAAA,eAAA,CAAgBA,CAAW,CAAA,EAAE,GAAc,IAEpD,CAAA,CAACG,CAAQ,CAAA,CACX,QAAQ,KACN,CAAA,CAAA,mCAAA,EAAsCH,CAAW,CAAA,EAAE,IAAIA,CAAW,CAAA,SAAS,CAC7E,CAAA,CAAA,CACA,MACF,CAEAI,CAAAA,CAAUX,CAAmB,CAAA,CAC3B,OAAQS,CACR,CAAA,QAAA,CAAU,EACV,CAAA,OAAA,CAAS,CACX,CAAC,CAAA,CAEDC,CAAO,CAAA,QAAA,CAAWC,EAAQ,GAC1BL,CAAAA,CAAAA,CAAO,OAAQ,CAAA,CAAE,OAAQ,mBAAoB,CAAC,EAChD,CAAA,CAaE,OAXa,IAAM,CACnBK,CAAS,EAAA,MAAA,CAAOF,EAAO,QAAQ,EACjC,CAUE,CAAA,QAAA,CARe,IAAM,EAAC,CAStB,UARiB,CAAA,IAAM,EASvB,CAAA,OAAA,CAPc,IAAM,EAQtB,CACF","file":"ground.js","sourcesContent":["export const GridFragment = `\n    precision highp float;\n\n    varying vec2 vUV;\n\n    float line(vec2 uv,float lineWidth){\n\n       \n        float lineAA=fwidth(uv.x);\n \n        float lineUV=1.0-abs(fract(uv.x)*2.0-1.0);\n\n        return smoothstep(lineWidth+lineAA,lineWidth-lineAA,lineUV);\n    }  \n\n    float grid(vec2 uv,float lineWidth){\n\n        vec2 uvDeriv=fwidth(uv);\n        vec2 drawWidth=max(vec2(lineWidth),uvDeriv);\n        vec2 lineAA=uvDeriv*1.5;\n \n        vec2 gridUV=1.0-abs(fract(uv)*2.0-1.0);\n\n        vec2 gridLines=smoothstep(drawWidth+lineAA,drawWidth-lineAA,gridUV);\n        gridLines*=clamp(lineWidth/drawWidth,0.0,1.0);\n\n        return mix(gridLines.x,1.0,gridLines.y);\n    } \n\n    void main(){\n        vec2 st=vUV*1500.0;\n       \n        gl_FragColor = vec4(vec3(grid(st,0.01)),1.0);\n    }\n\n`;\n","export const GridVertex = `\n    precision highp float;\n\n    \n\n    varying vec2 vUV;\n    varying vec4 vWorldPos; \n\n    void main(){\n        vUV=uv;\n        vWorldPos=modelViewMatrix*vec4(position,1.0);\n\n        gl_Position = projectionMatrix*modelViewMatrix*vec4(position,1.0);\n    }\n\n`;\n","import { PerspectiveCamera, ShaderMaterial, Vector3 } from \"three\";\nimport { GridFragment } from \"./grid-fragment\";\nimport { GridVertex } from \"./grid-vertex\";\n\nexport interface GridMaterialProps {\n  camera: PerspectiveCamera;\n  fadeNear: number;\n  fadeFar: number;\n}\n\nexport interface GridMaterial {\n  mat: ShaderMaterial;\n  update: (cameraPos: Vector3) => void;\n}\n\nexport const createGridMaterial = (props: GridMaterialProps) => {\n  const mat: ShaderMaterial = new ShaderMaterial({\n    uniforms: {\n      time: { value: 1 },\n      cameraPos: { value: props.camera.position },\n      fadeNear: { value: props.fadeNear },\n      fadeFar: { value: props.fadeFar },\n    },\n    vertexShader: GridVertex,\n    fragmentShader: GridFragment,\n  });\n\n  const update = (cameraPos: Vector3) => {\n    mat.uniforms.cameraPos.value = cameraPos;\n  };\n\n  return {\n    mat: mat,\n    update: update,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { createGridMaterial, GridMaterial } from \"materials/grid/grid-material\";\nimport { Mesh, PerspectiveCamera } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface GroundProps {\n  references: ModelIdentifier;\n  storage: GlobalStorageManager;\n  logger: Logger;\n  camera: PerspectiveCamera;\n}\n\nexport interface Ground {\n  mount: () => void;\n  update: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = ({\n  logger,\n  references,\n  storage,\n  camera,\n}: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n  let gridMat: Nullable<GridMaterial> = null;\n\n  const mount = () => {\n    ground =\n      (storage\n        .getStorage(\"model\")\n        .retrieve(references.storageId)\n        ?.groups.getObjectByName(references.id) as Mesh) ?? null;\n\n    if (!ground) {\n      console.error(\n        `Cant get ground mesh from the id : ${references.id} ${references.storageId}`\n      );\n      return;\n    }\n\n    gridMat = createGridMaterial({\n      camera: camera,\n      fadeNear: 0.1,\n      fadeFar: 1,\n    });\n\n    ground.material = gridMat.mat;\n    logger.onMount({ origin: \"Navigation-Ground\" });\n  };\n\n  const update = () => {\n    gridMat?.update(camera.position);\n  };\n\n  const activate = () => {};\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    update: update,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n"]}