{"version":3,"sources":["../../../../src/engine/core/ServiceRegistry.ts","../../../../src/gameplay/rooms/about/camera.ts","../../../../src/gameplay/rooms/about/ground.ts","../../../../src/gameplay/rooms/about/lights.ts","../../../../src/gameplay/rooms/about/player.ts","../../../../src/gameplay/rooms/about/room.ts"],"names":["createServiceRegistry","services","name","service","serviceRegistry","getServiceRegistry","createCameraManager","props","camera","target","Vector3","createGround","logger","reference","storage","ground","createLighting","renderer","scene","dirLight","ambientLight","DirectionalLight","AmbientLight","PCFShadowMap","createPlayer","objects","animations","castShadow","player","child","playerRoot","AnimationMixer","err","createAboutRoom","context","orbit","components","group","deltaTime"],"mappings":"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","file":"room.js","sourcesContent":["import {\n  ServiceKey,\n  ServiceMap,\n  ServiceRegistry,\n  ServiceType,\n} from \"types/service.types\";\n\nconst createServiceRegistry = (): ServiceRegistry => {\n  const services: Map<ServiceKey, ServiceType> = new Map<\n    ServiceKey,\n    ServiceType\n  >();\n\n  const register = <K extends ServiceKey>(\n    name: K,\n    service: ServiceMap[K]\n  ): void => {\n    if (services.has(name)) {\n      throw new Error(`Error : Redefining the service [${name}]`);\n    }\n    services.set(name, service);\n  };\n\n  const get = <K extends ServiceKey>(name: K): ServiceMap[K] => {\n    const service = services.get(name);\n    if (!service) {\n      throw new Error(\n        `Error : Trying to obtain value of an unregistered service ${name}`\n      );\n    }\n    return service as ServiceMap[K];\n  };\n\n  const has = (name: ServiceKey): boolean => {\n    return services.has(name);\n  };\n\n  return {\n    register: register,\n    get: get,\n    has: has,\n  };\n};\n\nlet serviceRegistry: ServiceRegistry | undefined = undefined;\n\nconst getServiceRegistry = () => {\n  if (!serviceRegistry) {\n    serviceRegistry = createServiceRegistry();\n  }\n\n  return serviceRegistry;\n};\n\nexport { getServiceRegistry };\n","import { PerspectiveCamera, Scene, Vector3 } from \"three\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n  scene: Scene;\n}\n\nexport interface CameraManager {\n  mount: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createCameraManager = (props: CameraProps): CameraManager => {\n  const { camera, scene } = props;\n  const target = new Vector3(0, 1, 2);\n  const mount = () => {};\n\n  const activate = () => {\n    camera.position.set(target.x, 1, target.z);\n    camera.rotation.set(0, 0, 0, \"XYZ\");\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { Material, Mesh, MeshStandardMaterial } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface GroundProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  logger: Logger;\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = ({\n  logger,\n  reference,\n  storage,\n}: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n\n  const mount = () => {\n    ground = storage\n      .getStorage(\"model\")\n      .retrieve(reference.storageId)\n      ?.groups.getObjectByName(reference.id) as Mesh;\n\n    if (!ground) {\n      console.error(`Cant get ground mesh from the id : ${reference.id}`);\n      return;\n    }\n    ground.material = (ground.material as Material).clone();\n    ground.receiveShadow = true;\n\n    (ground.material as Material).needsUpdate = true;\n    (ground.material as MeshStandardMaterial).opacity = 0.15;\n    (ground.material as MeshStandardMaterial).transparent = true;\n\n    logger.onMount({ origin: \"about-ground\" });\n  };\n\n  const activate = () => {};\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import {\n  AmbientLight,\n  DirectionalLight,\n  PCFShadowMap,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\n\nexport interface LightingProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n}\n\nexport interface Lighting {\n  mount: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createLighting = ({\n  renderer,\n  scene,\n}: LightingProps): Lighting => {\n  let dirLight: Nullable<DirectionalLight>;\n  let ambientLight: Nullable<AmbientLight>;\n\n  const mount = () => {\n    dirLight = new DirectionalLight(0xffffff, 5);\n    dirLight.castShadow = true;\n    dirLight.position.set(0, 2, 0);\n    dirLight.target.position.set(0, 1, 0);\n\n    dirLight.shadow.mapSize.width = 1024;\n    dirLight.shadow.mapSize.height = 1024;\n    dirLight.shadow.camera.near = 0.1;\n    dirLight.shadow.camera.far = 50;\n    dirLight.shadow.camera.left = -10;\n    dirLight.shadow.camera.right = 10;\n    dirLight.shadow.camera.top = 10;\n    dirLight.shadow.camera.bottom = -10;\n\n    ambientLight = new AmbientLight(0xffffff);\n\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = PCFShadowMap;\n  };\n\n  const activate = () => {\n    if (dirLight) scene.add(dirLight);\n    if (ambientLight) scene.add(ambientLight);\n  };\n\n  const deactivate = () => {\n    if (dirLight) scene.remove(dirLight);\n    if (ambientLight) scene.remove(ambientLight);\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  AnimationMixer,\n  Object3D,\n  Object3DEventMap,\n  Scene,\n  Vector3,\n} from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  logger: Logger;\n  storage: GlobalStorageManager;\n  scene: Scene;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = ({\n  logger,\n  reference,\n  scene,\n  storage,\n}: PlayerProps): Player => {\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      logger.onMount({ origin: \"about-room-player\" });\n      let playerRoot = scene.getObjectByName(reference.id);\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${reference.id}`);\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, -Math.PI / 4, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Group, Object3DEventMap } from \"three\";\n\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { ModelIdentifier, Room } from \"types/rooms.types\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { createGround, Ground } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { createPlayer, Player } from \"./player\";\n\nexport interface AboutRoomProps {\n  player: ModelIdentifier;\n  ground: ModelIdentifier;\n}\n\ninterface Components {\n  camera: CameraManager;\n  player: Player;\n  ground: Ground;\n  lighting: Lighting;\n}\n\nexport const createAboutRoom = ({ ground, player }: AboutRoomProps): Room => {\n  //====References====\n  const serviceRegistry = getServiceRegistry();\n  const [storage, logger, context] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n  ];\n\n  const { scene, camera, orbit, renderer } = {\n    scene: context.get(\"scene\")!,\n    camera: context.get(\"camera\")!,\n    orbit: context.get(\"orbit\")!,\n    renderer: context.get(\"renderer\")!,\n  };\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({ camera: camera, scene: scene }),\n    player: createPlayer({ logger, reference: player, scene, storage }),\n    ground: createGround({ logger, reference: ground, storage }),\n    lighting: createLighting({ renderer, scene }),\n  };\n\n  let group: Nullable<Group<Object3DEventMap>> = null;\n\n  const mount = () => {\n    logger.onMount({ origin: \"about-room\" });\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n    group =\n      storage.getStorage(\"model\").retrieve(ground.storageId)?.groups ?? null;\n  };\n\n  const activate = () => {\n    if (group) group.visible = true;\n\n    orbit.enabled = false;\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n  };\n\n  const update = (deltaTime: number) => {\n    // components.camera.update(deltaTime);\n  };\n\n  const deactivate = () => {\n    if (group) group.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded: false,\n  };\n};\n"]}