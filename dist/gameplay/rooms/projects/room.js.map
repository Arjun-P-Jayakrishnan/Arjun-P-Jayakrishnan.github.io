{"version":3,"sources":["../../../../src/engine/core/ServiceRegistry.ts","../../../../src/gameplay/rooms/projects/camera.ts","../../../../src/gameplay/rooms/projects/ground.ts","../../../../src/gameplay/rooms/projects/lights.ts","../../../../src/gameplay/rooms/projects/player.ts","../../../../src/gameplay/rooms/projects/room.ts"],"names":["createServiceRegistry","services","name","service","serviceRegistry","getServiceRegistry","createCameraManager","camera","eventBusManager","orbit","scene","points","Vector3","camPath","CatmullRomCurve3","t","isComplete","deltaTime","position","lookAt","createGround","reference","logger","storage","ground","groups","excludeShadow","child","createLighting","renderer","dirLight","ambientLight","DirectionalLight","AmbientLight","PCFShadowMap","createPlayer","objects","mixers","castShadow","player","playerRoot","animations","mixer","AnimationMixer","err","createProjectRoom","context","components","group"],"mappings":"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","file":"room.js","sourcesContent":["import {\n  ServiceKey,\n  ServiceMap,\n  ServiceRegistry,\n  ServiceType,\n} from \"types/service.types\";\n\nconst createServiceRegistry = (): ServiceRegistry => {\n  const services: Map<ServiceKey, ServiceType> = new Map<\n    ServiceKey,\n    ServiceType\n  >();\n\n  const register = <K extends ServiceKey>(\n    name: K,\n    service: ServiceMap[K]\n  ): void => {\n    if (services.has(name)) {\n      throw new Error(`Error : Redefining the service [${name}]`);\n    }\n    services.set(name, service);\n  };\n\n  const get = <K extends ServiceKey>(name: K): ServiceMap[K] => {\n    const service = services.get(name);\n    if (!service) {\n      throw new Error(\n        `Error : Trying to obtain value of an unregistered service ${name}`\n      );\n    }\n    return service as ServiceMap[K];\n  };\n\n  const has = (name: ServiceKey): boolean => {\n    return services.has(name);\n  };\n\n  return {\n    register: register,\n    get: get,\n    has: has,\n  };\n};\n\nlet serviceRegistry: ServiceRegistry | undefined = undefined;\n\nconst getServiceRegistry = () => {\n  if (!serviceRegistry) {\n    serviceRegistry = createServiceRegistry();\n  }\n\n  return serviceRegistry;\n};\n\nexport { getServiceRegistry };\n","import { EventBusManager } from \"@events/EventBusManager\";\nimport { CatmullRomCurve3, PerspectiveCamera, Scene, Vector3 } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n  scene: Scene;\n  orbit: OrbitControls;\n  eventBusManager: EventBusManager;\n}\n\nexport interface CameraManager {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createCameraManager = ({\n  camera,\n  eventBusManager,\n  orbit,\n  scene,\n}: CameraProps): CameraManager => {\n  const points: Vector3[] = [\n    new Vector3(0, 2, 10),\n    new Vector3(0, 2, 5),\n    new Vector3(0, 2, 3),\n    new Vector3(0, 2, 2),\n    new Vector3(0, 2, 1),\n    new Vector3(0, 2, 0),\n    new Vector3(0, 2, -1),\n    new Vector3(0, 1, -1),\n    new Vector3(0, 1, -1.5),\n    new Vector3(0, 1, -2),\n  ];\n\n  const camPath = new CatmullRomCurve3(points);\n  let t = 0;\n  let isComplete: boolean = false;\n\n  const mount = () => {\n    t = 0;\n  };\n\n  const activate = () => {\n    orbit.enabled = false;\n    camera.position.set(0, 2.5, 10);\n    camera.near = 0.001;\n    camera.far = 1000;\n  };\n\n  const update = (deltaTime: number) => {\n    if (!isComplete && t > 1) {\n      isComplete = true;\n      orbit.enabled = true;\n      eventBusManager.viewBus.emit({\n        type: \"project-screen:show\",\n        elementId: \"project-screen\",\n      });\n      console.log(\"event emitted view event\");\n    }\n\n    if (!isComplete) {\n      t += deltaTime * 0.1;\n\n      if (t <= 0.9) {\n        const position = camPath.getPointAt(t);\n        const lookAt = camPath.getPointAt(t + 0.1);\n        lookAt.z -= 0.1;\n        camera.position.copy(position);\n        camera.lookAt(lookAt);\n      }\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { Material, Mesh, MeshStandardMaterial } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface GroundProps {\n  reference: ModelIdentifier;\n  logger: Logger;\n  storage: GlobalStorageManager;\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = ({\n  reference,\n  logger,\n  storage,\n}: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n\n  const mount = () => {\n    const groups = storage\n      .getStorage(\"model\")\n      .retrieve(reference.storageId)?.groups;\n    ground = groups?.getObjectByName(reference.id) as Mesh;\n\n    if (!ground) {\n      console.error(`Cant get ground mesh from the id : ${reference.id}`);\n      return;\n    }\n    ground.material = (ground.material as Material).clone();\n    ground.receiveShadow = true;\n\n    (ground.material as Material).needsUpdate = true;\n    (ground.material as MeshStandardMaterial).opacity = 1;\n    (ground.material as MeshStandardMaterial).transparent = true;\n    const excludeShadow = [\"sky\", \"ground\"];\n\n    groups?.traverse((child) => {\n      if (!excludeShadow.includes(child.name)) {\n        child.castShadow = true;\n      }\n    });\n\n    logger.onMount({ origin: \"about-ground\" });\n  };\n\n  const activate = () => {};\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import {\n  AmbientLight,\n  DirectionalLight,\n  PCFShadowMap,\n  Scene,\n  WebGLRenderer,\n} from \"three\";\n\nexport interface LightingProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n}\n\nexport interface Lighting {\n  mount: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createLighting = ({\n  renderer,\n  scene,\n}: LightingProps): Lighting => {\n  let dirLight: Nullable<DirectionalLight>;\n  let ambientLight: Nullable<AmbientLight>;\n\n  const mount = () => {\n    dirLight = new DirectionalLight(0xffffff, 5);\n    dirLight.castShadow = true;\n    dirLight.position.set(0, 1, 0.5);\n    dirLight.target.position.set(0, 0, 0);\n\n    dirLight.shadow.mapSize.width = 1024;\n    dirLight.shadow.mapSize.height = 1024;\n    dirLight.shadow.camera.near = 0.1;\n    dirLight.shadow.camera.far = 50;\n    dirLight.shadow.camera.left = -10;\n    dirLight.shadow.camera.right = 10;\n    dirLight.shadow.camera.top = 10;\n    dirLight.shadow.camera.bottom = -10;\n\n    ambientLight = new AmbientLight(0xffffff);\n\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = PCFShadowMap;\n  };\n\n  const activate = () => {\n    if (dirLight) scene.add(dirLight);\n    if (ambientLight) scene.add(ambientLight);\n  };\n\n  const deactivate = () => {\n    if (dirLight) scene.remove(dirLight);\n    if (ambientLight) scene.remove(ambientLight);\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n","import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { AnimationMixer, Object3D, Object3DEventMap, Scene } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  logger: Logger;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\nexport const createPlayer = ({\n  logger,\n  reference,\n  storage,\n}: PlayerProps): Player => {\n  let objects: ObjectReferences;\n  let mixers: AnimationMixer[] = [];\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      let playerRoot = storage\n        .getStorage(\"model\")\n        .retrieve(reference.storageId)?.groups;\n      let animations =\n        storage.getStorage(\"model\").retrieve(reference.storageId)?.animations ??\n        [];\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${reference.storageId}`\n        );\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      // console.log('armature',armature)\n      const mixer = new AnimationMixer(playerRoot);\n      mixer.clipAction(animations[2]).play();\n\n      mixers.push(mixer);\n      logger.onMount({ origin: \"Project-Room-Player\" });\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, 0, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n    }\n  };\n\n  const update = (deltaTime: number) => {\n    mixers.forEach((mixer) => {\n      mixer.update(deltaTime);\n    });\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n","import { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { Group, Object3DEventMap } from \"three\";\nimport { ModelIdentifier, Room, RoomProps } from \"types/rooms.types\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { createGround, Ground } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { createPlayer, Player } from \"./player\";\n\nexport interface ProjectRoomProps extends RoomProps {\n  player: ModelIdentifier;\n  ground: ModelIdentifier;\n}\n\ninterface Components {\n  camera: CameraManager;\n  player: Player;\n  ground: Ground;\n  lighting: Lighting;\n}\n\nexport const createProjectRoom = ({\n  player,\n  ground,\n}: ProjectRoomProps): Room => {\n  //====References===\n  const serviceRegistry = getServiceRegistry();\n  const [storage, context, eventBusManager, logger] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"Logger\"),\n  ];\n\n  const { scene, camera, orbit, renderer } = {\n    scene: context.get(\"scene\")!,\n    camera: context.get(\"camera\")!,\n    orbit: context.get(\"orbit\")!,\n    renderer: context.get(\"renderer\")!,\n  };\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({\n      camera,\n      eventBusManager,\n      orbit,\n      scene,\n    }),\n    player: createPlayer({ logger, reference: player, storage }),\n    ground: createGround({ logger, reference: ground, storage }),\n    lighting: createLighting({ renderer, scene }),\n  };\n  let group: Nullable<Group<Object3DEventMap>> = null;\n\n  const mount = () => {\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n\n    group =\n      storage.getStorage(\"model\").retrieve(ground.storageId)?.groups ?? null;\n\n    logger.onMount({ origin: \"Projects\" });\n  };\n\n  const activate = () => {\n    if (group) group.visible = true;\n\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n  };\n\n  const update = (deltaTime: number) => {\n    components.player.update(deltaTime);\n    components.camera.update(deltaTime);\n  };\n\n  const deactivate = () => {\n    if (group) group.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded: false,\n  };\n};\n"]}