{"version":3,"sources":["../../../../src/gameplay/rooms/projects/camera.ts"],"names":["createCameraManager","camera","eventBusManager","orbit","scene","points","Vector3","camPath","CatmullRomCurve3","isComplete","deltaTime","position","lookAt"],"mappings":"6CAmBaA,IAAAA,CAAAA,CAAsB,CAAC,CAClC,MAAA,CAAAC,EACA,eAAAC,CAAAA,CAAAA,CACA,MAAAC,CACA,CAAA,KAAA,CAAAC,CACF,CAAkC,GAAA,CAChC,IAAMC,CAAoB,CAAA,CACxB,IAAIC,OAAQ,CAAA,CAAA,CAAG,EAAG,EAAE,CAAA,CACpB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,CAAC,CAAA,CACnB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,CAAC,CAAA,CACnB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,CAAC,CAAA,CACnB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,CAAC,CAAA,CACnB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,CAAC,CAAA,CACnB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,EAAE,CAAA,CACpB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,EAAE,CAAA,CACpB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,IAAI,CAAA,CACtB,IAAIA,OAAQ,CAAA,CAAA,CAAG,EAAG,EAAE,CACtB,EAEMC,CAAU,CAAA,IAAIC,iBAAiBH,CAAM,CAAA,CACvC,EAAI,CACJI,CAAAA,CAAAA,CAAsB,MAyC1B,OAAO,CACL,MAxCY,IAAM,CAClB,EAAI,EACN,CAAA,CAuCE,SArCe,IAAM,CACrBN,EAAM,OAAU,CAAA,KAAA,CAChBF,EAAO,QAAS,CAAA,GAAA,CAAI,EAAG,GAAK,CAAA,EAAE,EAC9BA,CAAO,CAAA,IAAA,CAAO,KACdA,CAAO,CAAA,GAAA,CAAM,IACf,CAiCE,CAAA,MAAA,CA/BcS,GAAsB,CAWpC,GAVI,CAACD,CAAc,EAAA,CAAA,CAAI,IACrBA,CAAa,CAAA,IAAA,CACbN,EAAM,OAAU,CAAA,IAAA,CAChBD,EAAgB,OAAQ,CAAA,IAAA,CAAK,CAC3B,IAAM,CAAA,qBAAA,CACN,UAAW,gBACb,CAAC,EACD,OAAQ,CAAA,GAAA,CAAI,0BAA0B,CAGpC,CAAA,CAAA,CAACO,IACH,CAAKC,EAAAA,CAAAA,CAAY,GAEb,CAAK,EAAA,EAAA,CAAA,CAAK,CACZ,IAAMC,CAAAA,CAAWJ,EAAQ,UAAW,CAAA,CAAC,EAC/BK,CAASL,CAAAA,CAAAA,CAAQ,WAAW,CAAI,CAAA,EAAG,EACzCK,CAAO,CAAA,CAAA,EAAK,GACZX,CAAO,CAAA,QAAA,CAAS,KAAKU,CAAQ,CAAA,CAC7BV,EAAO,MAAOW,CAAAA,CAAM,EACtB,CAEJ,CAAA,CAUE,WARiB,IAAM,GASvB,OAPc,CAAA,IAAM,EAQtB,CACF","file":"camera.js","sourcesContent":["import { EventBusManager } from \"@events/EventBusManager\";\nimport { CatmullRomCurve3, PerspectiveCamera, Scene, Vector3 } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n  scene: Scene;\n  orbit: OrbitControls;\n  eventBusManager: EventBusManager;\n}\n\nexport interface CameraManager {\n  mount: () => void;\n  activate: () => void;\n  update: (deltaTime: number) => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createCameraManager = ({\n  camera,\n  eventBusManager,\n  orbit,\n  scene,\n}: CameraProps): CameraManager => {\n  const points: Vector3[] = [\n    new Vector3(0, 2, 10),\n    new Vector3(0, 2, 5),\n    new Vector3(0, 2, 3),\n    new Vector3(0, 2, 2),\n    new Vector3(0, 2, 1),\n    new Vector3(0, 2, 0),\n    new Vector3(0, 2, -1),\n    new Vector3(0, 1, -1),\n    new Vector3(0, 1, -1.5),\n    new Vector3(0, 1, -2),\n  ];\n\n  const camPath = new CatmullRomCurve3(points);\n  let t = 0;\n  let isComplete: boolean = false;\n\n  const mount = () => {\n    t = 0;\n  };\n\n  const activate = () => {\n    orbit.enabled = false;\n    camera.position.set(0, 2.5, 10);\n    camera.near = 0.001;\n    camera.far = 1000;\n  };\n\n  const update = (deltaTime: number) => {\n    if (!isComplete && t > 1) {\n      isComplete = true;\n      orbit.enabled = true;\n      eventBusManager.viewBus.emit({\n        type: \"project-screen:show\",\n        elementId: \"project-screen\",\n      });\n      console.log(\"event emitted view event\");\n    }\n\n    if (!isComplete) {\n      t += deltaTime * 0.1;\n\n      if (t <= 0.9) {\n        const position = camPath.getPointAt(t);\n        const lookAt = camPath.getPointAt(t + 0.1);\n        lookAt.z -= 0.1;\n        camera.position.copy(position);\n        camera.lookAt(lookAt);\n      }\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    update: update,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n"]}