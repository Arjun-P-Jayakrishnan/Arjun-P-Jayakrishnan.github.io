{"version":3,"sources":["../../../../src/gameplay/rooms/projects/ground.ts"],"names":["createGround","reference","logger","storage","ground","groups","excludeShadow","child"],"mappings":"AAkBaA,IAAAA,CAAAA,CAAe,CAAC,CAC3B,SAAAC,CAAAA,CAAAA,CACA,OAAAC,CACA,CAAA,OAAA,CAAAC,CACF,CAAA,GAA2B,CACzB,IAAIC,EAAyB,IAmC7B,CAAA,OAAO,CACL,KAAA,CAlCY,IAAM,CAClB,IAAMC,CAASF,CAAAA,CAAAA,CACZ,UAAW,CAAA,OAAO,CAClB,CAAA,QAAA,CAASF,EAAU,SAAS,CAAA,EAAG,MAGlC,CAAA,GAFAG,CAASC,CAAAA,CAAAA,EAAQ,gBAAgBJ,CAAU,CAAA,EAAE,CAEzC,CAAA,CAACG,CAAQ,CAAA,CACX,QAAQ,KAAM,CAAA,CAAA,mCAAA,EAAsCH,CAAU,CAAA,EAAE,CAAE,CAAA,CAAA,CAClE,MACF,CACAG,CAAO,CAAA,QAAA,CAAYA,CAAO,CAAA,QAAA,CAAsB,KAAM,EAAA,CACtDA,EAAO,aAAgB,CAAA,IAAA,CAEtBA,CAAO,CAAA,QAAA,CAAsB,WAAc,CAAA,IAAA,CAC3CA,EAAO,QAAkC,CAAA,OAAA,CAAU,CACnDA,CAAAA,CAAAA,CAAO,QAAkC,CAAA,WAAA,CAAc,KACxD,IAAME,CAAAA,CAAgB,CAAC,KAAA,CAAO,QAAQ,CAAA,CAEtCD,GAAQ,QAAUE,CAAAA,CAAAA,EAAU,CACrBD,CAAAA,CAAc,QAASC,CAAAA,CAAAA,CAAM,IAAI,CACpCA,GAAAA,CAAAA,CAAM,UAAa,CAAA,IAAA,EAEvB,CAAC,CAAA,CAEDL,EAAO,OAAQ,CAAA,CAAE,MAAQ,CAAA,cAAe,CAAC,EAC3C,EAUE,QARe,CAAA,IAAM,EAAC,CAStB,UAPiB,CAAA,IAAM,EAAC,CAQxB,OANc,CAAA,IAAM,EAOtB,CACF","file":"ground.js","sourcesContent":["import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { Material, Mesh, MeshStandardMaterial } from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface GroundProps {\n  reference: ModelIdentifier;\n  logger: Logger;\n  storage: GlobalStorageManager;\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createGround = ({\n  reference,\n  logger,\n  storage,\n}: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n\n  const mount = () => {\n    const groups = storage\n      .getStorage(\"model\")\n      .retrieve(reference.storageId)?.groups;\n    ground = groups?.getObjectByName(reference.id) as Mesh;\n\n    if (!ground) {\n      console.error(`Cant get ground mesh from the id : ${reference.id}`);\n      return;\n    }\n    ground.material = (ground.material as Material).clone();\n    ground.receiveShadow = true;\n\n    (ground.material as Material).needsUpdate = true;\n    (ground.material as MeshStandardMaterial).opacity = 1;\n    (ground.material as MeshStandardMaterial).transparent = true;\n    const excludeShadow = [\"sky\", \"ground\"];\n\n    groups?.traverse((child) => {\n      if (!excludeShadow.includes(child.name)) {\n        child.castShadow = true;\n      }\n    });\n\n    logger.onMount({ origin: \"about-ground\" });\n  };\n\n  const activate = () => {};\n\n  const deactivate = () => {};\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n"]}