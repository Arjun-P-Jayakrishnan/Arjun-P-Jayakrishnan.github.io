{"version":3,"sources":["../../../src/gameplay/modules/animation.ts"],"names":["createAnimationController","mixer","actions","crossFadeDuration","currentAnimation","blendTime","currentAction","animationName","blendDuration","nextAction","deltaTime"],"mappings":"AAeO,IAAMA,CAA4B,CAAA,CAAC,CACxC,KAAA,CAAAC,EACA,OAAAC,CAAAA,CAAAA,CACA,iBAAAC,CAAAA,CAAAA,CAAoB,EACtB,CAAA,GAAqD,CACnD,IAAIC,EAAqC,IACrCC,CACAC,CAAAA,CAA2C,KAgC/C,OAAO,CACL,IAAA,CA/BW,CAACC,CAAuBC,CAAAA,CAAAA,CAAgB,CAAM,GAAA,CACzD,GAAIJ,CAAqBG,GAAAA,CAAAA,CAAe,OAExC,IAAME,EAAaP,CAAQK,CAAAA,CAAa,CACnCE,CAAAA,CAAAA,GACLA,CAAW,CAAA,KAAA,EACXA,CAAAA,CAAAA,CAAW,MAGRH,CAAAA,CAAAA,EAAkC,WACjCG,CAAAA,CAAAA,CACAN,EACA,KACF,CAAA,CAGFG,CAAgBG,CAAAA,CAAAA,CAChBL,EAAmBG,CACrB,EAAA,CAAA,CAcE,mBAV0B,CAAA,IACnBH,CAUP,CAAA,IAAA,CAbW,IAAM,GAcjB,MARcM,CAAAA,CAAAA,EAAsB,CAChCA,CAAAA,GAAc,QAAWT,CAAM,CAAA,MAAA,CAAOS,CAAS,EACrD,CAOA,CACF","file":"animation.js","sourcesContent":["import { AnimationAction, AnimationMixer } from \"three\";\n\nexport interface AnimationControllerProps {\n  mixer: AnimationMixer;\n  actions: Record<string, AnimationAction>;\n  crossFadeDuration: 0.3;\n}\n\nexport interface AnimationController {\n  play: (animationName: string, blendDuration?: number) => void;\n  stop: () => void;\n  getCurrentAnimation: () => string | null;\n  update: (deltaTime: number) => void;\n}\n\nexport const createAnimationController = ({\n  mixer,\n  actions,\n  crossFadeDuration = 0.3,\n}: AnimationControllerProps): AnimationController => {\n  let currentAnimation: Nullable<string> = null;\n  let blendTime: number = 0;\n  let currentAction: Nullable<AnimationAction> = null;\n\n  const play = (animationName: string, blendDuration = 0) => {\n    if (currentAnimation === animationName) return;\n\n    const nextAction = actions[animationName];\n    if (!nextAction) return;\n    nextAction.reset();\n    nextAction.play();\n\n    if (currentAction != null) {\n      (currentAction as AnimationAction).crossFadeTo(\n        nextAction,\n        crossFadeDuration,\n        false\n      );\n    }\n\n    currentAction = nextAction;\n    currentAnimation = animationName;\n  };\n\n  const stop = () => {};\n\n  const getCurrentAnimation = () => {\n    return currentAnimation;\n  };\n\n  const update = (deltaTime: number) => {\n    if (deltaTime !== undefined) mixer.update(deltaTime);\n  };\n\n  return {\n    play: play,\n    getCurrentAnimation: getCurrentAnimation,\n    stop: stop,\n    update: update,\n  };\n};\n"]}