{"version":3,"sources":["../src/utils/storage/globalStorage.ts"],"sourcesContent":["import { AnimationClip, Group, Object3DEventMap } from \"three\";\r\nimport { createStorageUnit, StorageUnit } from \"./storageUnit\";\r\n\r\nexport interface GlobalStorageProps {}\r\n\r\nexport interface GlobalStorage {\r\n  mount: () => void;\r\n  unmount: () => void;\r\n  getStorage: <K extends keyof StorageMap>(key: K) => GenericStorageUnit[K];\r\n}\r\n\r\ntype StorageMap = {\r\n  animations: AnimationClip[];\r\n  groups: Group<Object3DEventMap>;\r\n};\r\n\r\ntype GenericStorageUnit = {\r\n  [K in keyof StorageMap]: StorageUnit<StorageMap[K]>;\r\n};\r\n\r\nexport const createGlobalStorage = <K extends keyof StorageMap>(\r\n  _props: GlobalStorageProps\r\n): GlobalStorage => {\r\n  let storage: GenericStorageUnit | undefined;\r\n\r\n  const mount = () => {\r\n    storage = {\r\n      animations: createStorageUnit<AnimationClip[]>(),\r\n      groups: createStorageUnit<Group<Object3DEventMap>>(),\r\n    };\r\n  };\r\n\r\n  const unmount = () => {\r\n    if (storage) {\r\n    }\r\n    storage = undefined;\r\n  };\r\n\r\n  const getStorage = <K extends keyof StorageMap>(\r\n    key: K\r\n  ): GenericStorageUnit[K] => {\r\n    if (storage === undefined) {\r\n      throw new Error(`Must mount the storage first`);\r\n    }\r\n\r\n    return storage[key];\r\n  };\r\n\r\n  return {\r\n    mount: mount,\r\n    unmount: unmount,\r\n    getStorage: getStorage,\r\n  };\r\n};\r\n"],"mappings":";;;;;AAoBO,IAAM,sBAAsB,CACjC,WACkB;AAClB,MAAI;AAEJ,QAAM,QAAQ,MAAM;AAClB,cAAU;AAAA,MACR,YAAY,kBAAmC;AAAA,MAC/C,QAAQ,kBAA2C;AAAA,IACrD;AAAA,EACF;AAEA,QAAM,UAAU,MAAM;AACpB,QAAI,SAAS;AAAA,IACb;AACA,cAAU;AAAA,EACZ;AAEA,QAAM,aAAa,CACjB,QAC0B;AAC1B,QAAI,YAAY,QAAW;AACzB,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAChD;AAEA,WAAO,QAAQ,GAAG;AAAA,EACpB;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}