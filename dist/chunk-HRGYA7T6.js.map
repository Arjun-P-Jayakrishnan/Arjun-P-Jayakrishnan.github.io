{"version":3,"sources":["../src/gameplay/projects/ground.ts"],"names":["createGround","props","ground","getThreeJsContext","globalStorage","getGlobalContext","groups","excludeShadow","child","processPipelineDebugger"],"mappings":"mHAmBaA,IAAAA,CAAAA,CAAgBC,CAA+B,EAAA,CACtDC,IAAAA,CAAAA,CAAyB,KACNC,CAAAA,EACjB,KAAA,CAAC,aAAAC,CAAAA,CAAa,EAAGC,CAAiB,GAyCxC,OAAO,CACL,KAxCY,CAAA,IAAM,CAClB,IAAMC,CAAAA,CAAOF,CACZ,CAAA,UAAA,CAAWH,CAAM,CAAA,SAAS,EAC1B,QAASA,CAAAA,CAAAA,CAAM,SAAS,CAAA,EACzB,MAGA,CAAA,GAFAC,EAASI,CAAQ,EAAA,eAAA,CAAgBL,CAAM,CAAA,QAAQ,CAE3C,CAAA,CAACC,EAAQ,CACX,OAAA,CAAQ,KACN,CAAA,CAAA,mCAAA,EAAsCD,CAAM,CAAA,QAAQ,EACtD,CACA,CAAA,MACF,CACAC,CAAAA,CAAO,QAAUA,CAAAA,CAAAA,CAAO,SAAsB,KAAM,EAAA,CACpDA,CAAO,CAAA,aAAA,CAAc,IAEpBA,CAAAA,CAAAA,CAAO,SAAsB,WAAY,CAAA,IAAA,CACzCA,CAAO,CAAA,QAAA,CAAkC,OAAQ,CAAA,CAAA,CACjDA,EAAO,QAAkC,CAAA,WAAA,CAAY,IACtD,CAAA,IAAMK,CAAc,CAAA,CAAC,MAAM,QAAQ,CAAA,CAEnCD,CAAQ,EAAA,QAAA,CAAUE,CAAQ,EAAA,CACpBD,EAAc,QAASC,CAAAA,CAAAA,CAAM,IAAI,CAAA,GACnCA,CAAM,CAAA,UAAA,CAAW,MAErB,CAAC,CAAA,CAEDC,GAAwB,CAAA,OAAA,CAAQ,cAAc,EAChD,EAaE,QAXa,CAAA,IAAI,EAGnB,CASE,UAPe,CAAA,IAAI,EAAC,CAQpB,OANc,CAAA,IAAM,EAOtB,CACF","file":"chunk-HRGYA7T6.js","sourcesContent":["\nimport { getGlobalContext } from \"@managers/globalContext\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { Nullable } from \"core/lifecyle\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { Material, Mesh, MeshStandardMaterial, PlaneGeometry } from \"three\";\n\nexport interface GroundProps {\n  groundId: string;\n  storageId:string\n}\n\nexport interface Ground {\n  mount: () => void;\n  actiavte:()=>void;\n  deactivate:()=>void;\n  unmount: () => void;\n}\n\nexport const createGround = (props: GroundProps): Ground => {\n  let ground: Nullable<Mesh> = null;\n  const contextManager = getThreeJsContext();\n  const {globalStorage} =getGlobalContext();\n\n  const mount = () => {\n    const groups=globalStorage\n    .getStorage(props.storageId)\n    .retrieve(props.storageId)?.\n    groups;\n    ground = groups?.getObjectByName(props.groundId) as Mesh;\n\n    if (!ground) {\n      console.error(\n        `Cant get ground mesh from the id : ${props.groundId}`\n      );\n      return;\n    } \n    ground.material=(ground.material as Material).clone();\n    ground.receiveShadow=true;\n    \n    (ground.material as Material).needsUpdate=true;\n    (ground.material as MeshStandardMaterial).opacity=1;\n    (ground.material as MeshStandardMaterial).transparent=true;\n    const excludeShadow=[\"sky\",\"ground\"];\n\n    groups?.traverse((child)=>{\n      if(!excludeShadow.includes(child.name)){\n        child.castShadow=true;\n      }\n    })\n    \n    processPipelineDebugger.onMount('about-ground')\n  };\n\n  const activate=()=>{\n    \n    \n  }\n\n  const deactivate=()=>{}\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    actiavte:activate,\n    deactivate:deactivate,\n    unmount: unmount,\n  };\n};\n"]}