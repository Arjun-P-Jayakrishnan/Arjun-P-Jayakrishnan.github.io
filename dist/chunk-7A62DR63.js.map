{"version":3,"sources":["../src/core/loader/file_type_plugins/fbx_loader.ts"],"names":["createFBXLoader","props","assets","scene","loadingManager","loadingEventBus","globalStorage","getGlobalContext","fbxLoader","FBXLoader","_loadMesh","metaData","model","err","promises","asset"],"mappings":"oGAiBO,IAAMA,CAAmBC,CAAAA,CAAAA,EAAwC,CACtE,GAAM,CAAE,MAAA,CAAAC,CAAQ,CAAA,KAAA,CAAAC,CAAO,CAAA,cAAA,CAAAC,CAAgB,CAAA,eAAA,CAAAC,CAAgB,CAAA,CAAIJ,CACrD,CAAA,CAAE,aAAAK,CAAAA,CAAc,CAAIC,CAAAA,CAAAA,EAEpBC,CAAAA,CAAAA,CAAuB,IAAIC,SAAAA,CAAUL,CAAc,CAAA,CAOnDM,CAAY,CAAA,MAAOC,CAA4B,EAAA,CACnD,GAAI,CACF,IAAMC,CAAAA,CAAQ,MAAMJ,CAAAA,CAAU,SAAUG,CAAAA,CAAAA,CAAS,IAAI,CAAA,CAIrDA,CAAS,CAAA,SAAA,IAETL,CAAAA,CAAAA,CAAc,UAAWK,CAAAA,CAAAA,CAAS,IAAI,CAAA,CAAE,KACtCA,CAAAA,CAAAA,CAAS,IACT,CAAA,CACI,UAAYC,CAAAA,CAAAA,CAAM,UAClB,CAAA,MAAA,CAAOA,CACP,CAAA,IAAA,CAAM,EACV,CACF,CAGAT,CAAAA,CAAAA,CAAM,GAAIS,CAAAA,CAAK,EAEjB,CAAA,MAASC,CAAK,CAAA,CACZ,MAAAF,CAAAA,CAAS,OAAUE,GAAAA,CAAY,CAC/BR,CAAAA,CAAAA,CAAgB,IAAK,CAAA,CAAE,IAAM,CAAA,YAAA,CAAc,GAAKM,CAAAA,CAAAA,CAAS,IAAK,CAAC,CAC/D,CAAA,OAAA,CAAQ,KAAME,CAAAA,CAAG,CACXA,CAAAA,CACR,CACF,CAAA,CAaA,OAAO,CACL,IAZW,CAAA,SAAY,CACvB,IAAMC,CAA4B,CAAA,EAClCZ,CAAAA,CAAAA,CAAO,OAASa,CAAAA,CAAAA,EAAU,CACxBD,CAAAA,CAAS,IAAKJ,CAAAA,CAAAA,CAAUK,CAAK,CAAC,EAChC,CAAC,CAED,CAAA,MAAM,OAAQ,CAAA,UAAA,CAAWD,CAAQ,EACnC,CAME,CAAA,OAAA,CAJc,IAAM,EAKtB,CACF","file":"chunk-7A62DR63.js","sourcesContent":["\nimport { getGlobalContext } from \"managers/globalContext\";\nimport { AnimationMixer, Scene } from \"three\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader.js\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\nimport type { LoadingManager } from \"three/src/loaders/LoadingManager.js\";\nimport type { AssetMetaData, LoaderPlugin } from \"../loaderPlugins\";\nimport { createEventBus } from \"@managers/events/eventBus\";\nimport { LoadingEvents } from \"@managers/events/eventType\";\n\nexport interface FBXLoaderProps {\n  assets: AssetMetaData[];\n  scene: Scene;\n  loadingManager: LoadingManager;\n  loadingEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n}\n\nexport const createFBXLoader = (props: FBXLoaderProps): LoaderPlugin => {\n  const { assets, scene, loadingManager, loadingEventBus } = props;\n  const { globalStorage } = getGlobalContext();\n\n  const fbxLoader: FBXLoader = new FBXLoader(loadingManager);\n  \n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: AssetMetaData) => {\n    try {\n      const model = await fbxLoader.loadAsync(metaData.path);\n\n      \n      \n      metaData.onSuccess?.();\n\n      globalStorage.getStorage(metaData.name).store(\n        metaData.name, \n        {\n            animations: model.animations,\n            groups:model,\n            type: \"\",\n        }\n      );\n     \n\n      scene.add(model);\n\n    } catch (err) {\n      metaData.onError?.(err as Error);\n      loadingEventBus.emit({ type: \"load:error\", url: metaData.path });\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const load = async () => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  const dispose = () => {};\n\n  return {\n    load: load,\n    dispose: dispose,\n  };\n};\n"]}