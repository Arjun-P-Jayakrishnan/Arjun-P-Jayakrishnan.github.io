{"version":3,"sources":["../src/gameplay/about/lights.ts"],"names":["createLighting","ctx","getThreeJsContext","scene","renderer","dirLight","ambientLight","DirectionalLight","AmbientLight","PCFShadowMap"],"mappings":"mGAoBaA,IAAAA,CAAAA,CAAiB,IAAgB,CAC5C,IAAMC,CAA6BC,CAAAA,CAAAA,GAC7B,CAAE,KAAA,CAAAC,GAAO,CAAA,QAAA,CAAAC,CAAS,CAAA,CAAI,CAC1B,KAAA,CAAOH,EAAI,GAAI,CAAA,OAAO,CACtB,CAAA,QAAA,CAAUA,EAAI,GAAI,CAAA,UAAU,CAC9B,CAAA,CAEII,EACAC,CAmCJ,CAAA,OAAO,CACL,KAAA,CAlCY,IAAM,CAClBD,CAAW,CAAA,IAAIE,iBAAiB,QAAU,CAAA,CAAC,CAC3CF,CAAAA,CAAAA,CAAS,WAAa,IACtBA,CAAAA,CAAAA,CAAS,QAAS,CAAA,GAAA,CAAI,EAAG,CAAG,CAAA,CAAC,CAC7BA,CAAAA,CAAAA,CAAS,OAAO,QAAS,CAAA,GAAA,CAAI,CAAG,CAAA,CAAA,CAAG,CAAC,CAEpCA,CAAAA,CAAAA,CAAS,MAAO,CAAA,OAAA,CAAQ,MAAQ,IAChCA,CAAAA,CAAAA,CAAS,MAAO,CAAA,OAAA,CAAQ,OAAS,IACjCA,CAAAA,CAAAA,CAAS,MAAO,CAAA,MAAA,CAAO,IAAO,CAAA,EAAA,CAC9BA,CAAS,CAAA,MAAA,CAAO,OAAO,GAAM,CAAA,EAAA,CAC7BA,CAAS,CAAA,MAAA,CAAO,OAAO,IAAO,CAAA,GAAA,CAC9BA,CAAS,CAAA,MAAA,CAAO,OAAO,KAAQ,CAAA,EAAA,CAC/BA,CAAS,CAAA,MAAA,CAAO,MAAO,CAAA,GAAA,CAAM,EAC7BA,CAAAA,CAAAA,CAAS,OAAO,MAAO,CAAA,MAAA,CAAS,GAEhCC,CAAAA,CAAAA,CAAe,IAAIE,YAAa,CAAA,QAAQ,CAExCJ,CAAAA,CAAAA,CAAS,UAAU,OAAU,CAAA,IAAA,CAC7BA,CAAS,CAAA,SAAA,CAAU,IAAOK,CAAAA,aAC5B,CAgBE,CAAA,QAAA,CAde,IAAM,CACjBJ,CAAAA,EAAUF,GAAM,CAAA,GAAA,CAAIE,CAAQ,CAC5BC,CAAAA,CAAAA,EAAcH,GAAM,CAAA,GAAA,CAAIG,CAAY,EAC1C,CAAA,CAYE,UAViB,CAAA,IAAM,CACnBD,CAAUF,EAAAA,GAAAA,CAAM,MAAOE,CAAAA,CAAQ,EAC/BC,CAAcH,EAAAA,GAAAA,CAAM,MAAOG,CAAAA,CAAY,EAC7C,CAQE,CAAA,OAAA,CANc,IAAM,EAOtB,CACF","file":"chunk-MYLHHMOV.js","sourcesContent":["import { Nullable } from \"@utils/types/lifecycle\";\nimport {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"core/game_engine/game_context\";\nimport {\n  AmbientLight,\n  CameraHelper,\n  DirectionalLight,\n  DirectionalLightHelper,\n  PCFShadowMap,\n} from \"three\";\n\nexport interface Lighting {\n  mount: () => void;\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\nexport const createLighting = (): Lighting => {\n  const ctx: ThreeJsContextManager = getThreeJsContext();\n  const { scene, renderer } = {\n    scene: ctx.get(\"scene\"),\n    renderer: ctx.get(\"renderer\"),\n  };\n\n  let dirLight: Nullable<DirectionalLight>;\n  let ambientLight: Nullable<AmbientLight>;\n\n  const mount = () => {\n    dirLight = new DirectionalLight(0xffffff, 5);\n    dirLight.castShadow = true;\n    dirLight.position.set(0, 2, 0);\n    dirLight.target.position.set(0, 1, 0);\n\n    dirLight.shadow.mapSize.width = 1024;\n    dirLight.shadow.mapSize.height = 1024;\n    dirLight.shadow.camera.near = 0.1;\n    dirLight.shadow.camera.far = 50;\n    dirLight.shadow.camera.left = -10;\n    dirLight.shadow.camera.right = 10;\n    dirLight.shadow.camera.top = 10;\n    dirLight.shadow.camera.bottom = -10;\n\n    ambientLight = new AmbientLight(0xffffff);\n\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = PCFShadowMap;\n  };\n\n  const activate = () => {\n    if (dirLight) scene.add(dirLight);\n    if (ambientLight) scene.add(ambientLight);\n  };\n\n  const deactivate = () => {\n    if (dirLight) scene.remove(dirLight);\n    if (ambientLight) scene.remove(ambientLight);\n  };\n\n  const unmount = () => {};\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    unmount: unmount,\n  };\n};\n"]}