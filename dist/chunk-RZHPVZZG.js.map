{"version":3,"sources":["../src/engine/core/LifecycleScheduler.ts"],"names":["createLifecycleScheduler","queue","tasks","task","loop","start","result","resolved"],"mappings":"4BAgBMA,IAAAA,CAAAA,CAA2B,IAA0B,CACzD,IAAMC,EAAgB,EAAC,CAsCvB,OAAO,CACL,QAAA,CArCe,IAAIC,CAAkB,GAAA,CACrCA,EAAM,OAASC,CAAAA,CAAAA,EAAS,CACtBF,CAAM,CAAA,IAAA,CAAKE,CAAI,EACjB,CAAC,EACH,EAkCE,GAhCU,CAAA,IAAM,CAChB,IAAMC,CAAAA,CAAO,SAAY,CACvB,IAAMC,CAAQ,CAAA,WAAA,CAAY,GAAI,EAAA,CAE9B,KACEJ,CAAM,CAAA,MAAA,CAAS,GACf,WAAY,CAAA,GAAA,GAAQI,CAAQ,CAAA,EAAA,EAC5B,CACA,IAAMF,CAAOF,CAAAA,CAAAA,CAAM,OACnB,CAAA,GAAI,CAACE,CAAM,CAAA,SAEX,IAAMG,CAASH,CAAAA,CAAAA,GAEf,GAAIG,CAAAA,YAAkB,QAAS,CAC7B,IAAMC,EAAW,MAAMD,CAAAA,CACnB,MAAM,OAAQC,CAAAA,CAAQ,CACxBN,EAAAA,CAAAA,CAAM,OAAQ,CAAA,GAAGM,CAAQ,EAE7B,CAAA,KAAW,MAAM,OAAQD,CAAAA,CAAM,GAC7BL,CAAM,CAAA,OAAA,CAAQ,GAAGK,CAAM,EAE3B,CAEA,sBAAsB,IAAM,CAC1BF,IACF,CAAC,EACH,CACAA,CAAAA,CAAAA,GACF,CAKA,CACF","file":"chunk-RZHPVZZG.js","sourcesContent":["import { MAX_FRAME_BUCKET_TIME } from \"config/constants\";\nimport { Task } from \"types/lifecycle.types\";\n\ninterface LifecycleScheduler {\n  schedule: (...tasks: Task[]) => void;\n  run: () => void;\n}\n\n//TODO: [FEATURE] DAG scheduler for dependency management\n//TODO: [FEATURE] frame bucket\n//TODO: [FEATURE] async tasks\n//TODO: [FEATURE] idle time scheduling\n//TODO: [FEATURE] batch update\n//TODO: [FEATURE] micro task and macro task separation before and after\n//TODO: [ISSUE]   maybe issue of incorrect ordering due to async tasks\n\nconst createLifecycleScheduler = (): LifecycleScheduler => {\n  const queue: Task[] = [];\n\n  const schedule = (...tasks: Task[]) => {\n    tasks.forEach((task) => {\n      queue.push(task);\n    });\n  };\n\n  const run = () => {\n    const loop = async () => {\n      const start = performance.now();\n\n      while (\n        queue.length > 0 &&\n        performance.now() - start < MAX_FRAME_BUCKET_TIME\n      ) {\n        const task = queue.shift();\n        if (!task) continue;\n\n        const result = task();\n\n        if (result instanceof Promise) {\n          const resolved = await result;\n          if (Array.isArray(resolved)) {\n            queue.unshift(...resolved);\n          }\n        } else if (Array.isArray(result)) {\n          queue.unshift(...result);\n        }\n      }\n\n      requestAnimationFrame(() => {\n        loop();\n      });\n    };\n    loop();\n  };\n\n  return {\n    schedule: schedule,\n    run: run,\n  };\n};\n\nexport { createLifecycleScheduler };\nexport type { LifecycleScheduler };\n"]}