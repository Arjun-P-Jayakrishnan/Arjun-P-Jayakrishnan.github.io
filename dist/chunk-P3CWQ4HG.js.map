{"version":3,"sources":["../src/engine/managers/storage/StorageManager.ts"],"names":["createGlobalStorageManager","storage","keys","createStorageForType","key","createStorageUnit","unit"],"mappings":"oCASO,IAAMA,EAA6B,IAA4B,CACpE,IAAIC,CAAAA,CAEC,EAECC,CAAAA,CAAAA,CAAqB,CAAC,OAAA,CAAS,MAAM,CAErCC,CAAAA,GAAAA,CAAwBC,CAAoB,EAAA,CAChD,OAAQA,CAAK,EACX,KAAK,OAAA,CACHH,EAAQG,CAAG,CAAA,CAAIC,CAAqD,EAAA,CACpE,MACF,KAAK,MAAA,CACHJ,CAAQG,CAAAA,CAAG,EAAIC,CAAmD,EAAA,CAClE,KACJ,CACF,CAAA,CAwBA,OAAO,CACL,OAAA,CAvBc,IAAM,CACpBH,EAAK,OAA+BE,CAAAA,CAAAA,EAAW,CAC7CD,GAAAA,CAAqBC,CAAG,EAC1B,CAAC,EACH,CAAA,CAoBE,MAlBY,IAAM,CAClB,MAAO,CAAA,MAAA,CAAOH,CAAO,CAAE,CAAA,OAAA,CAASK,CAAS,EAAA,CACvCA,EAAK,KAAM,GACb,CAAC,EACH,EAeE,UAZAF,CAAAA,CAAAA,GAEKH,CAAQG,CAAAA,CAAG,GACdD,GAAqBC,CAAAA,CAAG,EAGnBH,CAAQG,CAAAA,CAAG,EAOpB,CACF","file":"chunk-P3CWQ4HG.js","sourcesContent":["import {\n  JSONStorageUnit,\n  ObjectStorageUnit,\n  StorageKey,\n  StorageMap,\n} from \"types/storage.types\";\nimport { createStorageUnit } from \"./genericStorageUnit\";\nimport { GenericStorageUnit, GlobalStorageManager } from \"./storageTypes\";\n\nexport const createGlobalStorageManager = (): GlobalStorageManager => {\n  let storage: Partial<{\n    [K in StorageKey]: GenericStorageUnit<StorageMap[K]>;\n  }> = {};\n\n  const keys: StorageKey[] = [\"model\", \"json\"];\n\n  const createStorageForType = (key: StorageKey) => {\n    switch (key) {\n      case \"model\":\n        storage[key] = createStorageUnit<Record<string, ObjectStorageUnit>>();\n        break;\n      case \"json\":\n        storage[key] = createStorageUnit<Record<string, JSONStorageUnit>>();\n        break;\n    }\n  };\n\n  const inflate = () => {\n    keys.forEach(<K extends StorageKey>(key: K) => {\n      createStorageForType(key);\n    });\n  };\n\n  const clear = () => {\n    Object.values(storage).forEach((unit) => {\n      unit.clear();\n    });\n  };\n\n  const getStorage = <K extends StorageKey>(\n    key: K\n  ): GenericStorageUnit<StorageMap[K]> => {\n    if (!storage[key]) {\n      createStorageForType(key);\n    }\n\n    return storage[key]!;\n  };\n\n  return {\n    inflate: inflate,\n    clear: clear,\n    getStorage: getStorage,\n  };\n};\n"]}