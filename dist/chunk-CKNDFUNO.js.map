{"version":3,"sources":["../src/gameplay/about/room.ts"],"names":["createAboutRoom","props","context","getThreeJsContext","globalStorage","getGlobalContext","scene","camera","orbit","components","createCameraManager","createPlayer","createGround","createLighting","group","processPipelineDebugger","deltaTime"],"mappings":"+RA2BO,IAAMA,EAAmBC,CAAgC,EAAA,CAE9D,IAAMC,GAAiCC,CAAAA,CAAAA,GACjC,CAAE,aAAA,CAAAC,CAAc,CAAIC,CAAAA,CAAAA,GACpB,CAAE,KAAA,CAAAC,EAAO,MAAAC,CAAAA,CAAAA,CAAQ,MAAAC,CAAM,CAAA,CAAI,CAC/B,KAAON,CAAAA,GAAAA,CAAQ,IAAI,OAAO,CAAA,CAC1B,OAAQA,GAAQ,CAAA,GAAA,CAAI,QAAQ,CAC5B,CAAA,KAAA,CAAOA,IAAQ,GAAI,CAAA,OAAO,CAC5B,CAGMO,CAAAA,CAAAA,CAAyB,CAC7B,MAAQC,CAAAA,GAAAA,CAAoB,CAAE,MAAQH,CAAAA,CAAAA,CAAQ,KAAOD,CAAAA,CAAM,CAAC,CAC5D,CAAA,MAAA,CAAQK,IAAaV,CAAM,CAAA,MAAM,EACjC,MAAQW,CAAAA,GAAAA,CAAaX,EAAM,MAAM,CAAA,CACjC,SAAUY,GAAe,EAC3B,EAEIC,CAA2C,CAAA,IAAA,CA4C/C,OAAO,CACL,KAAA,CA3CY,IAAM,CAClBC,GAAAA,CAAwB,QAAQ,YAAY,CAAA,CAC5CN,EAAW,MAAO,CAAA,KAAA,GAClBA,CAAW,CAAA,MAAA,CAAO,OAClBA,CAAAA,CAAAA,CAAW,OAAO,KAAM,EAAA,CACxBA,EAAW,QAAS,CAAA,KAAA,GACpBK,CACEV,CAAAA,CAAAA,CAAc,UAAWH,CAAAA,CAAAA,CAAM,SAAS,CAAE,CAAA,QAAA,CAASA,EAAM,SAAS,CAAA,EAC9D,QAAU,KAClB,CAAA,CAmCE,UAjCe,IAAM,CACjBa,IAAOA,CAAM,CAAA,OAAA,CAAU,MAE3BC,GAAwB,CAAA,MAAA,CAAO,iBAAiB,CAChDP,CAAAA,CAAAA,CAAM,QAAU,KAChBC,CAAAA,CAAAA,CAAW,OAAO,QAAS,EAAA,CAC3BA,EAAW,MAAO,CAAA,QAAA,GAClBA,CAAW,CAAA,QAAA,CAAS,UACpBA,CAAAA,CAAAA,CAAW,OAAO,QAAS,GAC7B,EAyBE,MAvBcO,CAAAA,CAAAA,EAAsB,EAwBpC,CAAA,WAAA,CApBiB,IAAM,CACnBF,IAAOA,CAAM,CAAA,OAAA,CAAU,OAE3BL,CAAW,CAAA,MAAA,CAAO,YAClBA,CAAAA,CAAAA,CAAW,OAAO,UAAW,EAAA,CAC7BA,EAAW,QAAS,CAAA,UAAA,GACpBA,CAAW,CAAA,MAAA,CAAO,aACpB,CAAA,CAcE,QAZc,IAAM,CACpBA,EAAW,MAAO,CAAA,OAAA,GAClBA,CAAW,CAAA,MAAA,CAAO,SAClBA,CAAAA,CAAAA,CAAW,SAAS,OAAQ,EAAA,CAC5BA,EAAW,MAAO,CAAA,OAAA,GACpB,CAQE,CAAA,QAAA,CAAU,KACZ,CACF","file":"chunk-CKNDFUNO.js","sourcesContent":["import {\n  getThreeJsContext,\n  ThreeJsContextManager,\n} from \"core/game_engine/game_context\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { createPlayer, Player, PlayerProps } from \"./player\";\nimport { createGround, Ground, GroundProps } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { getGlobalContext } from \"@managers/globalContext\";\nimport { Group, Object3DEventMap } from \"three\";\nimport { Nullable } from \"@utils/types/lifecycle\";\nimport { Room } from \"@utils/types/room\";\n\nexport interface AboutRoomProps {\n  storageId: string;\n  player: PlayerProps;\n  ground: GroundProps;\n}\n\ninterface Components {\n  camera: CameraManager;\n  player: Player;\n  ground: Ground;\n  lighting: Lighting;\n}\n\nexport const createAboutRoom = (props: AboutRoomProps): Room => {\n  //====References===\n  const context: ThreeJsContextManager = getThreeJsContext();\n  const { globalStorage } = getGlobalContext();\n  const { scene, camera, orbit } = {\n    scene: context.get(\"scene\"),\n    camera: context.get(\"camera\"),\n    orbit: context.get(\"orbit\"),\n  };\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({ camera: camera, scene: scene }),\n    player: createPlayer(props.player),\n    ground: createGround(props.ground),\n    lighting: createLighting(),\n  };\n\n  let group: Nullable<Group<Object3DEventMap>> = null;\n\n  const mount = () => {\n    processPipelineDebugger.onMount(\"about-room\");\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n    group =\n      globalStorage.getStorage(props.storageId).retrieve(props.storageId)\n        ?.groups ?? null;\n  };\n\n  const activate = () => {\n    if (group) group.visible = true;\n\n    processPipelineDebugger.onInit(\"about-room-init\");\n    orbit.enabled = false;\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n  };\n\n  const update = (deltaTime: number) => {\n    // components.camera.update(deltaTime);\n  };\n\n  const deactivate = () => {\n    if (group) group.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded: false,\n  };\n};\n"]}