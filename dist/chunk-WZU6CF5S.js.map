{"version":3,"sources":["../src/gameplay/rooms/navigation/player.ts"],"names":["PLAYER_CONSTANTS","createPlayer","reference","storage","InputManager","controllers","state","Vector3","tempData","objects","mount","playerRoot","player","animations","err","updateMouse","mouse","updateKeyboard","keyboard","deltaTime","VELOCITY_DEADZONE","inputDirection","decay","FRICTION","updateControllers","Euler"],"mappings":"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","file":"chunk-WZU6CF5S.js","sourcesContent":["import { InputManager } from \"engine/managers/InputManager\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { KeyboardInput } from \"plugins/input/keyboard\";\nimport { MouseInput } from \"plugins/input/mouse\";\nimport { Euler, Object3D, Vector3 } from \"three\";\nimport { Nullable } from \"types/generic.types\";\nimport { GenericLifeCycle, ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  storage: GlobalStorageManager;\n  InputManager: InputManager;\n}\n\nexport interface Player extends GenericLifeCycle {\n  /** Update based on controller input */\n  update: (deltaTime: number) => {\n    position: Vector3;\n    rotation: Euler;\n    rotationDelta: { yaw: number; pitch: number };\n  };\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface Controllers {\n  input: {\n    mouse: Nullable<MouseInput>;\n    keyboard: Nullable<KeyboardInput>;\n  };\n}\n\ninterface ObjectReferences {\n  player: Nullable<Object3D>;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = ({\n  reference,\n  storage,\n  InputManager,\n}: PlayerProps): Player => {\n  let controllers: Controllers;\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n\n  let objects: ObjectReferences = { player: null };\n\n  const mount = () => {\n    try {\n      const playerRoot = storage\n        .getStorage(\"model\")\n        .retrieve(reference.storageId);\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${reference.storageId}`\n        );\n      }\n      const player = playerRoot?.groups;\n      const animations = playerRoot?.animations;\n\n      objects = {\n        player: player,\n      };\n\n      controllers = {\n        input: {\n          mouse: InputManager.getController(\"mouse\"),\n          keyboard: InputManager.getController(\"keyboard\"),\n        },\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (mouse: Nullable<MouseInput>) => {\n    if (!mouse || !objects.player!) return;\n\n    state.rotationApplied = mouse.getRotation();\n    objects.player.rotation.y += state.rotationApplied.yaw;\n  };\n\n  const updateKeyboard = (\n    keyboard: Nullable<KeyboardInput>,\n    deltaTime: number\n  ) => {\n    if (!keyboard || !objects.player) return;\n    const FRICTION = 5.0;\n    const VELOCITY_DEADZONE = 0.001;\n\n    const { inputDirection } = tempData;\n    inputDirection.set(0, 0, 0);\n\n    if (keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n    if (keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n    if (keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n    if (keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n    if (inputDirection.length() > 0) {\n      //normalize direction\n      inputDirection.applyQuaternion(objects.player.quaternion);\n      inputDirection.normalize();\n\n      //accelerate towards the direction\n      state.velocity.add(\n        inputDirection.multiplyScalar(\n          PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n        )\n      );\n      //ensure the velocity doesn't go over the threshold\n      state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n    } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n      const decay = Math.exp(-FRICTION * deltaTime);\n      state.velocity.multiplyScalar(decay);\n\n      if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n        state.velocity.set(0, 0, 0);\n      }\n    }\n\n    objects.player.position.add(state.velocity);\n  };\n\n  const updateControllers = (deltaTime: number) => {\n    updateMouse(controllers.input.mouse);\n    updateKeyboard(controllers.input.keyboard, deltaTime);\n  };\n\n  const update = (deltaTime: number) => {\n    updateControllers(deltaTime);\n\n    return {\n      position: objects.player?.position ?? new Vector3(0, 0, 0),\n      rotation: objects.player?.rotation ?? new Euler(0, 0, 0, \"XYZ\"),\n      rotationDelta: state.rotationApplied,\n    };\n  };\n\n  const activate = () => {\n    if (objects.player) {\n      objects.player.position.set(0, 0, 0);\n      objects.player.rotation.set(0, 0, 0);\n      console.log(\"actiavting player for navigation\", objects.player?.position);\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    try {\n      //objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}