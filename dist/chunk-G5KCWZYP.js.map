{"version":3,"sources":["../src/gameplay/GameplayManager.ts"],"names":["createGameplayManager","serviceRegistry","getServiceRegistry","eventBusManager","logger","input","clock","Clock","state","tempData","isMounted","roomController","createRoomController","bind","mount","e","updateDeltaTime","update"],"mappings":"6GAkBaA,CAAwB,CAAA,IAAuB,CACpDC,IAAAA,GAAAA,CAAkBC,CAAmB,EAAA,CAGrC,CAACC,CAAiBC,CAAAA,CAAAA,CAAQC,CAAK,CAAI,CAAA,CACvCJ,IAAgB,GAAI,CAAA,iBAAiB,CACrCA,CAAAA,GAAAA,CAAgB,IAAI,QAAQ,CAAA,CAC5BA,IAAgB,GAAI,CAAA,cAAc,CACpC,CACMK,CAAAA,CAAAA,CAAe,IAAIC,KAAAA,CAGrBC,EAAe,CAAE,SAAA,CAAW,CAAE,CAC9BC,CAAAA,CAAAA,CAAqB,CAAE,SAAW,CAAA,CAAE,CACpCC,CAAAA,CAAAA,CAAqB,MAGrBC,CAAiCC,CAAAA,GAAAA,GAE/BC,CAAO,CAAA,IAAM,CACjBV,CAAgB,CAAA,UAAA,CAAW,EACzB,CAAA,YAAA,CACAQ,EAAe,UAAW,CAAA,KAC5B,EACAR,CAAgB,CAAA,UAAA,CAAW,GACzB,YACAQ,CAAAA,CAAAA,CAAe,UAAW,CAAA,OAC5B,EAEAR,CAAgB,CAAA,UAAA,CAAW,GACzB,eACAQ,CAAAA,CAAAA,CAAe,WAAW,QAC5B,CAAA,CACAR,CAAgB,CAAA,UAAA,CAAW,GACzB,eACAQ,CAAAA,CAAAA,CAAe,WAAW,OAC5B,CAAA,CAEAR,EAAgB,UAAW,CAAA,EAAA,CACzB,WACAQ,CAAAA,CAAAA,CAAe,WAAW,UAC5B,CAAA,CACAR,EAAgB,UAAW,CAAA,EAAA,CACzB,YACAQ,CAAe,CAAA,UAAA,CAAW,OAC5B,EACF,EAEMG,CAAQ,CAAA,SAA2B,CACnCJ,CAEJ,GAAA,MAAMC,EAAe,KAAM,EAAA,CAC3BE,CAAK,EAAA,CACLH,EAAY,IAEZ,CAAA,MAAA,CAAO,iBAAiB,OAAUK,CAAAA,CAAAA,EAAM,CACtC,OAAQ,CAAA,GAAA,CAAIA,CAAC,EACf,CAAC,CACH,EAAA,CAAA,CAEMC,EAAkB,IAAY,CAClCP,EAAS,SAAYH,CAAAA,CAAAA,CAAM,QAAS,EAAA,CAEhC,CAAC,KAAMG,CAAAA,CAAAA,CAAS,SAAS,CAAKA,EAAAA,CAAAA,CAAS,YAAc,MACvDD,GAAAA,CAAAA,CAAM,SAAYC,CAAAA,CAAAA,CAAS,WAE/B,CAEMQ,CAAAA,CAAAA,CAAS,IAAM,CACnBD,CAAAA,GAEAL,CAAe,CAAA,MAAA,CAAOH,CAAM,CAAA,SAAA,EAAa,CAAC,EAC5C,CAAA,CAWA,OAAO,CACL,QAASM,CACT,CAAA,MAAA,CAAQG,EACR,SAPc,CAAA,IAAM,CAEtB,CAMA,CACF","file":"chunk-G5KCWZYP.js","sourcesContent":["import { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { Clock } from \"three\";\nimport { createRoomController, RoomController } from \"./RoomManager\";\n\nexport interface GameplayManager {\n  onMount: () => Promise<void>;\n  update: () => void;\n  onUnmount: () => void;\n}\n\ninterface State {\n  deltaTime: number;\n}\n\ninterface TempData {\n  deltaTime: number;\n}\n\nexport const createGameplayManager = (): GameplayManager => {\n  const serviceRegistry = getServiceRegistry();\n\n  //Global properties\n  const [eventBusManager, logger, input] = [\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"InputManager\"),\n  ];\n  const clock: Clock = new Clock();\n\n  //Re usable state (no re-allocation)\n  let state: State = { deltaTime: 0 };\n  let tempData: TempData = { deltaTime: 0 };\n  let isMounted: boolean = false;\n\n  //Controllers\n  let roomController: RoomController = createRoomController();\n\n  const bind = () => {\n    eventBusManager.displayBus.on(\n      \"about:show\",\n      roomController.switchRoom[\"about\"]\n    );\n    eventBusManager.displayBus.on(\n      \"about:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"projects:show\",\n      roomController.switchRoom[\"projects\"]\n    );\n    eventBusManager.displayBus.on(\n      \"projects:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n\n    eventBusManager.displayBus.on(\n      \"home:show\",\n      roomController.switchRoom[\"navigation\"]\n    );\n    eventBusManager.displayBus.on(\n      \"home:hide\",\n      roomController.switchRoom[\"default\"]\n    );\n  };\n\n  const mount = async (): Promise<void> => {\n    if (isMounted) return;\n\n    await roomController.mount();\n    bind();\n    isMounted = true;\n\n    window.addEventListener(\"keyup\", (e) => {\n      console.log(e);\n    });\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime) && tempData.deltaTime !== undefined) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n\n    roomController.update(state.deltaTime ?? 0);\n  };\n\n  const unbind = () => {\n    // eventBusManager.displayBus.off(\"about:show\", rooms.navigation.setActive);\n    // eventBusManager.displayBus.off(\"about:hide\", rooms.navigation.setDeactive);\n  };\n\n  const unmount = () => {\n    unbind();\n  };\n\n  return {\n    onMount: mount,\n    update: update,\n    onUnmount: unmount,\n  };\n};\n"]}