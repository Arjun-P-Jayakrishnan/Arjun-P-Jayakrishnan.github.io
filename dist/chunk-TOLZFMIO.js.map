{"version":3,"sources":["../src/graphics/gameplay/player.ts"],"sourcesContent":["import { getGlobalContext } from \"@utils/globalContext\";\nimport { AnimationMixer, Object3D, Scene, Vector3 } from \"three\";\nimport {\n  createKeyboardController,\n  KeyboardController,\n} from \"./controllers/keyboard\";\n\nexport interface PlayerProps {\n  ids: {\n    rootMesh: string;\n  };\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  create: () => void;\n  update: (deltaTime: number) => void;\n  destroy: () => void;\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: number;\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Inputs {\n  keyboard: KeyboardController;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\nexport const createPlayer = (\n  props: PlayerProps,\n  context: PlayerContext\n): Player => {\n  const { scene } = context;\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: 0,\n  };\n  let objects: ObjectReferences;\n  let inputs: Inputs = {\n    keyboard: createKeyboardController(),\n  };\n  let animations: Animation;\n\n  const create = () => {\n    try {\n      let playerRoot = scene.getObjectByName(props.ids.rootMesh);\n\n      // const playerRoot=scene.getObjectByName(props.ids.rootMesh) as Object3D;\n\n      if (!playerRoot) {\n        throw new Error(\n          `player doesn't exist for the id ${props.ids.rootMesh}`\n        );\n      }\n\n      inputs.keyboard.mount();\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = () => {\n    state.direction.applyQuaternion(objects.playerRoot.quaternion);\n    state.direction.normalize();\n  };\n\n  const updateKeyboard = (deltaTime: number) => {\n    if (inputs.keyboard.isKeyPressed(\"w\")) {\n      // if (state.velocity.z > -PLAYER_CONSTANTS.MAX_VELOCITY) {\n      //   state.velocity.z -= PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime;\n      // }\n\n      state.velocity = PLAYER_CONSTANTS.MAX_VELOCITY;\n\n      objects.playerRoot.position.z += state.velocity;\n    }\n\n    if (inputs.keyboard.isKeyPressed(\"s\")) {\n      // if (state.velocity.z < PLAYER_CONSTANTS.MAX_VELOCITY) {\n      //   state.velocity.z += PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime;\n      // }\n\n      state.velocity = PLAYER_CONSTANTS.MAX_VELOCITY;\n\n      objects.playerRoot.position.z -= state.velocity;\n    }\n  };\n\n  const updateControllers = (deltaTime: number) => {\n    updateMouse();\n    updateKeyboard(deltaTime);\n  };\n\n  const updateAnimation = (deltaTime: number) => {\n    animations.mixer!.update(deltaTime);\n  };\n\n  const update = (deltaTime: number) => {\n    if (animations.mixer) {\n      updateAnimation(deltaTime);\n    }\n\n    updateControllers(deltaTime);\n  };\n\n  const destroy = () => {\n    try {\n      objects.playerRoot.clear();\n      inputs.keyboard.unmount();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    create: create,\n    update: update,\n    destroy: destroy,\n  };\n};\n"],"mappings":";;;;;;;;AACA,SAAS,gBAAiC,eAAe;AAuCzD,IAAM,mBAAmB;AAAA,EACvB,uBAAuB;AAAA,EACvB,cAAc;AAChB;AAEO,IAAM,eAAe,CAC1B,OACA,YACW;AACX,QAAM,EAAE,MAAM,IAAI;AAClB,QAAM,EAAE,iBAAiB,aAAa,cAAc,IAAI,iBAAiB;AAEzE,MAAI,QAAqB;AAAA,IACvB,WAAW,IAAI,QAAQ,GAAG,GAAG,EAAE;AAAA,IAC/B,UAAU;AAAA,EACZ;AACA,MAAI;AACJ,MAAI,SAAiB;AAAA,IACnB,UAAU,yBAAyB;AAAA,EACrC;AACA,MAAI;AAEJ,QAAM,SAAS,MAAM;AACnB,QAAI;AACF,UAAI,aAAa,MAAM,gBAAgB,MAAM,IAAI,QAAQ;AAIzD,UAAI,CAAC,YAAY;AACf,cAAM,IAAI;AAAA,UACR,mCAAmC,MAAM,IAAI,QAAQ;AAAA,QACvD;AAAA,MACF;AAEA,aAAO,SAAS,MAAM;AAGtB,gBAAU;AAAA,QACR;AAAA,MACF;AAEA,mBAAa;AAAA,QACX,OAAO,IAAI,eAAe,UAAU;AAAA,MACtC;AAAA,IACF,SAAS,KAAK;AACZ,cAAQ,MAAM,iCAAiC,GAAG,EAAE;AAAA,IACtD;AAAA,EACF;AAEA,QAAM,cAAc,MAAM;AACxB,UAAM,UAAU,gBAAgB,QAAQ,WAAW,UAAU;AAC7D,UAAM,UAAU,UAAU;AAAA,EAC5B;AAEA,QAAM,iBAAiB,CAAC,cAAsB;AAC5C,QAAI,OAAO,SAAS,aAAa,GAAG,GAAG;AAKrC,YAAM,WAAW,iBAAiB;AAElC,cAAQ,WAAW,SAAS,KAAK,MAAM;AAAA,IACzC;AAEA,QAAI,OAAO,SAAS,aAAa,GAAG,GAAG;AAKrC,YAAM,WAAW,iBAAiB;AAElC,cAAQ,WAAW,SAAS,KAAK,MAAM;AAAA,IACzC;AAAA,EACF;AAEA,QAAM,oBAAoB,CAAC,cAAsB;AAC/C,gBAAY;AACZ,mBAAe,SAAS;AAAA,EAC1B;AAEA,QAAM,kBAAkB,CAAC,cAAsB;AAC7C,eAAW,MAAO,OAAO,SAAS;AAAA,EACpC;AAEA,QAAM,SAAS,CAAC,cAAsB;AACpC,QAAI,WAAW,OAAO;AACpB,sBAAgB,SAAS;AAAA,IAC3B;AAEA,sBAAkB,SAAS;AAAA,EAC7B;AAEA,QAAM,UAAU,MAAM;AACpB,QAAI;AACF,cAAQ,WAAW,MAAM;AACzB,aAAO,SAAS,QAAQ;AAAA,IAC1B,SAAS,KAAK;AACZ,cAAQ,MAAM,8BAA8B,GAAG,EAAE;AAAA,IACnD;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]}