{"version":3,"sources":["../src/engine/managers/animation/AnimationUnit.ts"],"names":["createAnimationUnit","crossfadeDuration","actions","mixer","currentAnimation","currentAction","_mixer","animationName","blendDuration","nextAction","deltaTime"],"mappings":"AAyBA,IAAMA,EAAsB,CAAmB,CAC7C,iBAAAC,CAAAA,CAAAA,CACA,QAAAC,CACF,CAAA,GAGwB,CACtB,IAAIC,EACAC,CAAqC,CAAA,IAAA,CAErCC,EAA2C,KAsC/C,OAAO,CACL,OAAA,CArCeC,GAA2B,CAC1CH,CAAAA,CAAQG,EACV,CAAA,CAoCE,oBAZ0B,IACnBF,CAAAA,CAYP,IAnCW,CAAA,CAACG,EAAkBC,CAAgB,CAAA,CAAA,GAAM,CACpD,GAAIJ,CAAAA,GAAqBG,EAAe,OAExC,IAAME,CAAaP,CAAAA,CAAAA,CAAQK,CAAa,CACnCE,CAAAA,CAAAA,GACLA,CAAW,CAAA,KAAA,GACXA,CAAW,CAAA,IAAA,EAGRJ,CAAAA,CAAAA,EAAkC,YACjCI,CACAR,CAAAA,CAAAA,CACA,KACF,CAGFI,CAAAA,CAAAA,CAAgBI,EAChBL,CAAmBG,CAAAA,CAAAA,EACrB,CAkBE,CAAA,IAAA,CAhBW,IAAM,EAAC,CAiBlB,MAXcG,CAAAA,CAAAA,EAAsB,CAChCA,CAAc,GAAA,MAAA,EAAWP,CAAM,CAAA,MAAA,CAAOO,CAAS,EACrD,CAAA,CAUE,UARgB,IAAM,EASxB,CACF","file":"chunk-DGJNIPXI.js","sourcesContent":["import { AnimationAction, AnimationMixer } from \"three\";\nimport { Nullable } from \"types/generic.types\";\n\ninterface AnimationUnit<T extends string> {\n  /**Initialize animation mixer for the model */\n  onMount: (mixer: AnimationMixer) => void;\n\n  /** if the fsm state chnage s to a new state it will enable crossfade to the new animation*/\n  play: (animationName: T, blendDuration?: number) => void;\n\n  /**stops all related animation*/\n  stop: () => void;\n\n  /**gets current animation */\n  getCurrentAnimation: () => string | null;\n\n  /** update animation mixers to show animations */\n  update: (deltaTime: number) => void;\n\n  /**clean up for unmount */\n  onUnmount: () => void;\n}\n\ntype AnimationFSM = {};\n\nconst createAnimationUnit = <T extends string>({\n  crossfadeDuration,\n  actions,\n}: {\n  crossfadeDuration: number;\n  actions: Record<T, AnimationAction>;\n}): AnimationUnit<T> => {\n  let mixer: AnimationMixer;\n  let currentAnimation: Nullable<string> = null;\n  let blendTime: number = 0;\n  let currentAction: Nullable<AnimationAction> = null;\n\n  const onMount = (_mixer: AnimationMixer) => {\n    mixer = _mixer;\n  };\n\n  const play = (animationName: T, blendDuration = 0) => {\n    if (currentAnimation === animationName) return;\n\n    const nextAction = actions[animationName];\n    if (!nextAction) return;\n    nextAction.reset();\n    nextAction.play();\n\n    if (currentAction != null) {\n      (currentAction as AnimationAction).crossFadeTo(\n        nextAction,\n        crossfadeDuration,\n        false\n      );\n    }\n\n    currentAction = nextAction;\n    currentAnimation = animationName;\n  };\n\n  const stop = () => {};\n\n  const getCurrentAnimation = () => {\n    return currentAnimation;\n  };\n\n  const update = (deltaTime: number) => {\n    if (deltaTime !== undefined) mixer.update(deltaTime);\n  };\n\n  const onUnmount = () => {};\n\n  return {\n    onMount,\n    getCurrentAnimation,\n    play,\n    stop,\n    update,\n    onUnmount,\n  };\n};\n\nexport { createAnimationUnit };\n\nexport type { AnimationUnit };\n"]}