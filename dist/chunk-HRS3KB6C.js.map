{"version":3,"sources":["../src/gameplay/about/player.ts"],"names":["createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","contextManager","getThreeJsContext","state","Vector3","objects","animations","castShadow","player","child","processPipelineDebugger","playerRoot","AnimationMixer","err"],"mappings":"kKAgDaA,CAAgBC,CAAAA,CAAAA,EAA+B,CAC1D,IAAM,CAAE,eAAAC,CAAAA,CAAAA,CAAiB,YAAAC,CAAa,CAAA,aAAA,CAAAC,CAAc,CAAIC,CAAAA,CAAAA,EAClDC,CAAAA,CAAAA,CAAiBC,GAEnBC,EACqB,CAAE,cAAgB,CAAA,IAAIC,OAAQ,CAAA,CAAA,CAAG,EAAG,CAAC,CAAE,OAG5DC,CAAAA,CACAC,EAEEC,CAAcC,CAAAA,CAAAA,EAAuC,CACzDA,CAAAA,CAAO,SAAUC,CAAU,EAAA,CACzBA,EAAM,UAAa,CAAA,KACrB,CAAC,EACH,EA8CA,OAAO,CACL,MA7CY,IAAM,CAClB,GAAI,CACFC,GAAAA,CAAwB,QAAQ,mBAAmB,CAAA,CACnD,IAAIC,CAAAA,CAAaV,EACd,GAAI,CAAA,OAAO,EACX,eAAgBL,CAAAA,CAAAA,CAAM,UAAU,CAEnC,CAAA,GAAI,CAACe,CAAAA,CACH,MAAM,IAAI,KAAA,CAAM,mCAAmCf,CAAM,CAAA,UAAU,EAAE,CAEvE,CAAA,OAAA,CAAQ,GAAIe,CAAAA,CAAAA,CAAW,QAAQ,CAG/BN,CAAAA,CAAAA,CAAU,CACR,UAAYM,CAAAA,CACd,EAEAL,CAAa,CAAA,CACX,KAAO,CAAA,IAAIM,eAAeD,CAAU,CACtC,EACF,CAASE,MAAAA,CAAAA,CAAK,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAiCA,8BAAAA,EAAAA,CAAG,EAAE,EACtD,CACF,EAuBE,QArBe,CAAA,IAAM,CACjBR,CAAQ,CAAA,UAAA,GACVA,CAAQ,CAAA,UAAA,CAAW,SAAS,GAAI,CAAA,CAAA,CAAG,CAAC,IAAK,CAAA,EAAA,CAAK,EAAG,CAAG,CAAA,KAAK,CACzDA,CAAAA,CAAAA,CAAQ,WAAW,UAAa,CAAA,IAAA,CAChCE,EAAWF,CAAQ,CAAA,UAAU,EAC7B,OAAQ,CAAA,GAAA,CAAIA,CAAQ,CAAA,UAAA,CAAW,QAAQ,CAEvCA,CAAAA,CAAAA,CAAQ,WAAW,QAAS,CAAA,GAAA,CAAI,IAAK,CAAG,CAAA,CAAC,CAE7C,EAAA,CAAA,CAaE,WAXiB,IAAM,GAYvB,OAVc,CAAA,IAAM,CAChBA,CAAQ,CAAA,UAAA,EACVA,CAAQ,CAAA,UAAA,CAAW,SAAS,GAAI,CAAA,GAAA,CAAK,EAAG,CAAC,EAE7C,CAOA,CACF","file":"chunk-HRS3KB6C.js","sourcesContent":["import { getGlobalContext } from \"@managers/globalContext\";\nimport { Nullable } from \"@utils/types/lifecycle\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { MouseController } from \"graphics/mechanics/controllers/plugins/mouse\";\nimport {\n  AnimationMixer,\n  Euler,\n  Object3D,\n  Object3DEventMap,\n  Scene,\n  Vector3,\n} from \"three\";\n\nexport interface PlayerProps {\n  rootMeshId: string;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n\n  let state: PlayerState = {};\n  let tempData: TempData = { inputDirection: new Vector3(0, 0, 0) };\n  let inputs: Nullable<MouseController>;\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      processPipelineDebugger.onMount(\"about-room-player\");\n      let playerRoot = contextManager\n        .get(\"scene\")\n        .getObjectByName(props.rootMeshId);\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${props.rootMeshId}`);\n      }\n      console.log(playerRoot.position);\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      animations = {\n        mixer: new AnimationMixer(playerRoot),\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, -Math.PI / 4, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n      console.log(objects.playerRoot.position);\n\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n"]}