{"version":3,"sources":["../src/gameplay/navigation/room.ts"],"names":["createNavigationRoom","props","globalStorage","getGlobalContext","contextManager","getThreeJsContext","components","createCameraManager","createPlayer","createGround","getControllers","state","room","isMounted","processPipelineDebugger","deltaTime"],"mappings":"+RA8BaA,IAAAA,CAAAA,CAAwBC,GAAqC,CAExE,IAAM,CAAE,aAAAC,CAAAA,CAAc,EAAIC,CAAiB,EAAA,CACvCC,EAAsCC,CAAkB,EAAA,CAGxDC,EAA+B,CACjC,MAAA,CAAOC,IAAoB,CAAC,MAAA,CAAQH,CAAe,CAAA,GAAA,CAAI,QAAQ,CAAC,CAAC,CACjE,CAAA,MAAA,CAAOI,IAAa,CAAE,UAAA,CAAYP,EAAM,MAAO,CAAA,UAAW,CAAC,CAC3D,CAAA,MAAA,CAAOQ,IAAaR,CAAM,CAAA,MAAM,EAChC,WAAaS,CAAAA,GAAAA,EACf,CAGIC,CAIAC,CAAAA,CAAoC,KACpCC,GAAkB,CAAA,MA0DtB,OAAO,CACL,KAAA,CAvCY,IAAM,CACfA,GAAAA,EAAa,CAACP,CAEjBQ,GAAAA,GAAAA,CAAwB,QAAQ,iBAAiB,CAAA,CAEjDV,EAAiBC,CAAkB,EAAA,CAGnCO,EAAOV,CAAc,CAAA,UAAA,CAAWD,CAAM,CAAA,SAAS,CAAE,CAAA,QAAA,CAASA,EAAM,SAAS,CAAA,EAAK,KAE9EK,CAAW,CAAA,WAAA,CAAY,MAAM,CAAE,KAAA,CAAO,CAAE,WAAA,CAAa,GAAM,CAAE,CAAC,CAC9DA,CAAAA,CAAAA,CAAW,OAAO,KAAM,EAAA,CACxBA,EAAW,MAAO,CAAA,KAAA,EAClBA,CAAAA,CAAAA,CAAW,MAAO,CAAA,KAAA,GAElBO,GAAU,CAAA,IAAA,EACZ,EAwBE,MAtBcE,CAAAA,CAAAA,EAAsB,CACjC,CAACF,GAAAA,EAAa,CAACP,CAClBF,EAAAA,CAAAA,CAAe,IAAI,OAAO,CAAA,CAAE,SAE9B,CAAA,CAmBE,QAjBc,IAAM,CACjB,CAACS,GAAAA,EAAY,CAACP,CAAAA,GAEjBQ,IAAwB,SAAU,CAAA,iBAAiB,EAEnDR,CAAW,CAAA,MAAA,CAAO,SAClBA,CAAAA,CAAAA,CAAW,YAAY,OAAQ,EAAA,CAC/BA,EAAW,MAAO,CAAA,OAAA,GAClBF,CAAe,CAAA,OAAA,GAEfE,CAAa,CAAA,IAAA,CACbM,CAAK,CAAA,IAAA,EACP,CAME,CAAA,SAAA,CA5De,IAAM,CACjB,CAACA,GAAQ,CAACN,CAAAA,GACdM,EAAK,MAAO,CAAA,OAAA,CAAU,KAEtBN,CAAW,CAAA,MAAA,CAAO,UAClBA,CAAAA,CAAAA,CAAW,OAAO,QAAS,EAAA,CAC3BA,EAAW,MAAO,CAAA,QAAA,EACpB,EAAA,CAAA,CAsDE,WApDiB,CAAA,IAAM,CACnB,CAACM,CAAAA,EAAQ,CAACN,CACdM,GAAAA,CAAAA,CAAK,OAAO,OAAU,CAAA,KAAA,CAEtBN,CAAW,CAAA,MAAA,CAAO,UAAW,EAAA,CAC7BA,EAAW,MAAO,CAAA,UAAA,GAClBA,CAAW,CAAA,MAAA,CAAO,YACpB,EAAA,CAAA,CA8CE,QAAS,CAAA,KACX,CACF","file":"chunk-K65PKKA6.js","sourcesContent":["\nimport { getGlobalContext } from \"managers/globalContext\";\nimport { createGround, Ground, GroundProps } from \"./ground\";\nimport { createPlayer, Player, PlayerProps } from \"./player\";\nimport { ControllerManger, getControllers } from \"graphics/mechanics/controllers/controller\";\nimport { ObjectStorageUnit } from \"@managers/storage/storageTypes\";\nimport { Room } from \"gameplay/controller/room_types\";\nimport { getThreeJsContext, ThreeJsContextManager } from \"core/game_engine/game_context\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { Nullable } from \"gameplay/lifecycle\";\nimport { processPipelineDebugger } from \"debug/debugger\";\n\nexport interface NavigationRoomProps {\n  storageId:string;\n  player: PlayerProps;\n  ground: GroundProps;\n}\n\n\ninterface Entities {\n  player: Player;\n  ground: Ground;\n  camera: CameraManager;\n  controllers: ControllerManger;\n}\n\ninterface InternalState {}\n\ninterface TempData {}\n\nexport const createNavigationRoom = (props: NavigationRoomProps): Room => {\n  //External dependencies\n  const { globalStorage } = getGlobalContext();\n  let contextManager: ThreeJsContextManager=getThreeJsContext();\n\n  //Internal\n  let components: Nullable<Entities>={\n    camera:createCameraManager({camera: contextManager.get(\"camera\")}),\n    player:createPlayer({ rootMeshId: props.player.rootMeshId }),\n    ground:createGround(props.ground),\n    controllers: getControllers()\n  };\n\n  //TODO:no idea on what to add yet\n  let state: Nullable<InternalState>=null; \n  //TODO: no idea what temporary data to add yet\n  let tempData: Nullable<TempData>=null; \n\n  let room: Nullable<ObjectStorageUnit> = null;\n  let isMounted:boolean=false;\n\n  const activate = () => {\n    if (!room || !components) return;\n    room.groups.visible = true;\n\n    components.camera.activate();\n    components.ground.activate();\n    components.player.activate();\n  };\n\n  const deactivate = () => {\n    if (!room || !components) return;\n    room.groups.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate()\n    components.player.deactivate();\n  }\n\n  const mount = () => {\n    if(isMounted || !components) return;\n\n    processPipelineDebugger.onMount('Navigation Room');\n\n    contextManager = getThreeJsContext();\n\n    //get base root i.e group so that it can be used to toggle visibility\n    room = globalStorage.getStorage(props.storageId).retrieve(props.storageId) ?? null;\n\n    components.controllers.mount({ mouse: { sensitivity: 0.01, } });\n    components.player.mount();\n    components.ground.mount();\n    components.camera.mount();\n\n    isMounted=true;\n  };\n\n  const update = (deltaTime: number) => {\n    if(!isMounted || !components) return;\n    contextManager.get('orbit').update();\n    //entities.ground.update();\n  };\n\n  const unmount = () => {\n    if(!isMounted|| !components) return;\n\n    processPipelineDebugger.onUnmount('Navigation Room')\n\n    components.player.unmount();\n    components.controllers.unmount();\n    components.ground.unmount();\n    contextManager.unmount();\n\n    components = null;\n    room=null;\n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n    setActive: activate,\n    setDeactive: deactivate,\n    isLoaded:false\n  };\n};\n"]}