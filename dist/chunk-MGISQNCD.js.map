{"version":3,"sources":["../src/gameplay/rooms/about/player.ts"],"names":["createPlayer","logger","reference","scene","storage","objects","animations","castShadow","player","child","mount","playerRoot","err","activate","update"],"mappings":"AAgDO,IAAMA,CAAe,CAAA,CAAC,CAC3B,MAAA,CAAAC,EACA,SAAAC,CAAAA,CAAAA,CACA,KAAAC,CAAAA,CAAAA,CACA,OAAAC,CAAAA,CACF,CAA2B,GAAA,KACrBC,CACAC,CAEEC,CAAcC,CAAAA,CAAAA,EAAuC,CACzDA,CAAAA,CAAO,QAAUC,CAAAA,CAAAA,EAAU,CACzBA,CAAM,CAAA,UAAA,CAAa,KACrB,CAAC,EACH,CAEMC,CAAAA,CAAAA,CAAQ,IAAM,CAClB,GAAI,CACFT,CAAAA,CAAO,OAAQ,CAAA,CAAE,MAAQ,CAAA,mBAAoB,CAAC,CAAA,CAC9C,IAAIU,CAAaP,CAAAA,CAAAA,CACd,UAAW,CAAA,OAAO,EAClB,QAASF,CAAAA,CAAAA,CAAU,SAAS,CAAA,EAAG,OAElC,GAAI,CAACS,CACH,CAAA,MAAM,IAAI,KAAA,CAAM,CAAmCT,gCAAAA,EAAAA,CAAAA,CAAU,EAAE,CAAE,CAAA,CAAA,CAInEG,CAAU,CAAA,CACR,WAAYM,CACd,EACF,CAASC,MAAAA,CAAAA,CAAK,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAiCA,8BAAAA,EAAAA,CAAG,CAAE,CAAA,EACtD,CACF,CAAA,CAEMC,EAAW,IAAM,CACjBR,CAAQ,CAAA,UAAA,GACVA,EAAQ,UAAW,CAAA,QAAA,CAAS,GAAI,CAAA,CAAA,CAAG,KAAK,EAAK,CAAA,EAAA,CAAK,CAAG,CAAA,KAAK,CAC1DA,CAAAA,CAAAA,CAAQ,UAAW,CAAA,UAAA,CAAa,KAChCE,CAAWF,CAAAA,CAAAA,CAAQ,UAAU,CAAA,CAE7BA,EAAQ,UAAW,CAAA,QAAA,CAAS,GAAI,CAAA,GAAA,CAAK,EAAG,EAAE,CAAA,CAC1C,OAAQ,CAAA,GAAA,CAAI,0BAA4BA,CAAAA,CAAAA,CAAQ,UAAW,CAAA,QAAQ,GAEvE,CAEMS,CAUN,OAAO,CACL,KAAOJ,CAAAA,CAAAA,CACP,SAAUG,CACV,CAAA,UAAA,CAXiB,IAAM,EAYvB,CAAA,OAAA,CAVc,IAAM,CAChBR,EAAQ,UACVA,EAAAA,CAAAA,CAAQ,UAAW,CAAA,QAAA,CAAS,IAAI,GAAK,CAAA,CAAA,CAAG,CAAC,EAE7C,CAOA,CACF","file":"chunk-MGISQNCD.js","sourcesContent":["import { Logger } from \"@utils/Logger\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport {\n  AnimationMixer,\n  Object3D,\n  Object3DEventMap,\n  Scene,\n  Vector3,\n} from \"three\";\nimport { ModelIdentifier } from \"types/rooms.types\";\n\nexport interface PlayerProps {\n  reference: ModelIdentifier;\n  logger: Logger;\n  storage: GlobalStorageManager;\n  scene: Scene;\n}\n\nexport interface PlayerContext {\n  scene: Scene;\n}\n\nexport interface Player {\n  mount: () => void;\n  activate: () => void;\n  deactiavte: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = ({\n  logger,\n  reference,\n  scene,\n  storage,\n}: PlayerProps): Player => {\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const castShadow = (player: Object3D<Object3DEventMap>) => {\n    player.traverse((child) => {\n      child.castShadow = true;\n    });\n  };\n\n  const mount = () => {\n    try {\n      logger.onMount({ origin: \"about-room-player\" });\n      let playerRoot = storage\n        .getStorage(\"model\")\n        .retrieve(reference.storageId)?.groups;\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${reference.id}`);\n      }\n\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const activate = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.rotation.set(0, Math.PI * 0.9, 0, \"XYZ\");\n      objects.playerRoot.castShadow = true;\n      castShadow(objects.playerRoot);\n\n      objects.playerRoot.position.set(1.5, 0, -1);\n      console.log(\"player actiaved position\", objects.playerRoot.position);\n    }\n  };\n\n  const update = (deltaTime: number) => {};\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    if (objects.playerRoot) {\n      objects.playerRoot.position.set(1.5, 0, 0);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactiavte: deactivate,\n    unmount: unmount,\n  };\n};\n"]}