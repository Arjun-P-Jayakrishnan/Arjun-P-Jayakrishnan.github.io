{"version":3,"sources":["../src/components/website/header.ts"],"sourcesContent":["import { EventBus } from \"@utils/event_management/eventBus\";\nimport { EventBusManager } from \"@utils/event_management/eventBusFactory\";\nimport { DisplayEvents } from \"@utils/event_management/eventType\";\n\nconst template = document.createElement(\"template\");\n\ntemplate.innerHTML = `\n  <link rel=\"stylesheet\" href=\"/style/header.css\"/>\n  <nav class=\"navbar\">\n      <div class=\"logo\">Logo</div>\n      <button class=\"toggle-btn\">&#9776</button>\n      <ul class=\"nav-links\">\n          <li><a href=\"\" id=\"home\">Home</a></li>\n          <li><a href=\"\" id=\"about\">About</a></li>\n          <li><a href=\"\" id=\"projects\">Projects</a></li>\n          <li><a href=\"\" id=\"contact\">Contact</a></li>\n      </ul>\n  </nav>\n`;\n\ninterface State {\n  hamburgerMenu: {\n    isOpen: boolean;\n    isTransitioning: boolean;\n  };\n  isProjectsShown: boolean;\n}\n\nexport class Navbar extends HTMLElement {\n  toggleBtn: Element;\n  navLinks: Element;\n\n  state: State;\n  displayEventBus: EventBus<DisplayEvents> | undefined;\n\n  constructor() {\n    super();\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    const clone = template.content.cloneNode(true);\n\n    shadowRoot.appendChild(clone);\n\n    this.toggleBtn = shadowRoot.querySelector(\".toggle-btn\")!;\n    this.navLinks = shadowRoot.querySelector(\".nav-links\")!;\n\n    this.state = {\n      hamburgerMenu: {\n        isOpen: false,\n        isTransitioning: false,\n      },\n      isProjectsShown: false,\n    };\n  }\n\n  static get observedAttributes() {\n    return [];\n  }\n\n  /**\n   *\n   * @param e event triggered\n   * @returns\n   */\n  handleTransitionEnd = (e: Event) => {\n    if ((e as TransitionEvent).propertyName !== \"transform\") return;\n\n    if (this.navLinks!.classList.contains(\"closing\")) {\n      this.navLinks!.classList.remove(\"closing\");\n    }\n\n    this.state.hamburgerMenu.isTransitioning = false;\n  };\n  /**\n   *\n   * @param navLinks reference to navigation\n   */\n  toggleOpenState = (navLinks: Element): void => {\n    if (this.state.hamburgerMenu.isTransitioning) return;\n\n    this.state.hamburgerMenu.isTransitioning = true;\n\n    if (this.state.hamburgerMenu.isOpen) {\n      navLinks.classList.remove(\"open\");\n      navLinks.classList.add(\"closing\");\n      this.state.hamburgerMenu.isOpen = false;\n    } else {\n      navLinks.classList.add(\"open\");\n      navLinks.classList.remove(\"closing\");\n      this.state.hamburgerMenu.isOpen = true;\n    }\n  };\n\n  set eventBusManager(eventBusManager: EventBusManager) {\n    this.displayEventBus = eventBusManager.displayBus;\n\n    //update its local state to true if fired externally\n    this.displayEventBus.on(\"project:show\", (data) => {\n      this.handleShowEvent(data);\n    });\n\n    //update its local state to false if fired externally\n    this.displayEventBus.on(\"project:hide\", (data) => {\n      this.handleHideEvent(data);\n    });\n  }\n\n  handleShowEvent(_: any) {\n    this.state.isProjectsShown = true;\n\n  }\n\n  handleHideEvent(_: any) {\n    this.state.isProjectsShown = false;\n \n  }\n\n  /**\n   * @description called when the component is mounted\n   */\n  connectedCallback() {\n    this.toggleBtn!.addEventListener(\"click\", () => {\n      this.toggleOpenState(this.navLinks!);\n    });\n\n    this.navLinks!.addEventListener(\"transitionend\", (e) => {\n      this.handleTransitionEnd(e);\n    });\n\n    const projectLink = this.navLinks.querySelector(\"#projects\");\n\n    projectLink?.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n\n      this.state.isProjectsShown = !this.state.isProjectsShown;\n\n      this.state.isProjectsShown\n        ? this.displayEventBus?.emit({ type: \"project:show\" })\n        : this.displayEventBus?.emit({ type: \"project:hide\" });\n    });\n  }\n\n  /**\n   * @description called when component is un mounted\n   */\n  disconnectedCallback() {\n    this.displayEventBus?.off(\"project:show\", (data) => {\n      this.handleShowEvent(data);\n    });\n    this.displayEventBus?.off(\"project:hide\", (data) => {\n      this.handleHideEvent(data);\n    });\n  }\n}\n"],"mappings":"AAIA,IAAMA,EAAW,SAAS,cAAc,UAAU,EAElDA,EAAS,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBd,IAAMC,EAAN,cAAqB,WAAY,CAOtC,aAAc,CACZ,MAAM,EA6BR,yBAAuB,GAAa,CAC7B,EAAsB,eAAiB,cAExC,KAAK,SAAU,UAAU,SAAS,SAAS,GAC7C,KAAK,SAAU,UAAU,OAAO,SAAS,EAG3C,KAAK,MAAM,cAAc,gBAAkB,GAC7C,EAKA,qBAAmBC,GAA4B,CACzC,KAAK,MAAM,cAAc,kBAE7B,KAAK,MAAM,cAAc,gBAAkB,GAEvC,KAAK,MAAM,cAAc,QAC3BA,EAAS,UAAU,OAAO,MAAM,EAChCA,EAAS,UAAU,IAAI,SAAS,EAChC,KAAK,MAAM,cAAc,OAAS,KAElCA,EAAS,UAAU,IAAI,MAAM,EAC7BA,EAAS,UAAU,OAAO,SAAS,EACnC,KAAK,MAAM,cAAc,OAAS,IAEtC,EAtDE,IAAMC,EAAa,KAAK,aAAa,CAAE,KAAM,MAAO,CAAC,EAE/CC,EAAQJ,EAAS,QAAQ,UAAU,EAAI,EAE7CG,EAAW,YAAYC,CAAK,EAE5B,KAAK,UAAYD,EAAW,cAAc,aAAa,EACvD,KAAK,SAAWA,EAAW,cAAc,YAAY,EAErD,KAAK,MAAQ,CACX,cAAe,CACb,OAAQ,GACR,gBAAiB,EACnB,EACA,gBAAiB,EACnB,CACF,CAEA,WAAW,oBAAqB,CAC9B,MAAO,CAAC,CACV,CAoCA,IAAI,gBAAgBE,EAAkC,CACpD,KAAK,gBAAkBA,EAAgB,WAGvC,KAAK,gBAAgB,GAAG,eAAiBC,GAAS,CAChD,KAAK,gBAAgBA,CAAI,CAC3B,CAAC,EAGD,KAAK,gBAAgB,GAAG,eAAiBA,GAAS,CAChD,KAAK,gBAAgBA,CAAI,CAC3B,CAAC,CACH,CAEA,gBAAgBC,EAAQ,CACtB,KAAK,MAAM,gBAAkB,EAE/B,CAEA,gBAAgBA,EAAQ,CACtB,KAAK,MAAM,gBAAkB,EAE/B,CAKA,mBAAoB,CAClB,KAAK,UAAW,iBAAiB,QAAS,IAAM,CAC9C,KAAK,gBAAgB,KAAK,QAAS,CACrC,CAAC,EAED,KAAK,SAAU,iBAAiB,gBAAkBC,GAAM,CACtD,KAAK,oBAAoBA,CAAC,CAC5B,CAAC,EAEmB,KAAK,SAAS,cAAc,WAAW,GAE9C,iBAAiB,QAAUA,GAAM,CAC5CA,EAAE,eAAe,EAEjB,KAAK,MAAM,gBAAkB,CAAC,KAAK,MAAM,gBAEzC,KAAK,MAAM,gBACP,KAAK,iBAAiB,KAAK,CAAE,KAAM,cAAe,CAAC,EACnD,KAAK,iBAAiB,KAAK,CAAE,KAAM,cAAe,CAAC,CACzD,CAAC,CACH,CAKA,sBAAuB,CACrB,KAAK,iBAAiB,IAAI,eAAiBF,GAAS,CAClD,KAAK,gBAAgBA,CAAI,CAC3B,CAAC,EACD,KAAK,iBAAiB,IAAI,eAAiBA,GAAS,CAClD,KAAK,gBAAgBA,CAAI,CAC3B,CAAC,CACH,CACF","names":["template","Navbar","navLinks","shadowRoot","clone","eventBusManager","data","_","e"]}