{"version":3,"sources":["../src/graphics/gameplay/modules/camera.ts"],"names":["CAMERA_CONSTANTS","Vector3","tempData","createCameraControls","props","camera","isThirdPerson","state","offset","targetPosition","lookTarget","radius","applyRotationDelta","yaw","pitch","playerPosition","rotation"],"mappings":"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","file":"chunk-GLOVEEDL.js","sourcesContent":["import { Euler, PerspectiveCamera, Vector3 } from \"three\";\n\nexport interface CameraProps {\n  camera: PerspectiveCamera;\n}\n\nexport interface CameraControls {\n  update: (\n    playerPosition: Vector3,\n    rotation: { yaw: number; pitch: number }\n  ) => {\n    rotation: Euler;\n  };\n}\n\ninterface State {\n  yaw: number;\n  pitch: number;\n}\n\nconst CAMERA_CONSTANTS = {\n  THIRD_PERSON: {\n    OFFSET: new Vector3(0, 5, -10),\n    DISTANCE: 10,\n    HEIGHT_OFFSET: 3,\n    PITCH: {\n      MIN: 0,\n      MAX: Math.PI / 3,\n    },\n    SMOOTHING: 0.1,\n  },\n  FIRST_PERSON: {\n    OFFSET: new Vector3(0, 0, 0),\n  },\n};\n\nlet tempData: {\n  position: Vector3;\n  offset: Vector3;\n  lookTarget: Vector3;\n} = {\n  position: new Vector3(0, 0, 0),\n  offset: new Vector3(0, 0, 0),\n  lookTarget: new Vector3(0, 0, 0),\n};\n\nexport const createCameraControls = (props: CameraProps): CameraControls => {\n  const { camera } = props;\n  let isThirdPerson: boolean = true;\n  let state: State = {\n    pitch: 0,\n    yaw: 0,\n  };\n\n  const offset = tempData.offset;\n  const targetPosition = tempData.position;\n  const lookTarget = tempData.lookTarget;\n  const radius: number = CAMERA_CONSTANTS.THIRD_PERSON.DISTANCE ?? 5;\n\n  /**\n   *\n   * @param yaw\n   * @param pitch\n   */\n  const applyRotationDelta = (yaw: number, pitch: number) => {\n    state.yaw += yaw;\n    state.pitch += pitch;\n\n    state.pitch = Math.max(\n      CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MIN,\n      Math.min(state.pitch, CAMERA_CONSTANTS.THIRD_PERSON.PITCH.MAX)\n    );\n  };\n\n  const update = (\n    playerPosition: Vector3,\n    rotation: { yaw: number; pitch: number }\n  ) => {\n    if (isThirdPerson) {\n      const { yaw, pitch } = rotation;\n\n      applyRotationDelta(yaw, pitch);\n\n      //Transform position of camera\n      offset.x = radius * Math.sin(state.yaw) * Math.cos(state.pitch);\n      offset.y =\n        radius * Math.sin(state.pitch) +\n        CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      offset.z = radius * Math.cos(state.yaw) * Math.cos(state.pitch);\n\n      //Apply target position and reach there\n      targetPosition.copy(playerPosition).add(offset);\n      camera.position.lerp(\n        tempData.position,\n        CAMERA_CONSTANTS.THIRD_PERSON.SMOOTHING\n      );\n\n      //Focus\n      lookTarget.copy(playerPosition);\n      lookTarget.y += CAMERA_CONSTANTS.THIRD_PERSON.HEIGHT_OFFSET;\n      camera.lookAt(lookTarget);\n\n      return {\n        rotation: camera.rotation,\n      };\n    } else {\n      /**TODO: FPV */\n\n      return {\n        rotation: new Euler(0, 0, 0, \"XYZ\"),\n      };\n    }\n  };\n\n  return {\n    update: update,\n  };\n};\n"]}