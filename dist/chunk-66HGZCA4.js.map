{"version":3,"sources":["../src/gameplay/RoomManager.ts"],"names":["createRoomController","serviceRegistry","getServiceRegistry","storage","logger","eventBusManager","contextManager","stateManager","animationManager","inputsManager","loader","rooms","roomAssets","NAVIGATION_ROOM_ASSETS","ABOUT_ROOM_ASSETS","PROJECTS_ROOM_ASSETS","activeRoom","activeRoomKey","initializeLoader","createLoader","err","instantiateRoom","key","createNavigationRoom","NAVIGATION_ROOM_OPTIONS","createAboutRoom","ABOUT_ROOM_OPTIONS","createProjectRoom","PROJECTS_ROOM_OPTIONS","loadRoom","room","loadItems","switchRoom","_loadPlayer","PLAYER_ASSET","mount","update","deltaTime","unmount","transitionRooms","deactivateRoom"],"mappings":"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","file":"chunk-66HGZCA4.js","sourcesContent":["import {\n  ABOUT_ROOM_ASSETS,\n  NAVIGATION_ROOM_ASSETS,\n  PLAYER_ASSET,\n  PROJECTS_ROOM_ASSETS,\n} from \"config/asset_manifest\";\nimport {\n  ABOUT_ROOM_OPTIONS,\n  NAVIGATION_ROOM_OPTIONS,\n  PROJECTS_ROOM_OPTIONS,\n} from \"config/rooms\";\nimport { createLoader, Loader } from \"engine/core/LoadingManager\";\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { createAboutRoom } from \"gameplay/rooms/about/room\";\nimport { createNavigationRoom } from \"gameplay/rooms/navigation/room\";\nimport { createProjectRoom } from \"gameplay/rooms/projects/room\";\nimport { Nullable } from \"types/generic.types\";\nimport { Room, RoomAsset } from \"types/rooms.types\";\n\nexport interface RoomController {\n  mount: () => Promise<void>;\n  switchRoom: Record<RoomKey | \"default\", () => void>;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\ntype RoomKey = \"navigation\" | \"about\" | \"projects\";\n\ntype RoomMap = {\n  [key in RoomKey]: Nullable<Room>;\n};\n\ntype RoomAssetsMap = {\n  [key in RoomKey]: RoomAsset;\n};\n\nexport const createRoomController = (): RoomController => {\n  const serviceRegistry = getServiceRegistry();\n  const [\n    storage,\n    logger,\n    eventBusManager,\n    contextManager,\n    stateManager,\n    animationManager,\n    inputsManager,\n  ] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"Logger\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n    serviceRegistry.get(\"GlobalStateManager\"),\n    serviceRegistry.get(\"AnimationManager\"),\n    serviceRegistry.get(\"InputManager\"),\n  ];\n\n  let loader: Nullable<Loader> = null;\n  let rooms: RoomMap = { navigation: null, about: null, projects: null };\n  let roomAssets: RoomAssetsMap = {\n    navigation: NAVIGATION_ROOM_ASSETS,\n    about: ABOUT_ROOM_ASSETS,\n    projects: PROJECTS_ROOM_ASSETS,\n  };\n  let activeRoom: Nullable<Room> = null;\n  let activeRoomKey: Nullable<RoomKey> = null;\n\n  const initializeLoader = (): void => {\n    try {\n      loader = createLoader({\n        storageManager: storage,\n        stateManager: stateManager,\n        loaderEventBus: eventBusManager.loadingBus,\n        renderer: contextManager.get(\"renderer\")!,\n        scene: contextManager.get(\"scene\")!,\n      });\n      loader?.configure();\n    } catch (err) {\n      throw new Error(\n        `[Gameplay] Couldnt create and initailize the loader due to ${err}`\n      );\n    }\n  };\n\n  const instantiateRoom = (key: RoomKey): Room => {\n    switch (key) {\n      case \"navigation\":\n        rooms[key] = createNavigationRoom(NAVIGATION_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"about\":\n        rooms[key] = createAboutRoom(ABOUT_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"projects\":\n        rooms[key] = createProjectRoom(PROJECTS_ROOM_OPTIONS);\n        return rooms[key]!;\n      default:\n        throw new Error(`Unknown Room key ${key}`);\n    }\n  };\n\n  const loadRoom = async (key: RoomKey) => {\n    if (!loader) return;\n\n    const assets = roomAssets[key];\n    if (!assets)\n      throw new Error(\n        \"[Room Controller] sufficient asset meta data is not given.\"\n      );\n\n    if (!rooms[key]) {\n      const room: Room = instantiateRoom(key);\n\n      console.log(\"load room\", roomAssets[key]);\n\n      const loadItems = [...roomAssets[key].meshes];\n      if (roomAssets[key].hdr) loadItems.push(roomAssets[key].hdr);\n\n      //Load only once\n      await loader.load(loadItems);\n\n      if (room) {\n        room.mount();\n        room.isLoaded = true;\n        activeRoom = room;\n      }\n    }\n  };\n\n  const switchRoom = async (key: RoomKey): Promise<void> => {\n    if (activeRoomKey === key) return;\n    eventBusManager.loadingBus.emit({\n      type: \"load:start\",\n      loaded: 0,\n      total: 0,\n      url: \"\",\n    });\n\n    if (activeRoomKey != null) {\n      if (rooms[activeRoomKey] != null) rooms[activeRoomKey]!.setDeactive();\n    }\n\n    await loadRoom(key);\n\n    if (rooms[key]) rooms[key].setActive();\n    activeRoomKey = key;\n    activeRoom = rooms[key];\n\n    eventBusManager.loadingBus.emit({ type: \"load:complete\" });\n  };\n\n  const _loadPlayer = async (): Promise<void> => {\n    await loader?.load([PLAYER_ASSET]);\n    animationManager.mount(\"Player\", storage, inputsManager);\n  };\n\n  const mount = async (): Promise<void> => {\n    logger.onMount({ origin: \"Room Controller\" });\n    initializeLoader();\n    await _loadPlayer();\n    await loadRoom(\"navigation\");\n    await switchRoom(\"navigation\");\n  };\n\n  const update = (deltaTime: number) => {\n    activeRoom?.update(deltaTime);\n    animationManager.update(deltaTime);\n  };\n\n  const unmount = (): void => {\n    loader?.dispose();\n\n    Object.values(rooms).forEach((room) => {\n      room?.unmount();\n    });\n\n    logger.onUnmount({ origin: \"room-controller\" });\n  };\n\n  const transitionRooms = (key: RoomKey) => {\n    eventBusManager.loadingBus.emit({\n      type: \"load:start\",\n      loaded: 0,\n      total: 0,\n      url: \"\",\n    });\n\n    Promise.allSettled([switchRoom(key)]).then(() => {\n      eventBusManager.loadingBus.emit({ type: \"load:complete\" });\n    });\n  };\n\n  const deactivateRoom = () => {\n    if (!activeRoomKey) return;\n\n    activeRoom?.setDeactive();\n  };\n\n  return {\n    mount: mount,\n    switchRoom: {\n      navigation: () => transitionRooms(\"navigation\"),\n      about: () => transitionRooms(\"about\"),\n      projects: () => transitionRooms(\"projects\"),\n      default: () => deactivateRoom(),\n    },\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}