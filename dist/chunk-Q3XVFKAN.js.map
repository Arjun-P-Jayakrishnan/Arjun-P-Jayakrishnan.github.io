{"version":3,"sources":["../src/gameplay/controller/room_controller.ts"],"names":["createRoomController","globalState","eventBusManager","getGlobalContext","context","getThreeJsContext","loader","rooms","roomAssets","NAVIGATION_ROOM_ASSETS","ABOUT_ROOM_ASSETS","PROJECTS_ROOM_ASSETS","activeRoom","activeRoomKey","initializeLoader","createLoader","err","instantiateRoom","key","createNavigationRoom","NAVIGATION_ROOM_OPTIONS","createAboutRoom","ABOUT_ROOM_OPTIONS","createProjectRoom","PROJECTS_ROOM_OPTIONS","loadRoom","room","switchRoom","processPipelineDebugger","mount","PLAYER_ASSET","update","deltaTime","unmount","transitionRooms","deactivateRoom"],"mappings":"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","file":"chunk-Q3XVFKAN.js","sourcesContent":["import { createLoader, Loader } from \"core/loader/loader\";\nimport { getGlobalContext } from \"@managers/globalContext\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { createAboutRoom } from \"gameplay/about/room\";\nimport {\n  ABOUT_ROOM_OPTIONS,\n  NAVIGATION_ROOM_OPTIONS,\n  PROJECTS_ROOM_OPTIONS,\n} from \"gameplay/controller/configs\";\nimport { processPipelineDebugger } from \"debug/debugger\";\nimport { createNavigationRoom } from \"gameplay/navigation/room\";\nimport { createProjectRoom } from \"gameplay/projects/room\";\nimport { Nullable } from \"@utils/types/lifecycle\";\nimport { Room, RoomAsset } from \"@utils/types/room\";\nimport {\n  ABOUT_ROOM_ASSETS,\n  NAVIGATION_ROOM_ASSETS,\n  PLAYER_ASSET,\n  PROJECTS_ROOM_ASSETS,\n} from \"@utils/configs\";\n\nexport interface RoomController {\n  mount: () => Promise<void>;\n  switchRoom: Record<RoomKey | \"default\", () => void>;\n  update: (deltaTime: number) => void;\n  unmount: () => void;\n}\n\ntype RoomKey = \"navigation\" | \"about\" | \"projects\";\n\ntype RoomMap = {\n  [key in RoomKey]: Nullable<Room>;\n};\n\ntype RoomAssetsMap = {\n  [key in RoomKey]: RoomAsset;\n};\n\nexport const createRoomController = (): RoomController => {\n  const { globalState, eventBusManager } = getGlobalContext();\n  const context = getThreeJsContext();\n\n  let loader: Nullable<Loader> = null;\n  let rooms: RoomMap = { navigation: null, about: null, projects: null };\n  let roomAssets: RoomAssetsMap = {\n    navigation: NAVIGATION_ROOM_ASSETS,\n    about: ABOUT_ROOM_ASSETS,\n    projects: PROJECTS_ROOM_ASSETS,\n  };\n  let activeRoom: Nullable<Room> = null;\n  let activeRoomKey: Nullable<RoomKey> = null;\n\n  const initializeLoader = (): void => {\n    try {\n      loader = createLoader({\n        globalState: globalState,\n        loaderEventBus: eventBusManager.loadingBus,\n        renderer: context.get(\"renderer\"),\n        scene: context.get(\"scene\"),\n      });\n      loader?.configure();\n    } catch (err) {\n      throw new Error(\n        `[Gameplay] Couldnt create and initailize the loader due to ${err}`\n      );\n    }\n  };\n\n  const instantiateRoom = (key: RoomKey): Room => {\n    switch (key) {\n      case \"navigation\":\n        rooms[key] = createNavigationRoom(NAVIGATION_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"about\":\n        rooms[key] = createAboutRoom(ABOUT_ROOM_OPTIONS);\n        return rooms[key]!;\n      case \"projects\":\n        rooms[key] = createProjectRoom(PROJECTS_ROOM_OPTIONS);\n        return rooms[key]!;\n      default:\n        throw new Error(`Unknown Room key ${key}`);\n    }\n  };\n\n  const loadRoom = async (key: RoomKey) => {\n    if (!loader) return;\n\n    const assets = roomAssets[key];\n    if (!assets)\n      throw new Error(\n        \"[Room Controller] sufficient asset meta data is not given.\"\n      );\n\n    if (!rooms[key]) {\n      const room: Room = instantiateRoom(key);\n\n      //Load only once\n      await loader.load({\n        source: {\n          modelDescriptors: roomAssets[key].meshes,\n          environmentMap: roomAssets[key].hdr,\n        },\n      });\n\n      if (room) {\n        room.mount();\n        room.isLoaded = true;\n        activeRoom = room;\n      }\n    }\n  };\n\n  const switchRoom = async (key: RoomKey): Promise<void> => {\n    if (activeRoomKey === key) return;\n\n    if (activeRoomKey != null) {\n      processPipelineDebugger.onInit(\"deactivating\");\n\n      if (rooms[activeRoomKey] != null) rooms[activeRoomKey]!.setDeactive();\n    }\n\n    await loadRoom(key);\n\n    if (rooms[key]) rooms[key].setActive();\n    activeRoomKey = key;\n  };\n\n  const mount = async (): Promise<void> => {\n    processPipelineDebugger.onMount(\"room-controller\");\n    initializeLoader();\n    await loader?.load({\n      source: {\n        modelDescriptors: [PLAYER_ASSET],\n      },\n    });\n    await loadRoom(\"navigation\");\n    await switchRoom(\"navigation\");\n  };\n\n  const update = (deltaTime: number) => {\n    activeRoom?.update(deltaTime);\n  };\n\n  const unmount = (): void => {\n    loader?.dispose();\n\n    Object.values(rooms).forEach((room) => {\n      room?.unmount();\n    });\n\n    processPipelineDebugger.onUnmount(\"room-controller\");\n  };\n\n  const transitionRooms = (key: RoomKey) => {\n    eventBusManager.loadingBus.emit({\n      type: \"load:start\",\n      loaded: 0,\n      total: 0,\n      url: \"\",\n    });\n\n    Promise.allSettled([switchRoom(key)]).then(() => {\n      eventBusManager.loadingBus.emit({ type: \"load:complete\" });\n    });\n  };\n\n  const deactivateRoom = () => {\n    if (!activeRoomKey) return;\n\n    activeRoom?.setDeactive();\n  };\n\n  return {\n    mount: mount,\n    switchRoom: {\n      navigation: () => transitionRooms(\"navigation\"),\n      about: () => transitionRooms(\"about\"),\n      projects: () => transitionRooms(\"projects\"),\n      default: () => deactivateRoom(),\n    },\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}