{"version":3,"sources":["../src/gameplay/gameplay.ts"],"names":["createGameplay","globalState","eventBusManager","getGlobalContext","context","getThreeJsContext","clock","Clock","state","tempData","isMounted","roomController","createRoomController","bind","mount","processPipelineDebugger","updateDeltaTime","update"],"mappings":"wLAyBO,IAAMA,EAAiB,IAAgB,CAEtC,IAAA,CAAE,YAAAC,CAAY,CAAA,eAAA,CAAAC,CAAgB,CAAA,CAAIC,GAClCC,CAAQC,CAAkB,EAAA,KAC1BC,EAAe,IAAIC,KAAAA,CAKrBC,CAAe,CAAA,CAAC,UAAW,CAAE,CAAA,CAC7BC,CAAqB,CAAA,CAAC,UAAW,CAAE,CAAA,CACnCC,CAAkB,CAAA,KAAA,CAGlBC,EAA8BC,GAAqB,EAAA,CAEjDC,CAAO,CAAA,IAAM,CACjBX,CAAgB,CAAA,UAAA,CAAW,EAAG,CAAA,YAAA,CAAcS,EAAe,UAAW,CAAA,KAAQ,CAC9ET,CAAAA,CAAAA,CAAgB,WAAW,EAAG,CAAA,YAAA,CAAcS,CAAe,CAAA,UAAA,CAAW,OAAU,CAEhFT,CAAAA,CAAAA,CAAgB,UAAW,CAAA,EAAA,CAAG,eAAgBS,CAAe,CAAA,UAAA,CAAW,QAAW,CAAA,CACnFT,EAAgB,UAAW,CAAA,EAAA,CAAG,cAAgBS,CAAAA,CAAAA,CAAe,WAAW,OAAU,CAAA,CAGlFT,CAAgB,CAAA,UAAA,CAAW,GAAG,WAAaS,CAAAA,CAAAA,CAAe,UAAW,CAAA,UAAa,CAClFT,CAAAA,CAAAA,CAAgB,UAAW,CAAA,EAAA,CAAG,YAAaS,CAAe,CAAA,UAAA,CAAW,OAAU,EACjF,EAEMG,CAAQ,CAAA,SAA2B,CACpCJ,CAAAA,GAEHK,IAAwB,OAAQ,CAAA,UAAU,CAE1C,CAAA,MAAMJ,EAAe,KAAM,EAAA,CAC3BE,CAAK,EAAA,CACLH,EAAU,IACZ,EAAA,CAAA,CAEMM,CAAkB,CAAA,IAAY,CAClCP,CAAS,CAAA,SAAA,CAAYH,CAAM,CAAA,QAAA,GAEtB,KAAMG,CAAAA,CAAAA,CAAS,SAAS,CAAA,GAC3BD,EAAM,SAAYC,CAAAA,CAAAA,CAAS,SAE/B,EAAA,CAAA,CAEMQ,EAAS,IAAM,CACnBD,CAAgB,EAAA,CAChBL,EAAe,MAAOH,CAAAA,CAAAA,CAAM,SAAS,EACvC,EAeA,OAAO,CACL,KAAA,CAAOM,CACP,CAAA,MAAA,CAAQG,EACR,OATc,CAAA,IAAM,CACpBF,GAAAA,CAAwB,UAAU,UAAU,EAG9C,CAMA,CACF","file":"chunk-35WYS33V.js","sourcesContent":["import { getGlobalContext } from \"managers/globalContext\";\nimport { Clock } from \"three\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { createRoomController, RoomController } from \"./controller/room_controller\";\nimport { processPipelineDebugger } from \"debug/debugger\";\n\n\nexport interface Gameplay {\n  mount: () => Promise<void>;\n  update: () => void;\n  unmount: () => void;\n}\n\n\ninterface State {\n  deltaTime: number;\n}\n\n\n\ninterface TempData {\n  deltaTime: number;\n}\n \n\nexport const createGameplay = (): Gameplay => {\n  //Global properties\n  const { globalState,eventBusManager } = getGlobalContext();\n  const context=getThreeJsContext();\n  const clock: Clock = new Clock();\n\n\n\n  //Re usable state (no re-allocation)\n  let state: State = {deltaTime: 0,};\n  let tempData: TempData = {deltaTime: 0,};\n  let isMounted:boolean=false;\n\n  //Controllers\n  let roomController:RoomController=createRoomController();\n\n  const bind = () => {\n    eventBusManager.displayBus.on(\"about:show\", roomController.switchRoom['about']);\n    eventBusManager.displayBus.on(\"about:hide\", roomController.switchRoom['default']);\n\n    eventBusManager.displayBus.on(\"project:show\", roomController.switchRoom['projects']);\n    eventBusManager.displayBus.on(\"project:hide\", roomController.switchRoom['default']);\n    \n\n    eventBusManager.displayBus.on(\"home:show\", roomController.switchRoom['navigation']);\n    eventBusManager.displayBus.on(\"home:hide\", roomController.switchRoom['default']);\n  };\n\n  const mount = async (): Promise<void> => {\n    if(isMounted) return;\n    \n    processPipelineDebugger.onMount('gameplay')\n    \n    await roomController.mount();\n    bind();\n    isMounted=true;\n  };\n\n  const updateDeltaTime = (): void => {\n    tempData.deltaTime = clock.getDelta();\n\n    if (!isNaN(tempData.deltaTime)) {\n      state.deltaTime = tempData.deltaTime;\n    }\n  };\n\n  const update = () => {\n    updateDeltaTime();\n    roomController.update(state.deltaTime);\n  };\n\n  const unbind = () => {\n\n\n    // eventBusManager.displayBus.off(\"about:show\", rooms.navigation.setActive);\n    // eventBusManager.displayBus.off(\"about:hide\", rooms.navigation.setDeactive);\n  };\n\n  const unmount = () => {\n    processPipelineDebugger.onUnmount('gameplay')\n    unbind();\n   \n  };\n\n  return {\n    mount: mount,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}