{"version":3,"sources":["../src/plugins/loader/fbx_loader.ts"],"names":["createFBXLoader","loadingManager","scene","storageManager","fbxLoader","FBXLoader","_loadMesh","metaData","model","err","assets","promises","asset"],"mappings":"gEAaO,IAAMA,EAAkB,CAAC,CAC9B,eAAAC,CACA,CAAA,KAAA,CAAAC,EACA,cAAAC,CAAAA,CACF,IAAoC,CAClC,IAAMC,EAAuB,IAAIC,SAAAA,CAAUJ,CAAc,CAMnDK,CAAAA,CAAAA,CAAY,MAAOC,CAAmC,EAAA,CAC1D,GAAI,CACF,IAAMC,EAAQ,MAAMJ,CAAAA,CAAU,UAAUG,CAAS,CAAA,IAAI,EACrDJ,CAAe,CAAA,UAAA,CAAW,OAAO,CAAE,CAAA,KAAA,CAAMI,EAAS,EAAI,CAAA,CACpD,UAAYC,CAAAA,CAAAA,CAAM,UAClB,CAAA,MAAA,CAAQA,CACV,CAAC,CAAA,CACDN,EAAM,GAAIM,CAAAA,CAAK,EACjB,CAASC,MAAAA,CAAAA,CAAK,CACZ,MAAM,IAAI,MAAM,CAAkCA,+BAAAA,EAAAA,CAAG,EAAE,CACzD,CACF,EAWA,OAAO,CACL,KAVW,MAAOC,CAAAA,EAAmC,CACrD,IAAMC,CAAAA,CAA4B,EAClCD,CAAAA,CAAAA,CAAO,QAASE,CAAU,EAAA,CACxBD,EAAS,IAAKL,CAAAA,CAAAA,CAAUM,CAAK,CAAC,EAChC,CAAC,CAED,CAAA,MAAM,QAAQ,UAAWD,CAAAA,CAAQ,EACnC,CAIA,CACF","file":"chunk-VGX47XE2.js","sourcesContent":["import { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { Scene } from \"three\";\nimport { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\nimport type { LoadingManager } from \"three/src/loaders/LoadingManager.js\";\nimport { ModelAssetDescriptor } from \"types/loader.types\";\nimport { LoaderPlugin } from \"types/plugin.types\";\n\nexport interface FBXLoaderProps {\n  scene: Scene;\n  loadingManager: LoadingManager;\n  storageManager: GlobalStorageManager;\n}\n\nexport const createFBXLoader = ({\n  loadingManager,\n  scene,\n  storageManager,\n}: FBXLoaderProps): LoaderPlugin => {\n  const fbxLoader: FBXLoader = new FBXLoader(loadingManager);\n\n  /**\n   * @description load the mesh\n   * @param metaData meta-data for loading the mesh\n   */\n  const _loadMesh = async (metaData: ModelAssetDescriptor) => {\n    try {\n      const model = await fbxLoader.loadAsync(metaData.path);\n      storageManager.getStorage(\"model\").store(metaData.id, {\n        animations: model.animations,\n        groups: model,\n      });\n      scene.add(model);\n    } catch (err) {\n      throw new Error(`Error while loading fbx file : ${err}`);\n    }\n  };\n\n  const load = async (assets: ModelAssetDescriptor[]) => {\n    const promises: Promise<void>[] = [];\n    assets.forEach((asset) => {\n      promises.push(_loadMesh(asset));\n    });\n\n    await Promise.allSettled(promises);\n  };\n\n  return {\n    load: load,\n  };\n};\n"]}