{"version":3,"sources":["../src/core/loader/file_type_plugins/hdr_loader.ts"],"names":["createHDRLoader","props","asset","scene","renderer","loadingManager","loadingEventBus","pmremGenerator","PMREMGenerator","rgbeLoader","RGBELoader","_loadHDRTexture","metaData","reject","resolve","data","texData","envMap","err"],"mappings":"qGAoBO,IAAMA,CAAmBC,CAAAA,CAAAA,EAA+C,CAC7E,GAAM,CAAE,KAAAC,CAAAA,CAAAA,CAAO,KAAAC,CAAAA,CAAAA,CAAO,QAAAC,CAAAA,CAAAA,CAAU,eAAAC,CAAgB,CAAA,eAAA,CAAAC,CAAgB,CAAA,CAAIL,CAE9DM,CAAAA,CAAAA,CAAiC,IAAIC,cAAeJ,CAAAA,CAAQ,CAC5DK,CAAAA,CAAAA,CAAyB,IAAIC,UAAAA,CAAWL,CAAc,CAMtDM,CAAAA,CAAAA,CAAkB,MAAOC,CAAAA,EACtB,IAAI,OAAA,CAAQ,CAACC,CAAQC,CAAAA,CAAAA,GAAY,CACtCL,CAAAA,CAAW,IACTG,CAAAA,CAAAA,CAAS,IACT,CAAA,CAACG,CAAmBC,CAAAA,CAAAA,GAAoB,CACtC,IAAMC,CAASV,CAAAA,CAAAA,CAAe,oBAAoBQ,CAAI,CAAA,CAAE,OACxDA,CAAAA,CAAAA,CAAK,OAAQ,EAAA,CACbZ,EAAM,WAAcc,CAAAA,CAAAA,CACpBL,CAAS,CAAA,SAAA,IACTE,CAAAA,CAAAA,GACF,CACA,CAAA,MAAA,CACCI,CAAQ,EAAA,CACPN,CAAS,CAAA,OAAA,GAAUM,CAAY,CAAA,CAC/BZ,CAAgB,CAAA,IAAA,CAAK,CAAE,IAAA,CAAM,YAAc,CAAA,GAAA,CAAKM,EAAS,IAAK,CAAC,CAC/DC,CAAAA,CAAAA,GACF,CACF,EACF,CAAC,CAAA,CAWH,OAAO,CACL,IATW,CAAA,SAAY,CACvB,MAAMF,CAAAA,CAAgBT,CAAK,EAC7B,CAQE,CAAA,OAAA,CANc,IAAM,CACpBK,CAAe,CAAA,OAAA,GACjB,CAKA,CACF","file":"chunk-VNWSKNSX.js","sourcesContent":["\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\nimport type { AssetMetaData, LoaderPlugin } from \"../loaderPlugins\";\nimport { DataTexture, LoadingManager, PMREMGenerator, Scene, WebGLRenderer } from \"three\";\nimport { createEventBus } from \"@managers/events/eventBus\";\nimport { LoadingEvents } from \"@managers/events/eventType\";\n\nexport interface HDRTextureLoaderProps {\n  asset: AssetMetaData;\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loadingManager: LoadingManager;\n  loadingEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n}\n\n/**\n * @description loads .hdr files and illuminates scene\n * @param props hdr loading properties\n * @returns HDR loader plugin\n */\nexport const createHDRLoader = (props: HDRTextureLoaderProps): LoaderPlugin => {\n  const { asset, scene, renderer, loadingManager, loadingEventBus } = props;\n\n  const pmremGenerator: PMREMGenerator = new PMREMGenerator(renderer);\n  const rgbeLoader: RGBELoader = new RGBELoader(loadingManager);\n\n  /**\n   * @description loads a hdr file\n   * @param metaData meta-data for loading hdr\n   */\n  const _loadHDRTexture = async (metaData: AssetMetaData): Promise<void> => {\n    return new Promise((reject, resolve) => {\n      rgbeLoader.load(\n        metaData.path,\n        (data: DataTexture, texData: object) => {\n          const envMap = pmremGenerator.fromEquirectangular(data).texture;\n          data.dispose();\n          scene.environment = envMap;\n          metaData.onSuccess?.();\n          resolve();\n        },\n        undefined,\n        (err) => {\n          metaData.onError?.(err as Error);\n          loadingEventBus.emit({ type: \"load:error\", url: metaData.path });\n          reject();\n        }\n      );\n    });\n  };\n\n  const load = async () => {\n    await _loadHDRTexture(asset);\n  };\n\n  const dispose = () => {\n    pmremGenerator.dispose();\n  };\n\n  return {\n    load: load,\n    dispose: dispose,\n  };\n};\n"]}