{"version":3,"sources":["../src/gameplay/rooms/projects/room.ts"],"names":["createProjectRoom","player","ground","serviceRegistry","getServiceRegistry","storage","context","eventBusManager","logger","scene","camera","orbit","renderer","components","createCameraManager","createPlayer","createGround","createLighting","group","deltaTime"],"mappings":"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","file":"chunk-Z6DMPIJV.js","sourcesContent":["import { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { Group, Object3DEventMap } from \"three\";\nimport { ModelIdentifier, Room, RoomProps } from \"types/rooms.types\";\nimport { CameraManager, createCameraManager } from \"./camera\";\nimport { createGround, Ground } from \"./ground\";\nimport { createLighting, Lighting } from \"./lights\";\nimport { createPlayer, Player } from \"./player\";\n\nexport interface ProjectRoomProps extends RoomProps {\n  player: ModelIdentifier;\n  ground: ModelIdentifier;\n}\n\ninterface Components {\n  camera: CameraManager;\n  player: Player;\n  ground: Ground;\n  lighting: Lighting;\n}\n\nexport const createProjectRoom = ({\n  player,\n  ground,\n}: ProjectRoomProps): Room => {\n  //====References===\n  const serviceRegistry = getServiceRegistry();\n  const [storage, context, eventBusManager, logger] = [\n    serviceRegistry.get(\"GlobalStorageManager\"),\n    serviceRegistry.get(\"ThreeJSContextManager\"),\n    serviceRegistry.get(\"EventBusManager\"),\n    serviceRegistry.get(\"Logger\"),\n  ];\n\n  const { scene, camera, orbit, renderer } = {\n    scene: context.get(\"scene\")!,\n    camera: context.get(\"camera\")!,\n    orbit: context.get(\"orbit\")!,\n    renderer: context.get(\"renderer\")!,\n  };\n\n  //===Local===\n  const components: Components = {\n    camera: createCameraManager({\n      camera,\n      eventBusManager,\n      orbit,\n      scene,\n    }),\n    player: createPlayer({ logger, reference: player, storage }),\n    ground: createGround({ logger, reference: ground, storage }),\n    lighting: createLighting({ renderer, scene }),\n  };\n  let group: Nullable<Group<Object3DEventMap>> = null;\n\n  const mount = () => {\n    components.ground.mount();\n    components.player.mount();\n    components.camera.mount();\n    components.lighting.mount();\n\n    group =\n      storage.getStorage(\"model\").retrieve(ground.storageId)?.groups ?? null;\n\n    logger.onMount({ origin: \"Projects\" });\n  };\n\n  const activate = () => {\n    if (group) group.visible = true;\n\n    components.camera.activate();\n    components.ground.actiavte();\n    components.lighting.activate();\n    components.player.activate();\n  };\n\n  const update = (deltaTime: number) => {\n    components.player.update(deltaTime);\n    components.camera.update(deltaTime);\n  };\n\n  const deactivate = () => {\n    if (group) group.visible = false;\n\n    components.camera.deactivate();\n    components.ground.deactivate();\n    components.lighting.deactivate();\n    components.player.deactiavte();\n  };\n\n  const unmount = () => {\n    components.camera.unmount();\n    components.ground.unmount();\n    components.lighting.unmount();\n    components.player.unmount();\n  };\n\n  return {\n    mount: mount,\n    setActive: activate,\n    update: update,\n    setDeactive: deactivate,\n    unmount: unmount,\n    isLoaded: false,\n  };\n};\n"]}