{"version":3,"sources":["../../../src/engine/core/ServiceRegistry.ts","../../../src/components/loading/loading.ts"],"names":["createServiceRegistry","services","name","service","serviceRegistry","getServiceRegistry","template","LoadingModal","clone","eventBusManager"],"mappings":"AAOA,IAAMA,EAAwB,IAAuB,CACnD,IAAMC,CAAAA,CAAyC,IAAI,GA6BnD,CAAA,OAAO,CACL,QAAA,CAzBe,CACfC,CACAC,CAAAA,CAAAA,GACS,CACT,GAAIF,EAAS,GAAIC,CAAAA,CAAI,CACnB,CAAA,MAAM,IAAI,KAAM,CAAA,CAAA,gCAAA,EAAmCA,CAAI,CAAA,CAAA,CAAG,EAE5DD,CAAS,CAAA,GAAA,CAAIC,CAAMC,CAAAA,CAAO,EAC5B,CAkBE,CAAA,GAAA,CAhBiCD,CAA2B,EAAA,CAC5D,IAAMC,CAAUF,CAAAA,CAAAA,CAAS,GAAIC,CAAAA,CAAI,EACjC,GAAI,CAACC,CACH,CAAA,MAAM,IAAI,KACR,CAAA,CAAA,0DAAA,EAA6DD,CAAI,CAAA,CACnE,EAEF,OAAOC,CACT,CASE,CAAA,GAAA,CAPWD,GACJD,CAAS,CAAA,GAAA,CAAIC,CAAI,CAO1B,CACF,CAEIE,CAAAA,CAAAA,CAEEC,CAAqB,CAAA,KACpBD,IACHA,CAAkBJ,CAAAA,CAAAA,EAGbI,CAAAA,CAAAA,CAAAA,CAAAA,CC7CT,IAAME,CAAW,CAAA,QAAA,CAAS,cAAc,UAAU,CAAA,CAElDA,EAAS,SAAY,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAA,KAaRC,CAAN,CAAA,cAA2B,WAAY,CAO5C,aAAc,CACZ,KAAA,EAcF,CAAA,IAAA,CAAA,aAAA,CAAgB,IAAM,EAWtB,CAxBE,KAAK,IAAO,CAAA,IAAA,CAAK,aAAa,CAAE,IAAA,CAAM,MAAO,CAAC,EAE9C,IAAMC,CAAAA,CAAQF,CAAS,CAAA,OAAA,CAAQ,UAAU,IAAI,CAAA,CAC7C,IAAK,CAAA,IAAA,CAAK,YAAYE,CAAK,CAAA,CAC3B,KAAK,QAAW,CAAA,CAAA,CAEhB,KAAK,IAAO,CAAA,CACV,OAAS,CAAA,IAAA,CAAK,KAAK,cAAe,CAAA,SAAS,CAC7C,CAAA,CACA,KAAK,MAASH,CAAAA,CAAAA,EAAqB,CAAA,GAAA,CAAI,QAAQ,CAC/C,CAAA,IAAA,CAAK,OAAO,MAAO,CAAA,CAAE,OAAQ,eAAgB,CAAC,EAChD,CAeA,IAAI,eAAgBI,CAAAA,CAAAA,CAAkC,CACpD,IAAA,CAAK,gBAAkBA,CAAgB,CAAA,UAAA,CACvC,IAAK,CAAA,aAAA,GACP,CAEA,iBAAA,EAAoB,EAEpB,oBAAA,EAAuB,EACzB","file":"loading.js","sourcesContent":["import {\n  ServiceKey,\n  ServiceMap,\n  ServiceRegistry,\n  ServiceType,\n} from \"types/service.types\";\n\nconst createServiceRegistry = (): ServiceRegistry => {\n  const services: Map<ServiceKey, ServiceType> = new Map<\n    ServiceKey,\n    ServiceType\n  >();\n\n  const register = <K extends ServiceKey>(\n    name: K,\n    service: ServiceMap[K]\n  ): void => {\n    if (services.has(name)) {\n      throw new Error(`Error : Redefining the service [${name}]`);\n    }\n    services.set(name, service);\n  };\n\n  const get = <K extends ServiceKey>(name: K): ServiceMap[K] => {\n    const service = services.get(name);\n    if (!service) {\n      throw new Error(\n        `Error : Trying to obtain value of an unregistered service ${name}`\n      );\n    }\n    return service as ServiceMap[K];\n  };\n\n  const has = (name: ServiceKey): boolean => {\n    return services.has(name);\n  };\n\n  return {\n    register: register,\n    get: get,\n    has: has,\n  };\n};\n\nlet serviceRegistry: ServiceRegistry | undefined = undefined;\n\nconst getServiceRegistry = () => {\n  if (!serviceRegistry) {\n    serviceRegistry = createServiceRegistry();\n  }\n\n  return serviceRegistry;\n};\n\nexport { getServiceRegistry };\n","import { EventBus } from \"@events/eventBus\";\nimport { EventBusManager } from \"@events/EventBusManager\";\nimport { Logger } from \"@utils/Logger\";\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { LoadingEvents } from \"types/eventType\";\n\nconst template = document.createElement(\"template\");\n///TODO: Re-add hidden in overlay\ntemplate.innerHTML = `\n    <link rel=\"stylesheet\" href=\"/style/loading_modal.css\"/>\n   \n    <div class=\"overlay hidden\" id=\"overlay\">\n      <div class=\"loading-logo\"></div>\n      <div id=\"loading-text\">Loading...</div>\n    </div>\n`;\n\ninterface Tags {\n  overlay: HTMLElement | null;\n}\n\nexport class LoadingModal extends HTMLElement {\n  loadingEventBus?: EventBus<LoadingEvents>;\n  root: ShadowRoot;\n  tags: Tags;\n  progress: number;\n  logger: Logger;\n\n  constructor() {\n    super();\n    this.root = this.attachShadow({ mode: \"open\" });\n\n    const clone = template.content.cloneNode(true);\n    this.root.appendChild(clone);\n    this.progress = 0;\n\n    this.tags = {\n      overlay: this.root.getElementById(\"overlay\"),\n    };\n    this.logger = getServiceRegistry().get(\"Logger\");\n    this.logger.onLoad({ origin: \"Loading Modal\" });\n  }\n\n  handleLoading = () => {\n    // this.loadingEventBus?.on(\"load:start\", (data) => {\n    //   this.tags.overlay?.classList.remove(\"hidden\");\n    // });\n    // this.loadingEventBus?.on(\"load:progress\", (data) => {\n    //   this.progress = data.loaded / data.total;\n    // });\n    // this.loadingEventBus?.on(\"load:complete\", (data) => {\n    //   this.tags.overlay?.classList.add(\"hidden\");\n    // });\n    // this.loadingEventBus?.on(\"load:error\", (data) => {});\n  };\n\n  set eventBusManager(eventBusManager: EventBusManager) {\n    this.loadingEventBus = eventBusManager.loadingBus;\n    this.handleLoading();\n  }\n\n  connectedCallback() {}\n\n  disconnectedCallback() {}\n}\n"]}