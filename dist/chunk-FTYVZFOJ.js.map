{"version":3,"sources":["../src/engine/managers/RenderManager.ts"],"names":["handleResize","camera","renderer","height","width","handleDebug","e","debugEventBus","scene","createRenderManager","serviceRegistry","getServiceRegistry","logger","threeJsManager","createThreeJsInstance","CANVAS_ID","threeJsContext","gameplay","createGameplayManager","_handleResize","_handleDebug","addEventListeners","removeEventListeners","flattenTask","queueStep"],"mappings":"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","file":"chunk-FTYVZFOJ.js","sourcesContent":["import { EventBus } from \"@events/eventBus\";\nimport { flattenTask, queueStep } from \"@utils/dsl\";\nimport { CANVAS_ID } from \"config/constants\";\nimport { getServiceRegistry } from \"engine/core/ServiceRegistry\";\nimport { PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport { DebugEvents } from \"types/event.types\";\nimport { Lifecycle, Task } from \"types/lifecycle.types\";\n\nimport {\n  createGameplayManager,\n  GameplayManager,\n} from \"gameplay/GameplayManager\";\nimport { ThreeJsContextManager } from \"./ContextManager\";\nimport { createThreeJsInstance } from \"./ThreeJsManager\";\n\nexport interface RenderManager extends Lifecycle {\n  onInit: () => void;\n}\n\n/** Resises Camera and Renderer on window resise */\nconst handleResize = (camera: PerspectiveCamera, renderer: WebGLRenderer) => {\n  const { height, width } = {\n    height: window.innerHeight,\n    width: window.innerWidth,\n  };\n\n  camera.aspect = width / height;\n  camera.updateProjectionMatrix();\n  renderer.setSize(width, height);\n};\n\n/**Toggles the Object Tree when you press shift and u*/\nconst handleDebug = (\n  e: KeyboardEvent,\n  debugEventBus: EventBus<DebugEvents>,\n  scene: Scene\n) => {\n  if (!(e.key.toLowerCase() === \"u\" && e.shiftKey)) return;\n\n  e.preventDefault();\n  debugEventBus.emit({\n    type: \"debug:inspector\",\n    scene: scene,\n  });\n};\n\nexport const createRenderManager = (): RenderManager => {\n  const serviceRegistry = getServiceRegistry();\n  const logger = serviceRegistry.get(\"Logger\");\n  const threeJsManager = createThreeJsInstance({ domMountId: CANVAS_ID });\n  let threeJsContext: ThreeJsContextManager;\n  const gameplay: GameplayManager = createGameplayManager();\n\n  let _handleResize: (e: UIEvent) => void;\n  let _handleDebug: (e: KeyboardEvent) => void;\n\n  /** Adds required event listeners */\n  const addEventListeners = () => {\n    /**\n     * Primary initialization to ensure correct aspect ratios\n     */\n    handleResize(\n      threeJsContext.get(\"camera\")!,\n      threeJsContext.get(\"renderer\")!\n    );\n\n    window.addEventListener(\"resize\", _handleResize);\n    window.addEventListener(\"keydown\", _handleDebug);\n  };\n\n  /** Release all event listeners to prevent memory leaks */\n  const removeEventListeners = () => {\n    window.removeEventListener(\"resize\", _handleResize);\n    window.removeEventListener(\"keydown\", _handleDebug);\n  };\n\n  const onInit = () => {};\n\n  const onLoad = (): Task[] => {\n    const tasks: Task[] = [\n      ...flattenTask(threeJsManager.onLoad() as Task[]),\n      queueStep(logger.onLoad, { origin: \"Render-Manager\" }),\n    ];\n    return tasks;\n  };\n\n  const onMount = (): Task[] => {\n    const tasks: Task[] = [\n      () => {\n        threeJsContext = serviceRegistry.get(\"ThreeJSContextManager\");\n        //Handle Resize\n        _handleResize = (e: UIEvent) =>\n          handleResize(\n            threeJsContext.get(\"camera\")!,\n            threeJsContext.get(\"renderer\")!\n          );\n        //Handle Debug\n        _handleDebug = (e: KeyboardEvent) =>\n          handleDebug(\n            e,\n            serviceRegistry.get(\"EventBusManager\").debugBus,\n            threeJsContext.get(\"scene\")!\n          );\n      },\n      queueStep(addEventListeners),\n      queueStep(logger.onMount, { origin: \"Render-Manager\" }),\n    ];\n\n    return tasks;\n  };\n\n  const onUpdate = (): Task[] => {\n    return [\n      queueStep(async () => {\n        try {\n          await gameplay.onMount(); // gameplay logic added after obtaining all assets\n        } catch (error) {\n          throw new Error(\"[Game Manager] Loading failed :${error}\");\n        }\n      }),\n      ...flattenTask(threeJsManager.onMount(() => {}) as Task[]), // pass the gameplay loop as callback to the game engine\n      queueStep(threeJsManager.onMount, gameplay.update),\n      queueStep(threeJsManager.onUpdate),\n      queueStep(logger.onUpdate, 0, { origin: \"Render-Manager\" }),\n    ];\n  };\n\n  const onUnmount = () => {\n    const tasks: Task[] = [\n      queueStep(removeEventListeners),\n      queueStep(gameplay.onUnmount),\n      queueStep(threeJsManager.onUnmount),\n      queueStep(logger.onUnmount, { origin: \"Render-Manager\" }),\n    ];\n\n    return tasks;\n  };\n\n  const onDispose = () => {\n    logger.onDestroy({ origin: \"RenderManager\" });\n  };\n\n  return {\n    onInit,\n    onLoad,\n    onMount,\n    onUpdate,\n    onUnmount,\n    onDestroy: onDispose,\n  };\n};\n"]}