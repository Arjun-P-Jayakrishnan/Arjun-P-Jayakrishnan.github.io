{"version":3,"sources":["../src/engine/core/LoadingManager.ts"],"names":["createLoader","scene","renderer","loaderEventBus","stateManager","storageManager","manager","LoadingManager","isConfigured","glbLoader","fbxLoader","hdrLoader","createGLBLoader","createFBXLoader","createHDRLoader","assetQueue","_configureLoadingManager","url","itemsLoaded","itemsTotal","pushToRespectiveLoaderQueue","model","_configurePlugins","assets","asset","promises"],"mappings":"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","file":"chunk-JZJLBSDF.js","sourcesContent":["import { EventBus } from \"@events/eventBus\";\nimport { GlobalStorageManager } from \"engine/managers/storage/storageTypes\";\nimport { LoadingManager, Scene, WebGLRenderer } from \"three\";\nimport { LoadingEvents } from \"types/eventType\";\nimport { LoadOptions, ModelAssetDescriptor } from \"types/loader.types\";\nimport { createFBXLoader } from \"../../plugins/loader/fbx_loader\";\nimport { createGLBLoader } from \"../../plugins/loader/glb_loader\";\nimport { createHDRLoader } from \"../../plugins/loader/hdr_loader\";\nimport { GlobalStateManager, LoadingContext } from \"./state/stateType\";\n\nexport interface LoaderProps {\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loaderEventBus: EventBus<LoadingEvents>;\n  stateManager: GlobalStateManager;\n  storageManager: GlobalStorageManager;\n}\n\nexport interface Loader {\n  configure: () => void;\n  load: (assets: ModelAssetDescriptor[]) => Promise<{\n    success: string[];\n    error: string[];\n  }>;\n  dispose: () => void;\n}\n/**\n * @description creates a loader with the given settings\n * @param options options to change loader settings\n * @param context global context with references\n * @returns Loader\n */\nexport const createLoader = ({\n  scene,\n  renderer,\n  loaderEventBus,\n  stateManager,\n  storageManager,\n}: LoaderProps): Loader => {\n  const manager: LoadingManager = new LoadingManager();\n  let isConfigured: boolean = false;\n  const [glbLoader, fbxLoader, hdrLoader] = [\n    createGLBLoader({\n      scene,\n      loadingManager: manager,\n      storageManager,\n    }),\n    createFBXLoader({\n      scene,\n      loadingManager: manager,\n      storageManager,\n    }),\n    createHDRLoader({\n      scene,\n      loadingManager: manager,\n      renderer,\n      storageManager,\n    }),\n  ];\n  const assetQueue: {\n    glb: ModelAssetDescriptor[];\n    fbx: ModelAssetDescriptor[];\n    hdr: ModelAssetDescriptor[];\n  } = {\n    glb: [],\n    fbx: [],\n    hdr: [],\n  };\n\n  /**\n   * @description attaches the event bus for listening to loading changes\n   */\n  const _configureLoadingManager = () => {\n    manager.onStart = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:start\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      stateManager.loading.setState({\n        loading: { active: true, progress: 0 } as LoadingContext,\n      });\n    };\n\n    manager.onProgress = (url, itemsLoaded, itemsTotal) => {\n      loaderEventBus.emit({\n        type: \"load:progress\",\n        url: url,\n        loaded: itemsLoaded,\n        total: itemsTotal,\n      });\n      stateManager.loading.setState({\n        loading: {\n          active: true,\n          progress: itemsLoaded / itemsTotal,\n        } as LoadingContext,\n      });\n    };\n\n    manager.onLoad = () => {\n      loaderEventBus.emit({\n        type: \"load:complete\",\n      });\n    };\n\n    manager.onError = (url) => {\n      loaderEventBus.emit({\n        type: \"load:error\",\n        url: url,\n      });\n    };\n\n    isConfigured = true;\n  };\n\n  const pushToRespectiveLoaderQueue = (model: ModelAssetDescriptor) => {\n    switch (model.type) {\n      case \"glb\":\n        assetQueue.glb.push(model);\n        break;\n      case \"fbx\":\n        assetQueue.fbx.push(model);\n        break;\n      case \"hdr\":\n        assetQueue.hdr.push(model);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * @description create necessary loaders\n   */\n  const _configurePlugins = (assets: ModelAssetDescriptor[]) => {\n    assets.forEach((asset) => {\n      pushToRespectiveLoaderQueue(asset);\n    });\n  };\n\n  /**\n   * @description configuration\n   */\n  const _configure = () => {\n    _configureLoadingManager();\n  };\n\n  /**\n   * @description load all types of assets\n   */\n  const load = async (\n    assets: LoadOptions\n  ): Promise<{ success: []; error: [] }> => {\n    if (!isConfigured)\n      throw new Error(\n        `Error: Trying to load from loader before configuring it`\n      );\n\n    const promises: Promise<void>[] = [];\n    _configurePlugins(assets);\n\n    promises.push(glbLoader.load(assetQueue.glb));\n    promises.push(fbxLoader.load(assetQueue.fbx));\n    promises.push(hdrLoader.load(assetQueue.hdr));\n\n    await Promise.allSettled(promises);\n    assetQueue.fbx = [];\n    assetQueue.glb = [];\n    assetQueue.hdr = [];\n\n    return {\n      success: [],\n      error: [],\n    };\n  };\n\n  const dispose = () => {};\n\n  return {\n    configure: _configure,\n    load: load,\n    dispose: dispose,\n  };\n};\n"]}