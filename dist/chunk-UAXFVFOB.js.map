{"version":3,"sources":["../src/gameplay/navigation/player.ts"],"names":["createPlayer","props","eventBusManager","globalState","globalStorage","getGlobalContext","contextManager","getThreeJsContext","animationController","fsmController","Vector3","tempData","inputs","objects","animations","mount","playerRoot","_animations","getControllers","mixer","AnimationMixer","createAnimationController","createFSMController","err","updateMouse","deltaTime","rotation","camera","Euler"],"mappings":"0PA8DO,IAAMA,CAAgBC,CAAAA,CAAAA,EAA+B,CAC1D,IAAM,CAAE,eAAAC,CAAAA,CAAAA,CAAiB,WAAAC,CAAAA,CAAAA,CAAa,aAAAC,CAAAA,CAAc,CAAIC,CAAAA,CAAAA,EAClDC,CAAAA,CAAAA,CAAiBC,CAAkB,EAAA,CACrCC,CACAC,CAAAA,CAAAA,EAEqB,CACvB,SAAA,CAAW,IAAIC,OAAAA,CAAQ,CAAG,CAAA,CAAA,CAAG,EAAE,CAC/B,CAAA,QAAA,CAAU,IAAIA,OAAAA,CAAQ,CAAG,CAAA,CAAA,CAAG,CAAC,CAK/B,EACIC,EAAqB,CACvB,cAAA,CAAgB,IAAID,OAAAA,CAAQ,EAAG,CAAG,CAAA,CAAC,CACrC,EAAA,KACIE,CAGA,CAAA,CACF,MAAO,IACP,CAAA,QAAA,CAAU,IACZ,CAAA,CAEIC,GACAC,CAAAA,CAAAA,CAEEC,EAAQ,IAAM,CAClB,GAAI,CACF,IAAIC,CAAAA,CAAaV,CACd,CAAA,GAAA,CAAI,OAAO,CAAA,CACX,eAAgBL,CAAAA,CAAAA,CAAM,UAAU,CAAA,CAC7BgB,EACJb,CAAc,CAAA,UAAA,CAAW,QAAQ,CAAA,CAAE,QAAS,CAAA,QAAQ,CAAG,EAAA,UAAA,EAAc,EAAC,CAExE,GAAI,CAACY,CACH,CAAA,MAAM,IAAI,KAAM,CAAA,CAAA,gCAAA,EAAmCf,CAAM,CAAA,UAAU,CAAE,CAAA,CAAA,CAGvEY,GAAU,CAAA,CACR,UAAYG,CAAAA,CACd,CAEAJ,CAAAA,CAAAA,CAAS,CACP,KAAA,CAAOM,KAAiB,CAAA,aAAA,CAAc,OAAO,CAAA,CAC7C,QAAUA,CAAAA,GAAAA,GAAiB,aAAc,CAAA,UAAU,CACrD,CAAA,CAEA,IAAMC,CAAAA,CAAQ,IAAIC,cAAeJ,CAAAA,CAAU,CAC3CF,CAAAA,CAAAA,CAAa,CACX,KAAA,CAAOK,CACT,CAAA,CACAX,CAAsBa,CAAAA,GAAAA,CAA0B,CAC9C,KAAA,CAAOF,CACP,CAAA,OAAA,CAAS,CACP,IAAMA,CAAAA,CAAAA,CAAM,UAAWF,CAAAA,CAAAA,CAAY,CAAC,CAAC,CACrC,CAAA,IAAA,CAAME,CAAM,CAAA,UAAA,CAAWF,CAAY,CAAA,CAAC,CAAC,CAAA,CACrC,IAAKE,CAAM,CAAA,UAAA,CAAWF,CAAY,CAAA,CAAC,CAAC,CACtC,CACA,CAAA,iBAAA,CAAmB,EACrB,CAAC,CAEDR,CAAAA,CAAAA,CAAgBa,GAAoB,CAAA,CAClC,oBAAqBd,CACvB,CAAC,CAEDC,CAAAA,CAAAA,CAAc,KAAM,GACtB,OAASc,CAAK,CAAA,CACZ,OAAQ,CAAA,KAAA,CAAM,CAAiCA,8BAAAA,EAAAA,CAAG,EAAE,EACtD,CACF,CAEMC,CAiGN,OAAO,CACL,KAAA,CAAOT,CACP,CAAA,QAAA,CAhBe,IAAM,EAEvB,CAeE,UAbiB,CAAA,IAAM,EAAC,CAcxB,MA1Ca,CAAA,CACbU,CACAC,CAAAA,CAAAA,CACAC,CAaAlB,IAAAA,CAAAA,CAAc,MAAOgB,CAAAA,CAAS,EAEvB,CACL,QAAA,CAAU,IAAIf,OAAAA,CACd,QAAU,CAAA,IAAIkB,KAChB,CAAA,CAAA,CAsBA,OAbc,CAAA,IAAM,EActB,CACF","file":"chunk-UAXFVFOB.js","sourcesContent":["import {\n  AnimationController,\n  createAnimationController,\n} from \"controllers/animation\";\nimport { getThreeJsContext } from \"core/game_engine/game_context\";\nimport { createFSMController, FSMController } from \"fsm/player\";\nimport { getControllers } from \"graphics/mechanics/controllers/controller\";\nimport { KeyboardController } from \"graphics/mechanics/controllers/plugins/keyboard\";\nimport { MouseController } from \"graphics/mechanics/controllers/plugins/mouse\";\nimport { getGlobalContext } from \"managers/globalContext\";\nimport { AnimationMixer, Euler, Object3D, Scene, Vector3 } from \"three\";\n\nexport interface PlayerProps {\n  rootMeshId: string;\n}\n\nexport interface Player {\n  mount: () => void;\n  update: (\n    deltaTime: number,\n    rotation: {\n      yaw: number;\n      pitch: number;\n    },\n    camera: {\n      rotation: Euler;\n    }\n  ) => {\n    position: Vector3;\n    rotation: Euler;\n  };\n  activate: () => void;\n  deactivate: () => void;\n  unmount: () => void;\n}\n\ninterface PlayerState {\n  direction: Vector3;\n  velocity: Vector3;\n  rotationApplied: {\n    yaw: number;\n    pitch: number;\n  };\n}\n\ninterface ObjectReferences {\n  playerRoot: Object3D;\n}\n\ninterface Animation {\n  mixer: AnimationMixer | null;\n}\n\nconst PLAYER_CONSTANTS = {\n  MOVEMENT_ACCELERATION: 0.05,\n  MAX_VELOCITY: 0.05,\n};\n\ninterface TempData {\n  inputDirection: Vector3;\n}\n\nexport const createPlayer = (props: PlayerProps): Player => {\n  const { eventBusManager, globalState, globalStorage } = getGlobalContext();\n  const contextManager = getThreeJsContext();\n  let animationController: AnimationController;\n  let fsmController: FSMController;\n\n  let state: PlayerState = {\n    direction: new Vector3(0, 0, -1),\n    velocity: new Vector3(0, 0, 0),\n    rotationApplied: {\n      pitch: 0,\n      yaw: 0,\n    },\n  };\n  let tempData: TempData = {\n    inputDirection: new Vector3(0, 0, 0),\n  };\n  let inputs: {\n    mouse: MouseController | null;\n    keyboard: KeyboardController | null;\n  } = {\n    mouse: null,\n    keyboard: null,\n  };\n\n  let objects: ObjectReferences;\n  let animations: Animation;\n\n  const mount = () => {\n    try {\n      let playerRoot = contextManager\n        .get(\"scene\")\n        .getObjectByName(props.rootMeshId);\n      const _animations =\n        globalStorage.getStorage(\"player\").retrieve(\"player\")?.animations ?? [];\n\n      if (!playerRoot) {\n        throw new Error(`player doesn't exist for the id ${props.rootMeshId}`);\n      }\n      //Local References\n      objects = {\n        playerRoot: playerRoot,\n      };\n\n      inputs = {\n        mouse: getControllers().getController(\"mouse\"),\n        keyboard: getControllers().getController(\"keyboard\"),\n      };\n\n      const mixer = new AnimationMixer(playerRoot);\n      animations = {\n        mixer: mixer,\n      };\n      animationController = createAnimationController({\n        mixer: mixer,\n        actions: {\n          Idle: mixer.clipAction(_animations[0]),\n          Walk: mixer.clipAction(_animations[3]),\n          Run: mixer.clipAction(_animations[1]),\n        },\n        crossFadeDuration: 0.3,\n      });\n\n      fsmController = createFSMController({\n        animationController: animationController,\n      });\n\n      fsmController.mount();\n    } catch (err) {\n      console.error(`Player mesh cant be obtained :${err}`);\n    }\n  };\n\n  const updateMouse = (\n    mouse: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    // state.rotationApplied = mouse;\n    // objects.playerRoot.rotation.y += state.rotationApplied.yaw;\n  };\n\n  // const updateKeyboard = (deltaTime: number) => {\n  //   if (!inputs.keyboard) return;\n  //   const FRICTION = 5.0;\n  //   const VELOCITY_DEADZONE = 0.001;\n\n  //   const { inputDirection } = tempData;\n  //   inputDirection.set(0, 0, 0);\n\n  //   if (inputs.keyboard.isKeyPressed(\"w\")) inputDirection.z -= 1;\n  //   if (inputs.keyboard.isKeyPressed(\"s\")) inputDirection.z += 1;\n  //   if (inputs.keyboard.isKeyPressed(\"a\")) inputDirection.x -= 1;\n  //   if (inputs.keyboard.isKeyPressed(\"d\")) inputDirection.x += 1;\n\n  //   if (inputDirection.length() > 0) {\n  //     //normalize direction\n  //     inputDirection.applyQuaternion(objects.playerRoot.quaternion);\n  //     inputDirection.normalize();\n\n  //     //accelerate towards the direction\n  //     state.velocity.add(\n  //       inputDirection.multiplyScalar(\n  //         PLAYER_CONSTANTS.MOVEMENT_ACCELERATION * deltaTime\n  //       )\n  //     );\n  //     //ensure the velocity doesn't go over the threshold\n  //     state.velocity.clampLength(0, PLAYER_CONSTANTS.MAX_VELOCITY);\n  //   } else if (inputDirection.length() == 0 && state.velocity.length() > 0) {\n  //     const decay = Math.exp(-FRICTION * deltaTime);\n  //     state.velocity.multiplyScalar(decay);\n\n  //     if (state.velocity.lengthSq() < VELOCITY_DEADZONE * VELOCITY_DEADZONE) {\n  //       state.velocity.set(0, 0, 0);\n  //     }\n  //   }\n\n  //   objects.playerRoot.position.add(state.velocity);\n  // };\n\n  // const updateControllers = (\n  //   deltaTime: number,\n  //   rotation: { yaw: number; pitch: number },\n  //   camera: { rotation: Euler }\n  // ) => {\n  //   updateMouse(rotation, camera);\n  //   updateKeyboard(deltaTime);\n  // };\n\n  // const updateAnimation = (deltaTime: number) => {\n  //   animations.mixer!.update(deltaTime);\n  // };\n\n  const update = (\n    deltaTime: number,\n    rotation: { yaw: number; pitch: number },\n    camera: { rotation: Euler }\n  ) => {\n    // if (animations.mixer) {\n    //   updateAnimation(deltaTime);\n    // }\n\n    // updateControllers(deltaTime, rotation, camera);\n\n    // return {\n    //   position: objects.playerRoot.position,\n    //   rotation: objects.playerRoot.rotation,\n    // };\n\n    fsmController.update(deltaTime);\n\n    return {\n      position: new Vector3(),\n      rotation: new Euler(),\n    };\n  };\n\n  const activate = () => {\n    // objects.playerRoot.rotation.set(0,0,0,'XYZ')\n  };\n\n  const deactivate = () => {};\n\n  const unmount = () => {\n    try {\n      //objects.playerRoot.clear();\n    } catch (err) {\n      console.error(`Error while destroy player ${err}`);\n    }\n  };\n\n  return {\n    mount: mount,\n    activate: activate,\n    deactivate: deactivate,\n    update: update,\n    unmount: unmount,\n  };\n};\n"]}