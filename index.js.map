{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  createWebComponentManager,\n  WebComponentManager,\n} from \"@components/main\";\nimport { getGlobalContext, References } from \"@utils/globalContext\";\nimport { assetMetaData } from \"config/assetMetaData\";\nimport { createGameManager, GameEngineManager } from \"graphics/main\";\n\ninterface Managers {\n  webComponent: WebComponentManager;\n  gameEngine: GameEngineManager;\n}\n\nlet references: References;\nlet managers: Managers;\n\nconst preMount = () => {\n  /**\n   * References\n   */\n  references = getGlobalContext();\n  /**\n   * Managers\n   */\n  managers = {\n    webComponent: createWebComponentManager(),\n    gameEngine: createGameManager({\n      loaderOptions: {\n        meshesMetaData: assetMetaData.meshes,\n        hdrMetaData: assetMetaData.hdr,\n      },\n    }),\n  };\n\n  managers.webComponent.mountComponents();\n};\n\n/**\n * helps to add all necessary mounting function\n */\nconst mount = () => {\n  /**\n   * Add Event Manager reference to web components for interaction\n   */\n  managers.webComponent.attachReferences();\n  managers.gameEngine.mount();\n\n  /**\n   * Loads all models , HDR  etc\n   */\n  Promise.allSettled([managers.gameEngine.load()]).then((responses) => {\n    responses.forEach((response) => {\n      if (response.status == \"rejected\") {\n        throw new Error(\n          `Failed to load models and mount game engine ${response.reason}`\n        );\n      }\n    });\n\n    /**\n     * @description update the game engine\n     * (uses self recursion method for rendering so only need to call once)\n     */\n    managers.gameEngine.update();\n  });\n};\n\n/**\n * helps to clear any unmounted objects\n */\nconst unmount = () => {\n  managers.webComponent.unmountComponents();\n  managers.gameEngine.unmount();\n};\n\n/**\n * entry point for the whole app\n */\nconst main = () => {\n  preMount();\n\n  /**\n   * Mounts the components when dom is fully loaded\n   */\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    mount();\n    /**\n     * Unmounts everything when the window is going to unload\n     */\n    window.addEventListener(\"beforeunload\", () => {\n      unmount();\n    });\n  });\n};\n\n/**\n * IIFE function\n * (Immediately Invoked Function Expression)\n */\n(() => {\n  main();\n})();\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAI;AACJ,IAAI;AAEJ,IAAM,WAAW,MAAM;AAIrB,eAAa,iBAAiB;AAI9B,aAAW;AAAA,IACT,cAAc,0BAA0B;AAAA,IACxC,YAAY,kBAAkB;AAAA,MAC5B,eAAe;AAAA,QACb,gBAAgB,cAAc;AAAA,QAC9B,aAAa,cAAc;AAAA,MAC7B;AAAA,IACF,CAAC;AAAA,EACH;AAEA,WAAS,aAAa,gBAAgB;AACxC;AAKA,IAAM,QAAQ,MAAM;AAIlB,WAAS,aAAa,iBAAiB;AACvC,WAAS,WAAW,MAAM;AAK1B,UAAQ,WAAW,CAAC,SAAS,WAAW,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,cAAc;AACnE,cAAU,QAAQ,CAAC,aAAa;AAC9B,UAAI,SAAS,UAAU,YAAY;AACjC,cAAM,IAAI;AAAA,UACR,+CAA+C,SAAS,MAAM;AAAA,QAChE;AAAA,MACF;AAAA,IACF,CAAC;AAMD,aAAS,WAAW,OAAO;AAAA,EAC7B,CAAC;AACH;AAKA,IAAM,UAAU,MAAM;AACpB,WAAS,aAAa,kBAAkB;AACxC,WAAS,WAAW,QAAQ;AAC9B;AAKA,IAAM,OAAO,MAAM;AACjB,WAAS;AAKT,WAAS,iBAAiB,oBAAoB,MAAM;AAClD,UAAM;AAIN,WAAO,iBAAiB,gBAAgB,MAAM;AAC5C,cAAQ;AAAA,IACV,CAAC;AAAA,EACH,CAAC;AACH;AAAA,CAMC,MAAM;AACL,OAAK;AACP,GAAG;","names":[]}