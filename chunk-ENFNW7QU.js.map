{"version":3,"sources":["../src/components/website/header.ts"],"sourcesContent":["import { EventBus } from \"@utils/event_management/eventBus\";\nimport { EventBusManager } from \"@utils/event_management/eventBusFactory\";\nimport { DisplayEvents } from \"@utils/event_management/eventType\";\n\nconst template = document.createElement(\"template\");\n\ntemplate.innerHTML = `\n  <link rel=\"stylesheet\" href=\"/style/header.css\"/>\n  <nav class=\"navbar\">\n      <div class=\"logo\">Logo</div>\n      <button class=\"toggle-btn\">&#9776</button>\n      <ul class=\"nav-links\">\n          <li><a href=\"\" id=\"home\">Home</a></li>\n          <li><a href=\"\" id=\"about\">About</a></li>\n          <li><a href=\"\" id=\"projects\">Projects</a></li>\n          <li><a href=\"\" id=\"contact\">Contact</a></li>\n      </ul>\n  </nav>\n`;\n\ninterface State {\n  hamburgerMenu: {\n    isOpen: boolean;\n    isTransitioning: boolean;\n  };\n  isProjectsShown: boolean;\n}\n\nexport class Navbar extends HTMLElement {\n  toggleBtn: Element;\n  navLinks: Element;\n\n  state: State;\n  displayEventBus: EventBus<DisplayEvents> | undefined;\n\n  constructor() {\n    super();\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    const clone = template.content.cloneNode(true);\n\n    shadowRoot.appendChild(clone);\n\n    this.toggleBtn = shadowRoot.querySelector(\".toggle-btn\")!;\n    this.navLinks = shadowRoot.querySelector(\".nav-links\")!;\n\n    this.state = {\n      hamburgerMenu: {\n        isOpen: false,\n        isTransitioning: false,\n      },\n      isProjectsShown: false,\n    };\n  }\n\n  static get observedAttributes() {\n    return [];\n  }\n\n  /**\n   *\n   * @param e event triggered\n   * @returns\n   */\n  handleTransitionEnd = (e: Event) => {\n    if ((e as TransitionEvent).propertyName !== \"transform\") return;\n\n    if (this.navLinks!.classList.contains(\"closing\")) {\n      this.navLinks!.classList.remove(\"closing\");\n    }\n\n    this.state.hamburgerMenu.isTransitioning = false;\n  };\n  /**\n   *\n   * @param navLinks reference to navigation\n   */\n  toggleOpenState = (navLinks: Element): void => {\n    if (this.state.hamburgerMenu.isTransitioning) return;\n\n    this.state.hamburgerMenu.isTransitioning = true;\n\n    if (this.state.hamburgerMenu.isOpen) {\n      navLinks.classList.remove(\"open\");\n      navLinks.classList.add(\"closing\");\n      this.state.hamburgerMenu.isOpen = false;\n    } else {\n      navLinks.classList.add(\"open\");\n      navLinks.classList.remove(\"closing\");\n      this.state.hamburgerMenu.isOpen = true;\n    }\n  };\n\n  set eventBusManager(eventBusManager: EventBusManager) {\n    this.displayEventBus = eventBusManager.displayBus;\n\n    //update its local state to true if fired externally\n    this.displayEventBus.on(\"project:show\", (data) => {\n      this.handleShowEvent(data);\n    });\n\n    //update its local state to false if fired externally\n    this.displayEventBus.on(\"project:hide\", (data) => {\n      this.handleHideEvent(data);\n    });\n  }\n\n  handleShowEvent(_: any) {\n    this.state.isProjectsShown = true;\n\n  }\n\n  handleHideEvent(_: any) {\n    this.state.isProjectsShown = false;\n \n  }\n\n  /**\n   * @description called when the component is mounted\n   */\n  connectedCallback() {\n    this.toggleBtn!.addEventListener(\"click\", () => {\n      this.toggleOpenState(this.navLinks!);\n    });\n\n    this.navLinks!.addEventListener(\"transitionend\", (e) => {\n      this.handleTransitionEnd(e);\n    });\n\n    const projectLink = this.navLinks.querySelector(\"#projects\");\n\n    projectLink?.addEventListener(\"click\", (e) => {\n      e.preventDefault();\n\n      this.state.isProjectsShown = !this.state.isProjectsShown;\n\n      this.state.isProjectsShown\n        ? this.displayEventBus?.emit({ type: \"project:show\" })\n        : this.displayEventBus?.emit({ type: \"project:hide\" });\n    });\n  }\n\n  /**\n   * @description called when component is un mounted\n   */\n  disconnectedCallback() {\n    this.displayEventBus?.off(\"project:show\", (data) => {\n      this.handleShowEvent(data);\n    });\n    this.displayEventBus?.off(\"project:hide\", (data) => {\n      this.handleHideEvent(data);\n    });\n  }\n}\n"],"mappings":";AAIA,IAAM,WAAW,SAAS,cAAc,UAAU;AAElD,SAAS,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBd,IAAM,SAAN,cAAqB,YAAY;AAAA,EAOtC,cAAc;AACZ,UAAM;AA6BR;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAsB,CAAC,MAAa;AAClC,UAAK,EAAsB,iBAAiB,YAAa;AAEzD,UAAI,KAAK,SAAU,UAAU,SAAS,SAAS,GAAG;AAChD,aAAK,SAAU,UAAU,OAAO,SAAS;AAAA,MAC3C;AAEA,WAAK,MAAM,cAAc,kBAAkB;AAAA,IAC7C;AAKA;AAAA;AAAA;AAAA;AAAA,2BAAkB,CAAC,aAA4B;AAC7C,UAAI,KAAK,MAAM,cAAc,gBAAiB;AAE9C,WAAK,MAAM,cAAc,kBAAkB;AAE3C,UAAI,KAAK,MAAM,cAAc,QAAQ;AACnC,iBAAS,UAAU,OAAO,MAAM;AAChC,iBAAS,UAAU,IAAI,SAAS;AAChC,aAAK,MAAM,cAAc,SAAS;AAAA,MACpC,OAAO;AACL,iBAAS,UAAU,IAAI,MAAM;AAC7B,iBAAS,UAAU,OAAO,SAAS;AACnC,aAAK,MAAM,cAAc,SAAS;AAAA,MACpC;AAAA,IACF;AAtDE,UAAM,aAAa,KAAK,aAAa,EAAE,MAAM,OAAO,CAAC;AAErD,UAAM,QAAQ,SAAS,QAAQ,UAAU,IAAI;AAE7C,eAAW,YAAY,KAAK;AAE5B,SAAK,YAAY,WAAW,cAAc,aAAa;AACvD,SAAK,WAAW,WAAW,cAAc,YAAY;AAErD,SAAK,QAAQ;AAAA,MACX,eAAe;AAAA,QACb,QAAQ;AAAA,QACR,iBAAiB;AAAA,MACnB;AAAA,MACA,iBAAiB;AAAA,IACnB;AAAA,EACF;AAAA,EAEA,WAAW,qBAAqB;AAC9B,WAAO,CAAC;AAAA,EACV;AAAA,EAoCA,IAAI,gBAAgB,iBAAkC;AACpD,SAAK,kBAAkB,gBAAgB;AAGvC,SAAK,gBAAgB,GAAG,gBAAgB,CAAC,SAAS;AAChD,WAAK,gBAAgB,IAAI;AAAA,IAC3B,CAAC;AAGD,SAAK,gBAAgB,GAAG,gBAAgB,CAAC,SAAS;AAChD,WAAK,gBAAgB,IAAI;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA,EAEA,gBAAgB,GAAQ;AACtB,SAAK,MAAM,kBAAkB;AAAA,EAE/B;AAAA,EAEA,gBAAgB,GAAQ;AACtB,SAAK,MAAM,kBAAkB;AAAA,EAE/B;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB;AAClB,SAAK,UAAW,iBAAiB,SAAS,MAAM;AAC9C,WAAK,gBAAgB,KAAK,QAAS;AAAA,IACrC,CAAC;AAED,SAAK,SAAU,iBAAiB,iBAAiB,CAAC,MAAM;AACtD,WAAK,oBAAoB,CAAC;AAAA,IAC5B,CAAC;AAED,UAAM,cAAc,KAAK,SAAS,cAAc,WAAW;AAE3D,iBAAa,iBAAiB,SAAS,CAAC,MAAM;AAC5C,QAAE,eAAe;AAEjB,WAAK,MAAM,kBAAkB,CAAC,KAAK,MAAM;AAEzC,WAAK,MAAM,kBACP,KAAK,iBAAiB,KAAK,EAAE,MAAM,eAAe,CAAC,IACnD,KAAK,iBAAiB,KAAK,EAAE,MAAM,eAAe,CAAC;AAAA,IACzD,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB;AACrB,SAAK,iBAAiB,IAAI,gBAAgB,CAAC,SAAS;AAClD,WAAK,gBAAgB,IAAI;AAAA,IAC3B,CAAC;AACD,SAAK,iBAAiB,IAAI,gBAAgB,CAAC,SAAS;AAClD,WAAK,gBAAgB,IAAI;AAAA,IAC3B,CAAC;AAAA,EACH;AACF;","names":[]}