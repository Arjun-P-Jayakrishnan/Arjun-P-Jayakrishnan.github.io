{"version":3,"sources":["../src/graphics/gameplay/controllers/keyboard.ts"],"sourcesContent":["import { Controllers } from \"./controller\";\n\nexport interface KeyboardController extends Controllers {\n  getPressedKeys: () => string[];\n  isKeyPressed: (key: string) => boolean;\n}\n\nexport const createKeyboardController = (): KeyboardController => {\n  const pressedKeys = new Set<string>();\n\n  const normalizedKey = (key: string) => key.toLowerCase();\n\n  const _handleKeyUp = (e: KeyboardEvent) => {\n    pressedKeys.delete(normalizedKey(e.key));\n  };\n\n  const _handleKeyDown = (e: KeyboardEvent) => {\n    pressedKeys.add(normalizedKey(e.key));\n  };\n\n  const mountEvents = () => {\n    window.addEventListener(\"keyup\", _handleKeyUp);\n    window.addEventListener(\"keydown\", _handleKeyDown);\n  };\n\n  const unmountEvents = () => {\n    window.removeEventListener(\"keyup\", _handleKeyUp);\n    window.removeEventListener(\"keydown\", _handleKeyDown);\n    pressedKeys.clear();\n  };\n\n  const getPressedKeys = (): string[] => {\n    return Array.from(pressedKeys);\n  };\n\n  const isKeyPressed = (key: string) => {\n    return pressedKeys.has(normalizedKey(key));\n  };\n\n  return {\n    mount: mountEvents,\n    unmount: unmountEvents,\n    getPressedKeys: getPressedKeys,\n    isKeyPressed: isKeyPressed,\n  };\n};\n"],"mappings":";AAOO,IAAM,2BAA2B,MAA0B;AAChE,QAAM,cAAc,oBAAI,IAAY;AAEpC,QAAM,gBAAgB,CAAC,QAAgB,IAAI,YAAY;AAEvD,QAAM,eAAe,CAAC,MAAqB;AACzC,gBAAY,OAAO,cAAc,EAAE,GAAG,CAAC;AAAA,EACzC;AAEA,QAAM,iBAAiB,CAAC,MAAqB;AAC3C,gBAAY,IAAI,cAAc,EAAE,GAAG,CAAC;AAAA,EACtC;AAEA,QAAM,cAAc,MAAM;AACxB,WAAO,iBAAiB,SAAS,YAAY;AAC7C,WAAO,iBAAiB,WAAW,cAAc;AAAA,EACnD;AAEA,QAAM,gBAAgB,MAAM;AAC1B,WAAO,oBAAoB,SAAS,YAAY;AAChD,WAAO,oBAAoB,WAAW,cAAc;AACpD,gBAAY,MAAM;AAAA,EACpB;AAEA,QAAM,iBAAiB,MAAgB;AACrC,WAAO,MAAM,KAAK,WAAW;AAAA,EAC/B;AAEA,QAAM,eAAe,CAAC,QAAgB;AACpC,WAAO,YAAY,IAAI,cAAc,GAAG,CAAC;AAAA,EAC3C;AAEA,SAAO;AAAA,IACL,OAAO;AAAA,IACP,SAAS;AAAA,IACT;AAAA,IACA;AAAA,EACF;AACF;","names":[]}