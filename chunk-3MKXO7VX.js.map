{"version":3,"sources":["../src/graphics/loader/file_type_plugins/hdr_loader.ts"],"sourcesContent":["import { createEventBus } from \"@utils/event_management/eventBus\";\nimport type { LoadingEvents } from \"@utils/event_management/eventType\";\nimport { RGBELoader } from \"three/examples/jsm/loaders/RGBELoader.js\";\nimport type { AssetMetaData, LoaderPlugin } from \"../loaderPlugins\";\nimport { DataTexture, LoadingManager, PMREMGenerator, Scene, WebGLRenderer } from \"three\";\n\nexport interface HDRTextureLoaderProps {\n  asset: AssetMetaData;\n  scene: Scene;\n  renderer: WebGLRenderer;\n  loadingManager: LoadingManager;\n  loadingEventBus: ReturnType<typeof createEventBus<LoadingEvents>>;\n}\n\n/**\n * @description loads .hdr files and illuminates scene\n * @param props hdr loading properties\n * @returns HDR loader plugin\n */\nexport const createHDRLoader = (props: HDRTextureLoaderProps): LoaderPlugin => {\n  const { asset, scene, renderer, loadingManager, loadingEventBus } = props;\n\n  const pmremGenerator: PMREMGenerator = new PMREMGenerator(renderer);\n  const rgbeLoader: RGBELoader = new RGBELoader(loadingManager);\n\n  /**\n   * @description loads a hdr file\n   * @param metaData meta-data for loading hdr\n   */\n  const _loadHDRTexture = async (metaData: AssetMetaData): Promise<void> => {\n    return new Promise((reject, resolve) => {\n      rgbeLoader.load(\n        metaData.path,\n        (data: DataTexture, texData: object) => {\n          const envMap = pmremGenerator.fromEquirectangular(data).texture;\n          data.dispose();\n          scene.environment = envMap;\n          metaData.onSuccess?.();\n          resolve();\n        },\n        undefined,\n        (err) => {\n          metaData.onError?.(err as Error);\n          loadingEventBus.emit({ type: \"load:error\", url: metaData.path });\n          reject();\n        }\n      );\n    });\n  };\n\n  const load = async () => {\n    await _loadHDRTexture(asset);\n  };\n\n  const dispose = () => {\n    pmremGenerator.dispose();\n  };\n\n  return {\n    load: load,\n    dispose: dispose,\n  };\n};\n"],"mappings":";AAEA,SAAS,kBAAkB;AAE3B,SAAsC,sBAA4C;AAe3E,IAAM,kBAAkB,CAAC,UAA+C;AAC7E,QAAM,EAAE,OAAO,OAAO,UAAU,gBAAgB,gBAAgB,IAAI;AAEpE,QAAM,iBAAiC,IAAI,eAAe,QAAQ;AAClE,QAAM,aAAyB,IAAI,WAAW,cAAc;AAM5D,QAAM,kBAAkB,OAAO,aAA2C;AACxE,WAAO,IAAI,QAAQ,CAAC,QAAQ,YAAY;AACtC,iBAAW;AAAA,QACT,SAAS;AAAA,QACT,CAAC,MAAmB,YAAoB;AACtC,gBAAM,SAAS,eAAe,oBAAoB,IAAI,EAAE;AACxD,eAAK,QAAQ;AACb,gBAAM,cAAc;AACpB,mBAAS,YAAY;AACrB,kBAAQ;AAAA,QACV;AAAA,QACA;AAAA,QACA,CAAC,QAAQ;AACP,mBAAS,UAAU,GAAY;AAC/B,0BAAgB,KAAK,EAAE,MAAM,cAAc,KAAK,SAAS,KAAK,CAAC;AAC/D,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAEA,QAAM,OAAO,YAAY;AACvB,UAAM,gBAAgB,KAAK;AAAA,EAC7B;AAEA,QAAM,UAAU,MAAM;AACpB,mBAAe,QAAQ;AAAA,EACzB;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;","names":[]}